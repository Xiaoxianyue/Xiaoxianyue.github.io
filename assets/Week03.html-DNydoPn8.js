import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as F,e as r,w as a,r as i,o as y,a as s,d as l}from"./app-Cc7WVUoo.js";const d="/assets/16b60bf59c20b068tplv-t2oaga2asx-jj-mark3024000q75-BUIjj8qI.webp",u={};function m(v,n){const p=i("Tabs");return y(),t("div",null,[n[4]||(n[4]=F(`<h2 id="_1-线性查找" tabindex="-1"><a class="header-anchor" href="#_1-线性查找"><span>1. 线性查找</span></a></h2><h3 id="_1-1-步骤" tabindex="-1"><a class="header-anchor" href="#_1-1-步骤"><span>1.1 步骤</span></a></h3><ol><li>从第一个元素开始，将其与目标值进行比较。</li><li>如果找到目标值，则返回该元素所在的索引。</li><li>如果没有找到目标，继续比较列表下一个元素</li><li>如果遍历完整个列表都没有目标值，则目标值不存在于列表中。（一般返回 -1）</li></ol><h3 id="_1-2-完整代码" tabindex="-1"><a class="header-anchor" href="#_1-2-完整代码"><span>1.2 完整代码</span></a></h3><p>只考虑列表中只有一个目标值的情况：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> linear</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">lst</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">goal_num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(lst)):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> lst[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> goal_num:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(linear([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-练习" tabindex="-1"><a class="header-anchor" href="#_1-3-练习"><span>1.3 练习</span></a></h3>`,7)),r(p,{id:"38",data:[{id:"题目1：森林里的隐藏宝藏"},{id:"题目2：机器人迷宫寻路"}]},{title0:a(({value:e,isActive:o})=>n[0]||(n[0]=[l("题目1：森林里的隐藏宝藏")])),title1:a(({value:e,isActive:o})=>n[1]||(n[1]=[l("题目2：机器人迷宫寻路")])),tab0:a(({value:e,isActive:o})=>n[2]||(n[2]=[s("p",null,[l("你被困在一片神秘的森林里，传说森林里隐藏着一块能指引方向的宝藏石。森林被划分为一系列的区域，每个区域都有一块石头，但只有一块是真正的宝藏石。每块石头上都有一个刻印编号。已知这些编号的列表 "),s("code",null,"stones"),l("，你的任务是通过线性查找找到宝藏石的编号 "),s("code",null,"treasure_stone"),l("。")],-1),s("p",null,[s("strong",null,"要求：")],-1),s("ol",null,[s("li",null,"编写一个线性查找算法，找到宝藏石的编号位置。"),s("li",null,"输出宝藏石所在区域的索引。")],-1),s("p",null,[s("strong",null,"输入：")],-1),s("p",null,[l("一个列表 "),s("code",null,"stones"),l("，包含区域的石头编号；一个整数 "),s("code",null,"treasure_stone"),l(" 表示宝藏石的编号。")],-1),s("p",null,[s("strong",null,"输出：")],-1),s("p",null,"找到宝藏石编号的位置，或者输出“未找到”。",-1),s("p",null,[s("strong",null,"示例：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"stones "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"14"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"52"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"89"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"33"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"71"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"26"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"treasure_stone "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 71")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"期望输出：")],-1),s("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"宝藏石位于区域 4")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1),s("p",null,[s("mark",null,[s("strong",null,"Solution:")])],-1),s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," treasure_searching"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"stones"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"treasure_stone"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    index_ "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," treasure_stone "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," stones:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(stones)):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," stones[i] "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," treasure_stone:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                index_.append(i)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," index_")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"treasure "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," treasure_searching("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"stones"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"["),s("span",{style:{color:"#AE81FF"}},"14"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"52"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"89"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"33"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"71"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"26"),s("span",{style:{color:"#F8F8F2"}},"], "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"treasure_stone"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"71"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," print_treasure"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"treasure"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(treasure)):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," treasure[i]")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'宝藏石位于区域"),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"print_treasure(treasure)"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,null,-1)])),tab1:a(({value:e,isActive:o})=>n[3]||(n[3]=[s("p",null,"一个机器人在迷宫中迷路了，迷宫由一系列格子组成。格子用一个列表表示，每个格子可以是空的（用0表示）或有障碍物（用1表示）。机器人需要从起点找到终点，并穿越最短的无障碍路径。你的任务是通过线性查找找到连续的、没有障碍物的最长路径，并返回该路径的起始和结束索引。",-1),s("p",null,[s("strong",null,"要求：")],-1),s("ol",null,[s("li",null,"使用线性查找算法找到迷宫中最长的连续无障碍路径。"),s("li",null,"返回最长路径的起始索引和结束索引。")],-1),s("p",null,[s("strong",null,"输入：")],-1),s("p",null,[l("一个列表 "),s("code",null,"maze"),l("，由 0 和 1 组成，0 代表空格，1 代表障碍物。")],-1),s("p",null,[s("strong",null,"输出：")],-1),s("p",null,"返回最长连续无障碍路径的起始和结束索引。",-1),s("p",null,[s("strong",null,"示例：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"maze "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"期望输出：")],-1),s("div",{class:"language- line-numbers-mode","data-highlighter":"shiki","data-ext":"",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",null,"最长无障碍路径的起点为 4，终点为 6")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1),s("p",null,[s("mark",null,[s("strong",null,"Solution:")])],-1),s("p",null,"代码修改前：",-1),s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," treasure_searching"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"maze"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"blank"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    consistant_i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    count_i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(maze)):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," maze[i] "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," blank:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            consistant_i.append(i)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(consistant_i) "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                count_i.append(consistant_i.copy())")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                consistant_i.clear()")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    max_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," count_i["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," lst "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," count_i:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(lst) "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(max_lst):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            max_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," lst")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," max_lst")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"max_len_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," treasure_searching(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"], "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'最长无障碍路径的起点为 "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"max_len_lst["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},"，终点为 "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"max_len_lst["),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},"]"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# output")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"最长无障碍路径的起点为 "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},"，终点为 "),s("span",{style:{color:"#AE81FF"}},"6")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,"代码修改后：",-1),s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," treasure_searching"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"maze"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"blank"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    consistant_i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []   "),s("span",{style:{color:"#88846F"}},"# 用于存储值为0时的列表下标")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    count_i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []  "),s("span",{style:{color:"#88846F"}},"# 用于存储所有值为0，且连续出现的下标的列表（存储子列表）           ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(maze)):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," maze[i] "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," blank:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            consistant_i.append(i)  ")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(consistant_i) "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":  "),s("span",{style:{color:"#88846F"}},"# 空数组不会被存入")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                count_i.append(consistant_i.copy()) "),s("span",{style:{color:"#88846F"}},"# 拷贝数组然后存入，不可以直接存入。")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                consistant_i.clear()  "),s("span",{style:{color:"#88846F"}},"# 清空数组，进行新一轮的存储。")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(consistant_i) "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        count_i.append(consistant_i.copy())")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        consistant_i.clear()")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    max_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," count_i["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]     "),s("span",{style:{color:"#88846F"}},"# 找到存储在count_i中长度最大的数组，就是最长连续无障碍路径的包含所有下标的数组")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," lst "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," count_i:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(lst) "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(max_lst):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            max_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," lst")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," max_lst")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"max_len_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," treasure_searching(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"], "),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'最长无障碍路径的起点为 "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"max_len_lst["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},"，终点为 "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"max_len_lst["),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},"]"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# output ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"最长无障碍路径的起点为 "),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},"，终点为 "),s("span",{style:{color:"#AE81FF"}},"12")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"相关信息"),s("ul",null,[s("li",null,[s("p",null,"为什么要添加12-14行？"),s("p",null,[l("答：当我们的 maze 以 0 结尾时，代码的结果就错了。原代码里，我们是根据"),s("mark",null,"是否出现 1"),l("来判断我们是否要把 "),s("code",null,"consistant_i"),l(" 存进 "),s("code",null,"count_i"),l(" 中，再把 "),s("code",null,"consistant_i"),l(" 清空的，但是当"),s("strong",null,"我们最后一个数不为 1 时，最后几个 0 就无法存进"),l("。")])]),s("li",null,[s("p",null,"这么修改的逻辑？"),s("p",null,[l("答：加上了一个条件判断，当运行遍历到 maze 里最后一个元素时（假设为 0，如测试例子所示），这时 "),s("code",null,"consistant_i"),l("里的值没被存入也没被清空，显然 "),s("code",null,"len(consistant_i)>0"),l("，**满足条件判断，进入13-14的条件判断的代码。**这样就能顺利存入最后几个 0 了。")])])])],-1)])),_:1}),n[5]||(n[5]=F(`<p>:::</p><h2 id="_2-二分查找" tabindex="-1"><a class="header-anchor" href="#_2-二分查找"><span>2. 二分查找</span></a></h2><h3 id="_2-1-基本信息" tabindex="-1"><a class="header-anchor" href="#_2-1-基本信息"><span>2.1 基本信息</span></a></h3><p>二分查找（Binary searching) 是一种基于分治策略的算法。它利用数据的有序性，每轮缩小一半搜索范围。直至找到目标元素或搜索区间为空为止。</p><h3 id="_2-2-完整代码" tabindex="-1"><a class="header-anchor" href="#_2-2-完整代码"><span>2.2 完整代码</span></a></h3><ul><li><p>Question：</p><p>给一个长度为 n 的数组 <code>nums</code> ，元素按从小到大排列且不重复。请查找并返回元素 target 在该数组中的索引。若数组不包含该元素，则返回 -1</p></li><li><p>Solution：</p><ol><li>先初始化指针 <code>i = 0</code>和 <code>j = n-1</code>，分别指向数组的首元素和尾元素。代表搜索区间 <code>[0, n-1]</code>。</li></ol><p>接下来循环执行：</p><ol><li><p>计算中点索引 <code>m = (i+j)/2</code> （向下取整）</p></li><li><p>判断 <code>nums[m]</code> 与 <code>target</code> 的大小关系。</p></li></ol><ul><li>当 <code> nums[m] &lt; target</code> 时，说明 target 在哪个区间？</li><li>当 <code>nums[m] &gt; target</code>时，说明 target 在哪个区间</li></ul></li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> binary_searching</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    j </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(nums) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        m </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> j) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> nums[m] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> m</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> nums[m] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(binary_searching([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">23</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">26</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">31</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">36</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">28</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-插值搜索" tabindex="-1"><a class="header-anchor" href="#_3-插值搜索"><span>3. 插值搜索</span></a></h2><p>给定一个长度为 n 的有序数组 nums 和一个元素 target ，数组不存在重复元素。现将 target 插入数组 nums 中，并保持其有序性。若数组中已存在元素 target ，则插入到其左方。请返回插入后 target 在数组中的索引。</p><p><strong>与二分查找逻辑非常相似。</strong></p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> binary_searching</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    j </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(nums) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        m </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> j) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> nums[m] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F8F8F2;">            nums.insert(m, target)</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> nums</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> nums[m] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(binary_searching([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">23</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">26</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">31</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">36</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_4-堆排序" tabindex="-1"><a class="header-anchor" href="#_4-堆排序"><span>4.堆排序</span></a></h2><h3 id="_4-1-基本信息" tabindex="-1"><a class="header-anchor" href="#_4-1-基本信息"><span>4.1 基本信息</span></a></h3><p>堆 (heap) 是一种满足特定条件的完全二叉树，主要可以分为两种类型。</p><ul><li>小顶堆：任意节点的值 &lt;= 其子节点的值</li><li>大顶堆：任意节点的值 &gt;= 其子节点的值</li></ul><figure><img src="`+d+'" alt="大顶堆和小顶堆-java根结点（亦称为堆顶）的关键字是堆里所有结 ..." tabindex="0" loading="lazy"><figcaption>大顶堆和小顶堆-java根结点（亦称为堆顶）的关键字是堆里所有结 ...</figcaption></figure><p>堆作为完全二叉树的一个特殊情况，具有以下特性：</p><ul><li><p>最底层节点靠左填充，其他层节点都被填满。</p></li><li><p>我们将根结点称为“堆顶”，将底层最靠右节点称为“堆底”。</p></li><li><p>从堆顶到堆底放入列表，从 1 号位开始依次放入（不是 0 号位），所以在实际操作中，我们可以</p><ol><li><p>随便拿一个数充当 0 号位</p></li><li><p>每次计算位次时 + 1</p></li></ol></li></ul><h3 id="_4-2-排序原理" tabindex="-1"><a class="header-anchor" href="#_4-2-排序原理"><span>4.2 排序原理</span></a></h3><p>设数组的长度为n:</p><ol><li><p>输入数组并建立大顶堆，完成后，最大元素位于堆顶。</p></li><li><p>将堆顶元素（第一个元素）与堆底元素（最后一个元素）交换。完成交换后，堆的长度减1，已排序元素的数量加1。</p></li><li><p>从堆顶元素开始，从顶到底执行堆化操作（sift down）</p><p>3.1 堆化：在计算机科学中用于将一颗二叉树调整为堆的操作。堆是一种特殊的二叉树结构，分为最大堆和最小堆。</p><p>3.2 堆化的作用是确保二叉树满足堆的性质。具体来说，它从树的某个节点开始，比较该节点与其子节点的值，并根据需要交换位置，直到整个数满足堆结构。</p></li></ol>',21))])}const h=c(u,[["render",m]]),A=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week03.html","title":"高级算法——第3周ppt——搜索算法和堆","lang":"zh-CN","frontmatter":{"title":"高级算法——第3周ppt——搜索算法和堆","icon":"python","date":"2024-09-21T21:13:31.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1726939468000,"updatedTime":1730813769000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":5,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":7.01,"words":2102},"filePathRelative":"zh/Advanced_Algorithms/Week03.md","localizedDate":"2024年9月21日"}');export{h as comp,A as data};

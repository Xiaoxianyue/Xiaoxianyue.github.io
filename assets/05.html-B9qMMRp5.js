import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as e,b as t}from"./app-DJDEqzL5.js";const s="/assets/image-20240522135708580-BbZ3MsQQ.png",l="/assets/image-20240522141335248-ZwFTi3-H.png",n="/assets/image-20240522141628815-Dc509Qgk.png",o="/assets/image-20240522141740079-BHtkT4Va.png",r="/assets/image-20240522143249513-C2ffrRS7.png",g="/assets/image-20240522143447209-CPUMiRsr.png",p="/assets/image-20240522144125827-CeuIHmi7.png",c="/assets/image-20240522144451563-DXql4kgi.png",m="/assets/image-20240522144647883-q7Lgxp8s.png",d="/assets/image-20240522164932916-XpJS_egf.png",_="/assets/image-20240522165712211-Ce4fTo6z.png",h="/assets/image-20240522170731600-Bcc7mKRj.png",f="/assets/image-20240522171420514-DvMx7T8J.png",u="/assets/image-20240522171853628-CSSItMfv.png",b="/assets/image-20240522173351774-D7jqZNpd.png",y="/assets/image-20240522175007111-DoOc63nf.png",x="/assets/image-20240522175509626-DhiVDiCF.png",k="/assets/image-20240522175558636-BW1RWPMF.png",z="/assets/image-20240522175606176-ChvWF3rf.png",v="/assets/image-20240522180023266-COiJ7iqq.png",D="/assets/image-20240522181215976-U6mJf-Hh.png",S="/assets/image-20240522205558980-DbaVjKmY.png",B="/assets/image-20240522205907030-B-F5CXi7.png",T="/assets/image-20240522212445598-lCzRpcQY.png",q="/assets/image-20240522221229805-Cj3YfukG.png",C="/assets/image-20240522221710764-Cg0UU4q3.png",F="/assets/image-20240522222350421-CGv_bQOE.png",j="/assets/image-20240522223852829-CAWroJRw.png",V="/assets/image-20240522224712119-ByNF9kdB.png",E="/assets/image-20240522230552480-B-IWm5x4.png",O="/assets/image-20240522231750187-MSj6M2hL.png",M="/assets/image-20240522231903750-CB4WEnpm.png",X="/assets/image-20240522232650336-Do-gd6aY.png",Z="/assets/image-20240522232800523-BWJHgV_L.png",Y="/assets/image-20240523004757810-BQ2BFqyj.png",J="/assets/image-20240523012855303-Ynv0eE2K.png",R={},W=t('<h2 id="_1-图的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-图的基本概念"><span>1. 图的基本概念</span></a></h2><h3 id="_1-1-图的定义" tabindex="-1"><a class="header-anchor" href="#_1-1-图的定义"><span>1.1 图的定义</span></a></h3><p><code>G=(V,E)</code></p><p>V：顶点（数据元素）的有穷非空集合</p><p>E：边的有穷集合</p><figure><img src="'+s+'" alt="image-20240522135708580" tabindex="0" loading="lazy"><figcaption>image-20240522135708580</figcaption></figure><h3 id="_1-2-图的基本术语" tabindex="-1"><a class="header-anchor" href="#_1-2-图的基本术语"><span>1.2 图的基本术语</span></a></h3><ol><li>无向图中：端点和邻接点</li></ol><p>​ 有向图中：起始端点和终止端点；出边邻接点和入边邻接点</p><ol start="2"><li>顶点的度，出度和入度</li></ol><p>​ 一个顶点所关联的边的数目称为顶点的度。有向图里分出度和入度。</p><blockquote><p>如果一个图中有n个顶点和e条边,每个顶点的度为di(0&lt;=i&lt;=n-1),则有:</p></blockquote><figure><img src="'+l+'" alt="image-20240522141335248" tabindex="0" loading="lazy"><figcaption>image-20240522141335248</figcaption></figure><blockquote><p>也就是说一个图中所有顶点的度之和等于边数的两倍.</p></blockquote><ol start="3"><li>完全图</li></ol><p>无向图每个顶点之间都存在这一条边;有向图每个顶点之间都存在着双向边.</p><img src="'+n+'" alt="image-20240522141628815" style="zoom:50%;"><ol start="4"><li>稠密图和稀疏图</li></ol><p>字面意思</p><ol start="5"><li>子图</li></ol><figure><img src="'+o+'" alt="image-20240522141740079" tabindex="0" loading="lazy"><figcaption>image-20240522141740079</figcaption></figure><ol start="6"><li>路径和路径长度,简单路径</li><li>回路和环</li></ol><p>开始点和结束点是同一个顶点</p><ol start="8"><li>连通,连通图和连通分量</li></ol><img src="'+r+'" alt="image-20240522143249513" style="zoom:67%;"><ol start="9"><li>强连通图和强连通分量</li></ol><img src="'+g+'" alt="image-20240522143447209" style="zoom:67%;"><blockquote><p>怎么把非强连通图的强连通分量找出来?</p></blockquote><img src="'+p+'" alt="image-20240522144125827" style="zoom:50%;"><ol start="10"><li>权和网</li></ol><figure><img src="'+c+'" alt="image-20240522144451563" tabindex="0" loading="lazy"><figcaption>image-20240522144451563</figcaption></figure><figure><img src="'+m+'" alt="image-20240522144647883" tabindex="0" loading="lazy"><figcaption>image-20240522144647883</figcaption></figure><h2 id="_2-图的存储结构和基本运算算法" tabindex="-1"><a class="header-anchor" href="#_2-图的存储结构和基本运算算法"><span>2. 图的存储结构和基本运算算法</span></a></h2><h3 id="_2-1-邻接矩阵存储方法" tabindex="-1"><a class="header-anchor" href="#_2-1-邻接矩阵存储方法"><span>2.1 邻接矩阵存储方法</span></a></h3><figure><img src="'+d+'" alt="image-20240522164932916" tabindex="0" loading="lazy"><figcaption>image-20240522164932916</figcaption></figure><h4 id="_2-1-1-无向图的邻接矩阵" tabindex="-1"><a class="header-anchor" href="#_2-1-1-无向图的邻接矩阵"><span>2.1.1 无向图的邻接矩阵:</span></a></h4><figure><img src="'+_+'" alt="image-20240522165712211" tabindex="0" loading="lazy"><figcaption>image-20240522165712211</figcaption></figure><blockquote><p><strong>在完全无向图的邻接矩阵中,除了对角线上的元素都是0,其他都是1</strong></p></blockquote><h4 id="_2-1-2-有向图的邻接矩阵" tabindex="-1"><a class="header-anchor" href="#_2-1-2-有向图的邻接矩阵"><span>2.1.2 有向图的邻接矩阵：</span></a></h4><figure><img src="'+h+'" alt="image-20240522170731600" tabindex="0" loading="lazy"><figcaption>image-20240522170731600</figcaption></figure><p>在行处有1的就是该结点发出的箭头（出度边）；在列处有1就是该结点收到的箭头（入度边）。</p><img src="'+f+'" alt="image-20240522171420514" style="zoom:67%;"><h4 id="_2-1-3-网的邻接矩阵" tabindex="-1"><a class="header-anchor" href="#_2-1-3-网的邻接矩阵"><span>2.1.3 网的邻接矩阵</span></a></h4><figure><img src="'+u+'" alt="image-20240522171853628" tabindex="0" loading="lazy"><figcaption>image-20240522171853628</figcaption></figure><h4 id="_2-1-4-邻接矩阵的建立" tabindex="-1"><a class="header-anchor" href="#_2-1-4-邻接矩阵的建立"><span>2.1.4 邻接矩阵的建立</span></a></h4><img src="'+b+'" alt="image-20240522173351774" style="zoom:67%;"><p>邻接矩阵适合存放稠密图。</p><p>图的邻接矩阵是唯一的。</p><p>邻接矩阵的空间复杂度是O(n^2)</p><h3 id="_2-2-邻接表" tabindex="-1"><a class="header-anchor" href="#_2-2-邻接表"><span>2.2 邻接表</span></a></h3><h4 id="_2-2-1-无向图的邻接表" tabindex="-1"><a class="header-anchor" href="#_2-2-1-无向图的邻接表"><span>2.2.1 无向图的邻接表</span></a></h4><img src="'+y+'" alt="image-20240522175007111" style="zoom:67%;"><h4 id="_2-2-2-有向图" tabindex="-1"><a class="header-anchor" href="#_2-2-2-有向图"><span>2.2.2 有向图</span></a></h4><img src="'+x+'" alt="image-20240522175509626" style="zoom:80%;"><p>也有逆邻接表</p><img src="'+k+'" alt="image-20240522175558636" style="zoom:67%;"><img src="'+z+'" alt="image-20240522175606176" style="zoom:67%;"><p>练习：</p><figure><img src="'+v+'" alt="image-20240522180023266" tabindex="0" loading="lazy"><figcaption>image-20240522180023266</figcaption></figure><h4 id="_2-2-3-特点" tabindex="-1"><a class="header-anchor" href="#_2-2-3-特点"><span>2.2.3 特点</span></a></h4><figure><img src="'+D+'" alt="image-20240522181215976" tabindex="0" loading="lazy"><figcaption>image-20240522181215976</figcaption></figure><p>邻接表适合于稀疏图。</p><p>邻接表不唯一</p><p>邻接表·的空间复杂度O(n+e)</p><h2 id="_3-图的遍历" tabindex="-1"><a class="header-anchor" href="#_3-图的遍历"><span>3.图的遍历</span></a></h2><p>设置辅助数组：</p><figure><img src="'+S+'" alt="image-20240522205558980" tabindex="0" loading="lazy"><figcaption>image-20240522205558980</figcaption></figure><h3 id="_3-1-深度优先搜索-dfs" tabindex="-1"><a class="header-anchor" href="#_3-1-深度优先搜索-dfs"><span>3.1 深度优先搜索(DFS)</span></a></h3><h4 id="_3-1-1-连通图" tabindex="-1"><a class="header-anchor" href="#_3-1-1-连通图"><span>3.1.1 连通图</span></a></h4><p>“一条路走到黑”：</p><img src="'+B+'" alt="image-20240522205907030" style="zoom:50%;"><p>下面例题，自己再做一遍：</p><figure><img src="'+T+'" alt="image-20240522212445598" tabindex="0" loading="lazy"><figcaption>image-20240522212445598</figcaption></figure><p>遍历图中每一个顶点都要从头扫描该顶点所在行，时间复杂度为O(n^2)。</p><p>但是在邻接表中，时间复杂度为O(n+e)，n是头节点数目，e是图中边数。</p><h4 id="_3-1-2-非连通图" tabindex="-1"><a class="header-anchor" href="#_3-1-2-非连通图"><span>3.1.2 非连通图</span></a></h4><p>是一样的</p><p>遍历完一个连通分量就遍历另一个。</p><img src="'+q+'" alt="image-20240522221229805" style="zoom:50%;"><h3 id="_3-2-广度优先搜索-bfs" tabindex="-1"><a class="header-anchor" href="#_3-2-广度优先搜索-bfs"><span>3.2 广度优先搜索（BFS）</span></a></h3><ol><li>连通图</li></ol><figure><img src="'+C+'" alt="image-20240522221710764" tabindex="0" loading="lazy"><figcaption>image-20240522221710764</figcaption></figure><ol start="2"><li>非连通图</li></ol><p>是一样的 分别访问连通分量。</p><h4 id="_3-2-1-算法实现" tabindex="-1"><a class="header-anchor" href="#_3-2-1-算法实现"><span>3.2.1 算法实现</span></a></h4><figure><img src="'+F+'" alt="image-20240522222350421" tabindex="0" loading="lazy"><figcaption>image-20240522222350421</figcaption></figure><h4 id="_3-2-2-效率分析" tabindex="-1"><a class="header-anchor" href="#_3-2-2-效率分析"><span>3.2.2 效率分析</span></a></h4><p>使用邻接矩阵，O(n^2)</p><p>使用邻接表，O(n+e）</p><h5 id="_3-2-2-1-dfs和bfs的算法效率比较" tabindex="-1"><a class="header-anchor" href="#_3-2-2-1-dfs和bfs的算法效率比较"><span>3.2.2.1 DFS和BFS的算法效率比较</span></a></h5><p>空间复杂度相同，都是O(n)（借用了堆栈或者队列）</p><p>时间效率见上文。都是一样。</p><h2 id="_4-图的应用" tabindex="-1"><a class="header-anchor" href="#_4-图的应用"><span>4. 图的应用</span></a></h2><h3 id="_4-1-最小生成树" tabindex="-1"><a class="header-anchor" href="#_4-1-最小生成树"><span>4.1 最小生成树</span></a></h3><h4 id="_4-1-1-生成树" tabindex="-1"><a class="header-anchor" href="#_4-1-1-生成树"><span>4.1.1 生成树</span></a></h4><img src="'+j+'" alt="image-20240522223852829" style="zoom:67%;"><p>特点</p><ul><li><p>生成树的顶点个数与图的顶点个数相同</p></li><li><p>生成树是图的极小连通子图，去掉一条边则非连通。</p></li><li><p>n个顶点的生成树有n-1条边</p></li><li><p>在生成树中再加一条边必然形成回路。（生成树不能有回路）</p></li><li><p>任意两个顶点之间的路径是唯一的</p></li></ul><h4 id="_4-1-2-最小生成树-mst" tabindex="-1"><a class="header-anchor" href="#_4-1-2-最小生成树-mst"><span>4.1.2 最小生成树（MST）</span></a></h4><img src="'+V+'" alt="image-20240522224712119" style="zoom:80%;"><h4 id="_4-1-3-如何构造最小生成树" tabindex="-1"><a class="header-anchor" href="#_4-1-3-如何构造最小生成树"><span>4.1.3 如何构造最小生成树</span></a></h4><p>MST性质解释：</p><figure><img src="'+E+'" alt="image-20240522230552480" tabindex="0" loading="lazy"><figcaption>image-20240522230552480</figcaption></figure><ol><li><p>普里姆算法</p></li><li><p>克鲁斯卡尔算法（出来的生成树有可能不唯一）</p></li></ol><figure><img src="'+O+'" alt="image-20240522231750187" tabindex="0" loading="lazy"><figcaption>image-20240522231750187</figcaption></figure><p>对比：<img src="'+M+'" alt="image-20240522231903750" loading="lazy"></p><h3 id="_4-2-最短路径问题" tabindex="-1"><a class="header-anchor" href="#_4-2-最短路径问题"><span>4.2 最短路径问题</span></a></h3><p>在有向网中A点（源点）到达B点（终点）的多条路径中，寻找一条各边权值之和最小的路径，即最短路径。与最小生成树不同，路径上不一定包含n个顶点，也不一定包含n-1条边。</p><img src="'+X+'" alt="image-20240522232650336" style="zoom:67%;"><figure><img src="'+Z+'" alt="image-20240522232800523" tabindex="0" loading="lazy"><figcaption>image-20240522232800523</figcaption></figure><h4 id="_4-2-1-dijkstra算法-求解单源最短路径" tabindex="-1"><a class="header-anchor" href="#_4-2-1-dijkstra算法-求解单源最短路径"><span>4.2.1 Dijkstra算法（求解单源最短路径）</span></a></h4><figure><img src="'+Y+'" alt="image-20240523004757810" tabindex="0" loading="lazy"><figcaption>image-20240523004757810</figcaption></figure><h4 id="_4-2-2-floyd-弗洛伊德-算法-所有顶点间得最短路径" tabindex="-1"><a class="header-anchor" href="#_4-2-2-floyd-弗洛伊德-算法-所有顶点间得最短路径"><span>4.2.2 Floyd（弗洛伊德）算法（所有顶点间得最短路径）</span></a></h4><figure><img src="'+J+'" alt="image-20240523012855303" tabindex="0" loading="lazy"><figcaption>image-20240523012855303</figcaption></figure>',114),G=[W];function N(Q,H){return e(),i("div",null,G)}const I=a(R,[["render",N],["__file","05.html.vue"]]),L=JSON.parse('{"path":"/zh/Data_Structure/05.html","title":"图","lang":"zh-CN","frontmatter":{"title":"图","icon":"c","date":"2024-05-22T13:51:05.000Z","author":"XiaoXianYue","isOriginal":true,"category":["数据结构","大二下"],"tag":["数据结构","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 图的基本概念 1.1 图的定义 G=(V,E) V：顶点（数据元素）的有穷非空集合 E：边的有穷集合 image-20240522135708580image-20240522135708580 1.2 图的基本术语 无向图中：端点和邻接点 ​ 有向图中：起始端点和终止端点；出边邻接点和入边邻接点 顶点的度，出度和入度 ​ 一个顶点所关联的边的数...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Data_Structure/05.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"图"}],["meta",{"property":"og:description","content":"1. 图的基本概念 1.1 图的定义 G=(V,E) V：顶点（数据元素）的有穷非空集合 E：边的有穷集合 image-20240522135708580image-20240522135708580 1.2 图的基本术语 无向图中：端点和邻接点 ​ 有向图中：起始端点和终止端点；出边邻接点和入边邻接点 顶点的度，出度和入度 ​ 一个顶点所关联的边的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T02:01:44.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-22T13:51:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T02:01:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-22T13:51:05.000Z\\",\\"dateModified\\":\\"2024-05-30T02:01:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 图的基本概念","slug":"_1-图的基本概念","link":"#_1-图的基本概念","children":[{"level":3,"title":"1.1 图的定义","slug":"_1-1-图的定义","link":"#_1-1-图的定义","children":[]},{"level":3,"title":"1.2 图的基本术语","slug":"_1-2-图的基本术语","link":"#_1-2-图的基本术语","children":[]}]},{"level":2,"title":"2. 图的存储结构和基本运算算法","slug":"_2-图的存储结构和基本运算算法","link":"#_2-图的存储结构和基本运算算法","children":[{"level":3,"title":"2.1 邻接矩阵存储方法","slug":"_2-1-邻接矩阵存储方法","link":"#_2-1-邻接矩阵存储方法","children":[{"level":4,"title":"2.1.1 无向图的邻接矩阵:","slug":"_2-1-1-无向图的邻接矩阵","link":"#_2-1-1-无向图的邻接矩阵","children":[]},{"level":4,"title":"2.1.2 有向图的邻接矩阵：","slug":"_2-1-2-有向图的邻接矩阵","link":"#_2-1-2-有向图的邻接矩阵","children":[]},{"level":4,"title":"2.1.3 网的邻接矩阵","slug":"_2-1-3-网的邻接矩阵","link":"#_2-1-3-网的邻接矩阵","children":[]},{"level":4,"title":"2.1.4 邻接矩阵的建立","slug":"_2-1-4-邻接矩阵的建立","link":"#_2-1-4-邻接矩阵的建立","children":[]}]},{"level":3,"title":"2.2 邻接表","slug":"_2-2-邻接表","link":"#_2-2-邻接表","children":[{"level":4,"title":"2.2.1 无向图的邻接表","slug":"_2-2-1-无向图的邻接表","link":"#_2-2-1-无向图的邻接表","children":[]},{"level":4,"title":"2.2.2 有向图","slug":"_2-2-2-有向图","link":"#_2-2-2-有向图","children":[]},{"level":4,"title":"2.2.3 特点","slug":"_2-2-3-特点","link":"#_2-2-3-特点","children":[]}]}]},{"level":2,"title":"3.图的遍历","slug":"_3-图的遍历","link":"#_3-图的遍历","children":[{"level":3,"title":"3.1 深度优先搜索(DFS)","slug":"_3-1-深度优先搜索-dfs","link":"#_3-1-深度优先搜索-dfs","children":[{"level":4,"title":"3.1.1 连通图","slug":"_3-1-1-连通图","link":"#_3-1-1-连通图","children":[]},{"level":4,"title":"3.1.2 非连通图","slug":"_3-1-2-非连通图","link":"#_3-1-2-非连通图","children":[]}]},{"level":3,"title":"3.2 广度优先搜索（BFS）","slug":"_3-2-广度优先搜索-bfs","link":"#_3-2-广度优先搜索-bfs","children":[{"level":4,"title":"3.2.1 算法实现","slug":"_3-2-1-算法实现","link":"#_3-2-1-算法实现","children":[]},{"level":4,"title":"3.2.2 效率分析","slug":"_3-2-2-效率分析","link":"#_3-2-2-效率分析","children":[{"level":5,"title":"3.2.2.1 DFS和BFS的算法效率比较","slug":"_3-2-2-1-dfs和bfs的算法效率比较","link":"#_3-2-2-1-dfs和bfs的算法效率比较","children":[]}]}]}]},{"level":2,"title":"4. 图的应用","slug":"_4-图的应用","link":"#_4-图的应用","children":[{"level":3,"title":"4.1 最小生成树","slug":"_4-1-最小生成树","link":"#_4-1-最小生成树","children":[{"level":4,"title":"4.1.1 生成树","slug":"_4-1-1-生成树","link":"#_4-1-1-生成树","children":[]},{"level":4,"title":"4.1.2 最小生成树（MST）","slug":"_4-1-2-最小生成树-mst","link":"#_4-1-2-最小生成树-mst","children":[]},{"level":4,"title":"4.1.3 如何构造最小生成树","slug":"_4-1-3-如何构造最小生成树","link":"#_4-1-3-如何构造最小生成树","children":[]}]},{"level":3,"title":"4.2 最短路径问题","slug":"_4-2-最短路径问题","link":"#_4-2-最短路径问题","children":[{"level":4,"title":"4.2.1 Dijkstra算法（求解单源最短路径）","slug":"_4-2-1-dijkstra算法-求解单源最短路径","link":"#_4-2-1-dijkstra算法-求解单源最短路径","children":[]},{"level":4,"title":"4.2.2 Floyd（弗洛伊德）算法（所有顶点间得最短路径）","slug":"_4-2-2-floyd-弗洛伊德-算法-所有顶点间得最短路径","link":"#_4-2-2-floyd-弗洛伊德-算法-所有顶点间得最短路径","children":[]}]}]}],"git":{"createdTime":1716449889000,"updatedTime":1717034504000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":3}]},"readingTime":{"minutes":4.31,"words":1294},"filePathRelative":"zh/Data_Structure/05.md","localizedDate":"2024年5月22日","excerpt":"<h2>1. 图的基本概念</h2>\\n<h3>1.1 图的定义</h3>\\n<p><code>G=(V,E)</code></p>\\n<p>V：顶点（数据元素）的有穷非空集合</p>\\n<p>E：边的有穷集合</p>\\n<figure><figcaption>image-20240522135708580</figcaption></figure>\\n<h3>1.2 图的基本术语</h3>\\n<ol>\\n<li>无向图中：端点和邻接点</li>\\n</ol>\\n<p>​        有向图中：起始端点和终止端点；出边邻接点和入边邻接点</p>\\n<ol start=\\"2\\">\\n<li>顶点的度，出度和入度</li>\\n</ol>","autoDesc":true}');export{I as comp,L as data};

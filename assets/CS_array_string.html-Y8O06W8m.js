import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-CyYnWa3R.js";const t="/assets/9ded97eec60bb3c601418f1044a4c7f-BnSBIZLW.png",e="/assets/6b542c2798f6a49c68603d215aaa337-CCHl9j-C.png",c={},o=p(`<h2 id="_1-数组" tabindex="-1"><a class="header-anchor" href="#_1-数组"><span>1. 数组</span></a></h2><h3 id="_1-1-数组" tabindex="-1"><a class="header-anchor" href="#_1-1-数组"><span>1.1 数组</span></a></h3><p>C# 提供了许多内置的类来存储和操作数据。</p><p>数组(Array)就是其中的一种。</p><p>数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。</p><p>例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。</p><p>数组的声明格式如下：<code>数字类型[] 数组名称</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> myArray<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个语句声明了一个整型数组。由于数组是对象，我们需要用 new 关键字来实例化它们：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例化一个名为 myArray 的数组，其中 5 为数组的长度，可以存放 5 个整型的数值。</p><p>【填空题】实例化一个能存放 42 个 double 类型数值的数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">_double__ <span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> __new_ <span class="token keyword">double</span><span class="token punctuation">[</span>_42__<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>double ; new ; 42</p></blockquote><h3 id="_1-2-数组的索引" tabindex="-1"><a class="header-anchor" href="#_1-2-数组的索引"><span>1.2 数组的索引</span></a></h3><p>创建数组后，您可以使用索引的方式将值分配给数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这会将 23 分配给数组的第一个元素。</p><blockquote><p>C# 中数组的索引是从 0 开始的,即数组的第一个值索引号为 0，第二个值的索引号为 1，依此类推。</p></blockquote><p>【填空题】数组第三个值的索引号是？「2」</p><h3 id="_1-3-数组的初始值" tabindex="-1"><a class="header-anchor" href="#_1-3-数组的初始值"><span>1.3 数组的初始值</span></a></h3><p>使用大括号声明时，我们可以向数组提供初始值，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jessica&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">double</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">5.9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但其实，在有设置初始值的数值时，我们可以省略数组的大小，上面的数组定义，也可以写成：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jessica&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">5.9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至，可以省略实例化的关键字：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jessica&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> prices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">5.9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>【填空题】实例化一个带初始值的数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> __<span class="token punctuation">{</span>_ <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> _<span class="token punctuation">}</span>__<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>int[ ] a = {1, 2, 3} ;</p></blockquote><h3 id="_1-4-通过索引访问数组" tabindex="-1"><a class="header-anchor" href="#_1-4-通过索引访问数组"><span>1.4 通过索引访问数组</span></a></h3><p>之前我们有提到过，数组中的每个元素都有一个索引号。</p><p>例如，我们来一下下面的数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组 b 有如下索引：</p><figure><img src="`+t+`" alt="9ded97eec60bb3c601418f1044a4c7f" tabindex="0" loading="lazy"><figcaption>9ded97eec60bb3c601418f1044a4c7f</figcaption></figure><p>所以，当我们要访问 b 数组中的某个元素时，只要通过数组的索引号就能获取某个元素：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出62</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出70</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是，C# 的数组索引号是从 <strong>0</strong> 开始的。</p><p>【填空题】执行以下代码后 x 的值是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//x = 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-数组的遍历" tabindex="-1"><a class="header-anchor" href="#_2-数组的遍历"><span>2. 数组的遍历</span></a></h2><h3 id="_2-1-数组的遍历" tabindex="-1"><a class="header-anchor" href="#_2-1-数组的遍历"><span>2.1 数组的遍历</span></a></h3><p>有时候,我们会需要对数组进行遍历，为数组赋值。使用循环，可以很方便的对数组进行遍历。</p><p>例如，可以声明一个由 10 个整数组成的数组，并用下面的循环为每个元素赋一个偶数值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用循环来读取数组的值。</p><p>例如，我们可以显示刚刚创建的数组的内容：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 k 用于访问每个数组元素。数组中的最后一个索引是 9，所以 fo r循环条件是 <code>k &lt;10</code> 。</p><p>【填空题】使用 for 循环打印数组全部元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">__for_</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span> __7_<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>__arr_<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>for ； 7 ；arr</p></blockquote><p>题目·：编写一个 C# 程序，使用 for 循环遍历一个整数数组并计算该数组的所有元素的总和。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>int[] numbers = { 1, 2, 3, 4, 5 };
int total = 0;
for (int i = 0;i &lt; 5; i++)
{
    
    total+= numbers[i];   
}
Console.WriteLine(total);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-foreach-遍历" tabindex="-1"><a class="header-anchor" href="#_2-2-foreach-遍历"><span>2.2 foreach 遍历</span></a></h3><p>foreach 循环提供了一种更简单的方法来对数组进行遍历。</p><p>例如前面数组我们也可以使用 foreach 循环来遍历：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>foreach 循环遍历数组 a,并在循环的每次迭代中将当前元素的值赋给变量 k。因此，在第一次迭代中，<code>k = a [0]</code>，第二次 <code>k = a [1]</code>，以此类推。</p><blockquote><p>foreach 循环中，变量的数据类型应该匹配数组的类型。</p><p>关键字 var 也经常用作变量的类型，如：<code>foreach(var k in a)</code>。关于 var 关键词，我们会在后面的章节中进行阐述。</p></blockquote><p>【填空题】创建一个有效的 foreach 循环，显示数组中所有的偶数元素。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">_foreach__</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token class-name">__in_</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>__n_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>foreach in n</p></blockquote><h3 id="_2-3-实践-使用循环计算数组总和" tabindex="-1"><a class="header-anchor" href="#_2-3-实践-使用循环计算数组总和"><span>2.3 实践：使用循环计算数组总和</span></a></h3><p>下面，让我们使用 foreach 循环来计算数组中所有元素的总和：</p><p>int[ ] arr = {11, 35, 62, 555, 989};</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>int[] arr = { 11, 35, 62, 555, 989 };
int total = 0;
foreach (int i in arr)
{
    total += i;
}
Console.WriteLine(total);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-多维数组" tabindex="-1"><a class="header-anchor" href="#_3-多维数组"><span>3. 多维数组</span></a></h2><h3 id="_3-1-多维数组" tabindex="-1"><a class="header-anchor" href="#_3-1-多维数组"><span>3.1 多维数组</span></a></h3><p>一个数组可以有多个维度，声明方法如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>type<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> … <span class="token punctuation">,</span><span class="token punctuation">]</span> arrayName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">type</span><span class="token punctuation">[</span>size1<span class="token punctuation">,</span> size2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> sizeN<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，我们定义一个整型 3 行 4 列的二维数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span></span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以将此数组可视化为由 3 行 4 列组成的表格：</p><figure><img src="`+e+`" alt="6b542c2798f6a49c68603d215aaa337" tabindex="0" loading="lazy"><figcaption>6b542c2798f6a49c68603d215aaa337</figcaption></figure><p>【填空题】填空,实例化一个 8 行 8 列的二维数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">int</span><span class="token punctuation">[</span>_<span class="token punctuation">,</span>_<span class="token punctuation">]</span> chessBoard <span class="token operator">=</span> _new__ <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> __8_<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>int[ , ] chessBoard = new int[8, 8 ];</p></blockquote><h3 id="_3-2-带初始值的多维数组" tabindex="-1"><a class="header-anchor" href="#_3-2-带初始值的多维数组"><span>3.2 带初始值的多维数组</span></a></h3><p>我们可以像使用一维数组一样在实例化多维数组时设置初始值。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span></span> someNums <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个三行两列的数组。 嵌套大括号用于定义每行的值。</p><p>要访问数组的一个二维数组的元素，需要提供两个索引号。例如 <code>someNums[2, 0]</code> 将返回值 4，因为它访问第三行的第一列。</p><p>我们来创建一个程序，它将以表格的形式显示数组的值,这样更直观一点。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>someNums<span class="token punctuation">[</span>k<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用了两个嵌套循环，一个循环遍历行，一个遍历列。</p><blockquote><p>数组可以有任意数量的维度，但是要记住，三维以上的数组难于管理。</p></blockquote><p>在C#中创建三维数组的基本语法如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">type<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> arrayName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">type</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>type</code> 是数组元素的数据类型，<code>arrayName</code> 是数组的名称，而 <code>x</code>, <code>y</code>, <code>z</code> 是数组各维度的长度。</p><p>例如，如果你想创建一个整型的三维数组，其中每个维度的大小分别为 4, 3 和 2，可以这样写：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样定义后，<code>myArray</code> 就是一个三维数组，可以通过三个索引访问每个元素，例如 <code>myArray[0, 1, 1]</code> 来访问或修改元素。</p><p>你还可以在声明时直接初始化数组，如下所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式可以在创建数组的同时为每个元素指定一个初始值。</p><p>【填空】以下数组有几个维度？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span></span> arr<span class="token punctuation">;</span> 四维
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-锯齿数组" tabindex="-1"><a class="header-anchor" href="#_3-3-锯齿数组"><span>3.3 锯齿数组</span></a></h3><p>锯齿数组是指元素为数组的数组。</p><p>以下是一个具有三个元素的单维数组的声明，每个元素是一个整型的一维数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> jaggedArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为该数组每个维度都是一个数组，所以你也可以像这样声明初始化数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> jaggedArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> 
<span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以通过索引号访问单个数组元素，如下面的示例所示:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> jaggedArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这访问第三个数组的第二个元素。</p><blockquote><p>锯齿数组是因为数组的元素也为数组,并且元素里面的数组的大小允许不相等，形状如同锯齿而得名。所以一个 <code>int [][]</code> 是一个<code>int []</code> 数组，每个数组的长度可以不同，并占用自己的内存块。 多维数组（<code>int [,]</code>）是一个单独的内存块（本质上是一个矩阵）。 每行的列总是相同的。</p></blockquote><p>【填空题】声明包含 8 个二维数组的锯齿数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span>___<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">___</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>int[ ][,] a = new int[ 8 ][ , ];</code></p></blockquote><h2 id="_4-数组的属性" tabindex="-1"><a class="header-anchor" href="#_4-数组的属性"><span>4. 数组的属性</span></a></h2><h3 id="_4-1-数组的属性" tabindex="-1"><a class="header-anchor" href="#_4-1-数组的属性"><span>4.1 数组的属性</span></a></h3><p>C# 中的 Array 类提供了使用数组的各种属性和方法。</p><p>例如，Length 和 Rank 属性分别返回元素的数量和数组的维数。你可以像使用任何类的成员一样使用点(<code>.</code>)运算符访问它们：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//输出3</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>Rank<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//输出1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Length 属性在需要遍历数组的时候是非常有用的，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【填空题】执行以下代码,最后输出的结果是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3</p></blockquote><p>当然，数组的属性远不止 <strong>Length</strong> 和 <strong>Rank</strong>，数组还有许多其他的属性，比如：</p><p>Max：返回最大值。</p><p>Min：返回最小值。</p><p>Sum：返回所有元素的总和。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出7</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出1</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>C# 还提供了一个静态 Array 类和其他方法。 你将在下一个模块中了解这些。</p></blockquote><p>【填空题】执行以下代码,最后输出的结果是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//output 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-字符串" tabindex="-1"><a class="header-anchor" href="#_5-字符串"><span>5. 字符串</span></a></h2><p>将字符串(string)视为字符数组是很常见的。 实际上，C# 中的字符串是对象。</p><p>当你声明一个字符串变量时，你基本上是实例化一个 String 类型的对象。</p><p>字符串对象支持许多很有用的属性和方法：</p><ul><li><p><strong>Length:</strong> 返回字符串的长度。</p></li><li><p><strong>IndexOf(value):</strong> 返回索引值在字符串中第一次出现的位置。</p></li><li><p><strong>Insert(index, value):</strong> 将值插字符串中的指定位置。</p></li><li><p><strong>Remove(index):</strong> 删除字符串中指定位置后面的所有字符。</p></li><li><p><strong>Replace(oldValue, newValue):</strong> 替换字符串中的指定值。</p></li><li><p><strong>Substring(index, length):</strong> 从指定的索引开始，返回指定长度的子串。 如果未指定长度，则该操作将持续到字符串的末尾。</p></li><li><p>**Contains(value)😗*如果字符串包含指定的值，则返回 true。</p></li></ul><p>以下示例演示了每个 String 成员：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> a <span class="token operator">=</span> <span class="token string">&quot;some text&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出9</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出5</span>

 a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;This is &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出&quot;This is some text&quot;</span>

a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;This is&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;I am&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出&quot;I am some text&quot;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;some&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出&quot;found&quot;</span>

a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出&quot;I am&quot;</span>

a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出&quot;am&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以通过索引号访问字符串中的字符，就像访问数组的元素一样：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> a <span class="token operator">=</span> <span class="token string">&quot;some text&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出&quot;m&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>字符串中的索引与数组类似，从 0 开始。</p></blockquote><p>【填空题】执行以下代码,最后输出的结果是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;SoloLearn is awesome&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>5</p></blockquote><h3 id="_5-2-字符串的使用" tabindex="-1"><a class="header-anchor" href="#_5-2-字符串的使用"><span>5.2 字符串的使用</span></a></h3><p>让我们创建一个程序，它将接收一个字符串，然后用“cat”替换所有出现的单词“dog”，并仅输出第一个句子。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">&quot;This is some text about a dog. The word dog appears in this text a number of times. This is the end.&quot;</span><span class="token punctuation">;</span>

text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出: &quot;This is some text about a cat.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>C# 提供了一些非常实用的属性和方法来处理和操作字符串。 例如，您可以使用这些方法轻松查找某本书中某个特定单词出现的次数。</p></blockquote><p>【填空题】将字符串的最后一个字符赋值给变量 x</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">char</span></span> x<span class="token punctuation">;</span>
x <span class="token operator">=</span> _s__<span class="token punctuation">[</span>s<span class="token punctuation">.</span>Length<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">]</span>___<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-模块五测验" tabindex="-1"><a class="header-anchor" href="#_6-模块五测验"><span>6. 模块五测验</span></a></h2><ol><li>【单选题】数组是</li></ol><p>A. 值类型</p><p>B. 引用类型✅</p><p>C. 以上都不是</p><ol start="2"><li>【填空题】打印数组的所有元素</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token class-name">_in__</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>__item__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>in item</p></blockquote><ol start="3"><li>【填空题】执行以下代码，最后输出的结果是？</li></ol><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;SoloLearn&quot;</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>a 下标从零开始</p></blockquote><p>【单选题】以下数组可以存储多少个元素？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A. 12</p><p>B. 60✅</p><p>C. 59</p><p>D. 4</p><p>【填空题】执行以下代码,最后输出的结果是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> s <span class="token operator">=</span> <span class="token string">&quot;SoloLearn&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> s<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> y <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>4</p></blockquote>`,169),l=[o];function i(u,r){return s(),a("div",null,l)}const m=n(c,[["render",i],["__file","CS_array_string.html.vue"]]),v=JSON.parse(`{"path":"/zh/CS/CS_array_string.html","title":"C#->string & array","lang":"zh-CN","frontmatter":{"title":"C#->string & array","icon":"c","date":"2024-05-08T15:52:19.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 数组 1.1 数组 C# 提供了许多内置的类来存储和操作数据。 数组(Array)就是其中的一种。 数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。 例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。 数组的声明格式如下：数字类型[] 数组名称 这个语句声明...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/CS/CS_array_string.html"}],["meta",{"property":"og:site_name","content":"an istj's zone"}],["meta",{"property":"og:title","content":"C#->string & array"}],["meta",{"property":"og:description","content":"1. 数组 1.1 数组 C# 提供了许多内置的类来存储和操作数据。 数组(Array)就是其中的一种。 数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。 例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。 数组的声明格式如下：数字类型[] 数组名称 这个语句声明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T05:15:22.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-08T15:52:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-09T05:15:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#->string & array\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-08T15:52:19.000Z\\",\\"dateModified\\":\\"2024-05-09T05:15:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 数组","slug":"_1-数组","link":"#_1-数组","children":[{"level":3,"title":"1.1 数组","slug":"_1-1-数组","link":"#_1-1-数组","children":[]},{"level":3,"title":"1.2 数组的索引","slug":"_1-2-数组的索引","link":"#_1-2-数组的索引","children":[]},{"level":3,"title":"1.3 数组的初始值","slug":"_1-3-数组的初始值","link":"#_1-3-数组的初始值","children":[]},{"level":3,"title":"1.4 通过索引访问数组","slug":"_1-4-通过索引访问数组","link":"#_1-4-通过索引访问数组","children":[]}]},{"level":2,"title":"2. 数组的遍历","slug":"_2-数组的遍历","link":"#_2-数组的遍历","children":[{"level":3,"title":"2.1 数组的遍历","slug":"_2-1-数组的遍历","link":"#_2-1-数组的遍历","children":[]},{"level":3,"title":"2.2 foreach 遍历","slug":"_2-2-foreach-遍历","link":"#_2-2-foreach-遍历","children":[]},{"level":3,"title":"2.3 实践：使用循环计算数组总和","slug":"_2-3-实践-使用循环计算数组总和","link":"#_2-3-实践-使用循环计算数组总和","children":[]}]},{"level":2,"title":"3. 多维数组","slug":"_3-多维数组","link":"#_3-多维数组","children":[{"level":3,"title":"3.1 多维数组","slug":"_3-1-多维数组","link":"#_3-1-多维数组","children":[]},{"level":3,"title":"3.2 带初始值的多维数组","slug":"_3-2-带初始值的多维数组","link":"#_3-2-带初始值的多维数组","children":[]},{"level":3,"title":"3.3 锯齿数组","slug":"_3-3-锯齿数组","link":"#_3-3-锯齿数组","children":[]}]},{"level":2,"title":"4. 数组的属性","slug":"_4-数组的属性","link":"#_4-数组的属性","children":[{"level":3,"title":"4.1 数组的属性","slug":"_4-1-数组的属性","link":"#_4-1-数组的属性","children":[]}]},{"level":2,"title":"5. 字符串","slug":"_5-字符串","link":"#_5-字符串","children":[{"level":3,"title":"5.2 字符串的使用","slug":"_5-2-字符串的使用","link":"#_5-2-字符串的使用","children":[]}]},{"level":2,"title":"6. 模块五测验","slug":"_6-模块五测验","link":"#_6-模块五测验","children":[]}],"git":{"createdTime":1701435902000,"updatedTime":1715231722000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":3}]},"readingTime":{"minutes":10.46,"words":3137},"filePathRelative":"zh/CS/CS_array_string.md","localizedDate":"2024年5月8日","excerpt":"<h2>1. 数组</h2>\\n<h3>1.1 数组</h3>\\n<p>C# 提供了许多内置的类来存储和操作数据。</p>\\n<p>数组(Array)就是其中的一种。</p>\\n<p>数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。</p>\\n<p>例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。</p>\\n<p>数组的声明格式如下：<code>数字类型[] 数组名称</code></p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span> <span class=\\"token punctuation\\">]</span></span> myArray<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{m as comp,v as data};

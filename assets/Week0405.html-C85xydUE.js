import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as y,b as o,e as F,w as a,r as t,o as d,a as s,d as n}from"./app-wJZTzokE.js";const v="/assets/image-20241111160635025-BOludMoL.png",u="/assets/image-20241111160652945-DolFPzWW.png",m="/assets/image-20241111160514984-TOMo5-9r.png",b="/assets/image-20241111160546717-BDaRUa1T.png",f="/assets/image-20241111160603739-0kaMCGiM.png",E={};function D(h,l){const r=t("CodeTabs"),c=t("Tabs");return d(),y("div",null,[l[16]||(l[16]=o(`<h2 id="week-04" tabindex="-1"><a class="header-anchor" href="#week-04"><span>week 04</span></a></h2><h3 id="_1-bst-的查找-插入与删除" tabindex="-1"><a class="header-anchor" href="#_1-bst-的查找-插入与删除"><span>1. BST 的查找，插入与删除</span></a></h3><h4 id="循环的——查找插入删除" tabindex="-1"><a class="header-anchor" href="#循环的——查找插入删除"><span>循环的——查找插入删除</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">BST</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        cur </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> cur </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> cur</span></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        cur, pre </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root, </span><span style="color:#AE81FF;">None</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> cur </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F92672;">                return</span></span>
<span class="line"><span style="color:#F8F8F2;">            pre </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right</span></span>
<span class="line"><span style="color:#F8F8F2;">        node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(key)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> pre.val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">            pre.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            pre.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> delete</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        cur, pre </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root, </span><span style="color:#AE81FF;">None</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">            pre </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> cur.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> cur.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pre.left </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> cur:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pre.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pre.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            replace_cur </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find_min(cur)</span></span>
<span class="line"><span style="color:#F8F8F2;">            cur.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> replace_cur.val</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find_min</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F8F8F2;">        node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.right</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> node.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.left</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 手动创建二叉搜索树</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> BST()</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.delete(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 测试查找节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bst.find(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> node:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;找到了节点，值为: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">node.val</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 打印该节点的值</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;未找到节点&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="递归的——查找插入删除" tabindex="-1"><a class="header-anchor" href="#递归的——查找插入删除"><span>递归的——查找插入删除</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;二叉树节点类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">BST</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.search(root.left, val)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.search(root.right, val)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> root  </span><span style="color:#88846F;"># 这里是返回了该节点的地址，而不是值</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> TreeNode(num)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            root.left </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.insert(root.left, num)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            root.right </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.insert(root.right, num)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> root</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> delete</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> root</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            root.left </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete(root.left, key)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            root.right </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete(root.right, key)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> root.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> root.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> root.left:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> root.left</span></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> root.right:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> root.right</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_find_num </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find_min(root.right)</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_find_num.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root.val</span></span>
<span class="line"><span style="color:#F8F8F2;">                root.right </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete(root.right, min_find_num)</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> root</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find_min</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        current </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> current.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            current </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current.left</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> current</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> BST()</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bst.insert(bst.root,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(bst.root, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(bst.root, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(bst.root, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(bst.root, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(bst.root, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.insert(bst.root, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.delete(bst.root, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 测试查找节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bst.search(bst.root, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> node:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;找到了节点，值为: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">node.val</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 打印该节点的值</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;未找到节点&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-bst-的遍历" tabindex="-1"><a class="header-anchor" href="#_2-bst-的遍历"><span>2. BST 的遍历</span></a></h3><h4 id="_2-1-pre-order" tabindex="-1"><a class="header-anchor" href="#_2-1-pre-order"><span>2.1 Pre Order</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> preorder</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">: TreeNode):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.append(root.val)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        preorder(root.left)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.right:</span></span>
<span class="line"><span style="color:#F8F8F2;">        preorder(root.right)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">preorder(n1)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(res)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-in-order" tabindex="-1"><a class="header-anchor" href="#_2-2-in-order"><span>2.2 In Order</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> inorder</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">: TreeNode):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inorder(root.left)</span></span>
<span class="line"><span style="color:#F8F8F2;">        res.append(root.val)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.right:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inorder(root.right)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">inorder(n1)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(res)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-post-order" tabindex="-1"><a class="header-anchor" href="#_2-3-post-order"><span>2.3 Post Order</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> postorder</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">: TreeNode):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inorder(root.left)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.right:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inorder(root.right)</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.append(root.val)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">postorder(n1)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(res)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-广度遍历和深度遍历" tabindex="-1"><a class="header-anchor" href="#_3-广度遍历和深度遍历"><span>3. 广度遍历和深度遍历</span></a></h3><h4 id="_3-1-广度遍历-bfs" tabindex="-1"><a class="header-anchor" href="#_3-1-广度遍历-bfs"><span>3.1 广度遍历（BFS）</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F8F8F2;">n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n5 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n6 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n7 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n2</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n3</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n4</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n5</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n6</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> level_order</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue.append(root)</span></span>
<span class="line"><span style="color:#F8F8F2;">    res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> queue:</span></span>
<span class="line"><span style="color:#F8F8F2;">        node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        res.append(node.val)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node.left:</span></span>
<span class="line"><span style="color:#F8F8F2;">            queue.append(node.left)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node.right:</span></span>
<span class="line"><span style="color:#F8F8F2;">            queue.append(node.right)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(level_order(n1))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;二叉树节点类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> val  </span><span style="color:#88846F;"># 节点值</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left: </span><span style="color:#E6DB74;">&#39;TreeNode&#39;</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">  # 左子节点引用</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right: </span><span style="color:#E6DB74;">&#39;TreeNode&#39;</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">  # 右子节点引用</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n5 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n6 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n7 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n2</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n3</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n4</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n5</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n6</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n7</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> level_order_recursive</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root:</span></span>
<span class="line"><span style="color:#F8F8F2;">        level_helper([root], res)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> res</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> level_helper</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">queue</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> queue:</span></span>
<span class="line"><span style="color:#F92672;">        return</span></span>
<span class="line"><span style="color:#F8F8F2;">    node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    res.append(node.val)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> node.left:</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue.append(node.left)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> node.right:</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue.append(node.right)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    level_helper(queue, res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(level_order_recursive(n1))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_3-2-深度遍历-就是先中后序遍历" tabindex="-1"><a class="header-anchor" href="#_3-2-深度遍历-就是先中后序遍历"><span>3.2 深度遍历（就是先中后序遍历）</span></a></h4><h3 id="_5-balanced-and-unbalanced-trees-查找。无意义" tabindex="-1"><a class="header-anchor" href="#_5-balanced-and-unbalanced-trees-查找。无意义"><span>5. Balanced and Unbalanced Trees 查找。无意义</span></a></h3><h3 id="_6-avl-trees" tabindex="-1"><a class="header-anchor" href="#_6-avl-trees"><span>6. AVL Trees</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.height </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> get_height</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> node.height</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> update_height</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> max</span><span style="color:#F8F8F2;">([</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.get_height(node.left), </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.get_height(node.right)]) </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> balance_factor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.get_height(node.left) </span><span style="color:#F92672;">-</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.get_height(node.right)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> right_rotation</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.left</span></span>
<span class="line"><span style="color:#F8F8F2;">        grand_child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child.right</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        child.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"><span style="color:#F8F8F2;">        node.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> grand_child</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.update_height(child)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.update_height(node)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> left_rotation</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">node.right</span></span>
<span class="line"><span style="color:#F8F8F2;">        grand_child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child.left</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        child.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"><span style="color:#F8F8F2;">        node.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> grand_child</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.update_height(child)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.update_height(node)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> roration</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        balance_factor </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.balance_factor(node)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> balance_factor </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.balance_factor(node.left) </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.right_rotation(node)</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.left_rotation(node.left)</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.left_rotation(node)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> balance_factor </span><span style="color:#F92672;">&lt;</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.balance_factor(node.right) </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.left_rotation(node)</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.right_rotation(node.left)</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.left_rotation(node)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">._root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.insert_helper(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">._root, val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> insert_helper</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> TreeNode(val)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> node.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node.left </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.insert_helper(node.left, val)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> node.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node.right </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.insert_helper(node.right, val)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.update_height(node)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> node.rotation(node)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> delete</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">._root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete_helper(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">._root,val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> delete_helper</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> node.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node.left </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete_helper(node.left, val)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> node.val:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node.right </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete_helper(node.right,val)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> node.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> node.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.left </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> node.right</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> child </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#F92672;">                else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                    return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.right</span></span>
<span class="line"><span style="color:#F92672;">                while</span><span style="color:#F8F8F2;"> min_node.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    min_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> min_node.left</span></span>
<span class="line"><span style="color:#F8F8F2;">                node.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> min_node.val</span></span>
<span class="line"><span style="color:#F8F8F2;">                node.right </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.delete_helper(node.right, min_node.val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.update_height(node)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> node.rotation(node)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="week-05" tabindex="-1"><a class="header-anchor" href="#week-05"><span>week 05</span></a></h2><h3 id="_1-hashing" tabindex="-1"><a class="header-anchor" href="#_1-hashing"><span>1. Hashing</span></a></h3><h3 id="_2-linked-list" tabindex="-1"><a class="header-anchor" href="#_2-linked-list"><span>2. linked list</span></a></h3><p>数组查找好，链表插入和删除好。</p><p>双向链表 ：DOUBLE LINKED LIST</p><p>循环链表：CIRCULAR LIST</p><p>双向链表插入删除查找序号；值：</p>`,28)),F(r,{id:"68",data:[{id:"自己写的（逻辑不严密）"},{id:"插入节点、删除节点"},{id:"打印、头尾节点插入、删头结点"}]},{title0:a(({value:e,isActive:p})=>l[0]||(l[0]=[n("自己写的（逻辑不严密）")])),title1:a(({value:e,isActive:p})=>l[1]||(l[1]=[n("插入节点、删除节点")])),title2:a(({value:e,isActive:p})=>l[2]||(l[2]=[n("打印、头尾节点插入、删头结点")])),tab0:a(({value:e,isActive:p})=>l[3]||(l[3]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"ListNode"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"val"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".val "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," val")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".L.head "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".L.tail "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," insert"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"n0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"p"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," n0.next "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        n0.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode(p)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        p.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n0")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        n0.next.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        p.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n0.next")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        n0.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        p.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n0")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," delete"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"p"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," ")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," access"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"head"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"index"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"(index):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," head "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            return"),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            head "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," head.next")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," head")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," find_val"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"head"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," head "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#F8F8F2"}}," head "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," head.val "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," target:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            return"),s("span",{style:{color:"#F8F8F2"}}," index")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            head "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," head.next")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            index "),s("span",{style:{color:"#F92672"}},"+="),s("span",{style:{color:"#AE81FF"}}," 1")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n0 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n0.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n1.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n0")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n1.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n2")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n2.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n1")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"node "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," access(n0, "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"列表 1 号位置的节点是'),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"node.val"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:p})=>l[4]||(l[4]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"ListNode"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"val"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".val "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," val")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"linkedList"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},"._L "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".head "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".tail "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," insert"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"L"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"pre"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"p"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," L.head "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 如果链表为空，初始化链表")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            L.head "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," L.tail "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            p.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 插入新节点 p 在 pre 后面")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            p.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," pre.next")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            pre.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            p.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," pre")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 更新下一个节点的 prev 指针")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," p.next "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                p.next.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 如果 pre 是尾节点，更新尾节点")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," L.tail "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," pre:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                L.tail "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," delete"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"L"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"p"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," p.prev "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            p.prev.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p.next")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            L.head "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p.next")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," p.next "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            p.next.prev "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p.prev")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            L.tail "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," p.prev")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab2:a(({value:e,isActive:p})=>l[5]||(l[5]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"Node"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"dataval"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".dataval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," dataval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"SLinkedList"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#88846F"}},"  # 初始化一个头结点（Initialize a head node）")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," listprint"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        printval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        while"),s("span",{style:{color:"#F8F8F2"}}," printval "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"            print"),s("span",{style:{color:"#F8F8F2"}},"(printval.dataval)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            printval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," printval.nextval")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 在链表的开头插入新节点")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," AtBeginning"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"newdata"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        NewNode "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node(newdata)  "),s("span",{style:{color:"#88846F"}},"# 创建新节点")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 链表为空时，直接让 head 指向新节点")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"            self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," NewNode")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 插入新节点到链表头部")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            NewNode.nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"            self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," NewNode")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," AtEnd"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"newdata"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        NewNode "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node(newdata)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"            self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," NewNode")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            return")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            last "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            while"),s("span",{style:{color:"#F8F8F2"}}," last.nextval:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                last "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," last.nextval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            last.nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," NewNode")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," delete_head"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # if linked list is empty nothing to delete")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            return")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # Point at the head of the linked lisr")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        start "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # set the head of list as the second element")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".headval.nextval")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # delete the original head of the list")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        del"),s("span",{style:{color:"#F8F8F2"}}," start")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," SLinkedList()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},".headval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node("),s("span",{style:{color:"#E6DB74"}},'"Mon"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node("),s("span",{style:{color:"#E6DB74"}},'"Tue"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e3 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node("),s("span",{style:{color:"#E6DB74"}},'"Thur"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e4 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node("),s("span",{style:{color:"#E6DB74"}},'"Fri"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e5 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Node("),s("span",{style:{color:"#E6DB74"}},'"Sat"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},".headval.nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," e2")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e2.nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," e3")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e3.nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," e4")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"e4.nextval "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," e5")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},".AtEnd("),s("span",{style:{color:"#E6DB74"}},'"Sun"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},".AtBeginning("),s("span",{style:{color:"#E6DB74"}},'"Days"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},".listprint()")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[17]||(l[17]=o('<h3 id="_3-stacks" tabindex="-1"><a class="header-anchor" href="#_3-stacks"><span>3. Stacks</span></a></h3><ul><li><p>操作：入栈和出栈</p></li><li><p>堆栈指针：</p><ul><li>用来索引栈里的元素</li><li>经常用在栈头部</li><li>如果推送了一个元素，指针就会递增，该元素就会被添加到顶部。</li><li>如果一个项目被弹出，指针将递减，该项目将返回给程序</li></ul></li></ul>',2)),F(c,{id:"116",data:[{id:""},{id:""}]},{title0:a(({value:e,isActive:p})=>l[6]||(l[6]=[])),title1:a(({value:e,isActive:p})=>l[7]||(l[7]=[])),tab0:a(({value:e,isActive:p})=>l[8]||(l[8]=[s("img",{src:v,alt:"image-20241111160635025",style:{zoom:"25%"}},null,-1)])),tab1:a(({value:e,isActive:p})=>l[9]||(l[9]=[s("img",{src:u,alt:"image-20241111160652945",style:{zoom:"25%"}},null,-1)])),_:1}),l[18]||(l[18]=o(`<div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Stack</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">object</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.stack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 100</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> push</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 检查栈是否已满，如果满了则扩容</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">&gt;=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.stack):</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.stack </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.stack </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.stack)  </span><span style="color:#88846F;"># 将栈的长度翻倍</span></span>
<span class="line"><span style="color:#88846F;">        # 插入元素到栈顶位置</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.stack[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.top] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> pop</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">==</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;pop from empty stack&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">-=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.stack[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># 这个是返回弹出的栈顶元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> peek</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 检查栈是否为空</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">==</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;peek from empty stack&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.stack[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.top]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> is_empty</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 判断栈是否为空</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">==</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 返回栈中元素的数量</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> capacity</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 返回栈的容量（数组长度）</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.stack)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> print_stack</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 打印栈中的所有元素</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.is_empty():</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Stack is empty.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Stack elements:&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.stack[:</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.top </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">stack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Stack()</span></span>
<span class="line"><span style="color:#F8F8F2;">stack.push(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">stack.push(</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">stack.push(</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;栈顶元素:&quot;</span><span style="color:#F8F8F2;">, stack.peek())  </span><span style="color:#88846F;"># 输出 30</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;栈大小:&quot;</span><span style="color:#F8F8F2;">, stack.size())  </span><span style="color:#88846F;"># 输出 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">stack.pop(</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 弹出 30</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;弹出后的栈顶元素:&quot;</span><span style="color:#F8F8F2;">, stack.peek())  </span><span style="color:#88846F;"># 输出 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-queues" tabindex="-1"><a class="header-anchor" href="#_4-queues"><span>4. Queues</span></a></h3><ul><li><strong>Head and tail:</strong><ul><li>A queue needs two pointers - one to point to the item at the start (head) of the queue, and one to point at the end tail</li></ul></li></ul>`,3)),F(c,{id:"142",data:[{id:""},{id:""},{id:""}]},{title0:a(({value:e,isActive:p})=>l[10]||(l[10]=[])),title1:a(({value:e,isActive:p})=>l[11]||(l[11]=[])),title2:a(({value:e,isActive:p})=>l[12]||(l[12]=[])),tab0:a(({value:e,isActive:p})=>l[13]||(l[13]=[s("figure",null,[s("img",{src:m,alt:"image-20241111160514984",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20241111160514984")],-1)])),tab1:a(({value:e,isActive:p})=>l[14]||(l[14]=[s("figure",null,[s("img",{src:b,alt:"image-20241111160546717",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20241111160546717")],-1)])),tab2:a(({value:e,isActive:p})=>l[15]||(l[15]=[s("figure",null,[s("img",{src:f,alt:"image-20241111160603739",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20241111160603739")],-1)])),_:1}),l[19]||(l[19]=o(`<div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">CircularQueue</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">size</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> size</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> size</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.head </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.tail </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> enqueue</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.tail </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">==</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.head </span><span style="color:#F92672;">and</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.queue[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.head] </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;queue full&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            return</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.tail </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.tail </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.queue[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.tail] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dequeue</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.head </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.tail </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">and</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.queue[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.head] </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;queue is empty&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.queue[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.head]</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.queue[</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.head] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.head </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.head </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> display</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Queue:&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.queue)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Head at index </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.head</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, Tail at index </span><span style="color:#AE81FF;">{</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.tail</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">q </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> CircularQueue(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;G&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;Z&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;Q&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.enqueue(</span><span style="color:#E6DB74;">&#39;Y&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">q.display()  </span><span style="color:#88846F;"># 输出队列内容及指针位置</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(q.dequeue())  </span><span style="color:#88846F;"># 输出：A</span></span>
<span class="line"><span style="color:#F8F8F2;">q.display()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>output</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Queue: [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;G&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Z&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Q&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Y&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Head at index </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, Tail at index </span><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#F8F8F2;">A</span></span>
<span class="line"><span style="color:#F8F8F2;">Queue: [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;G&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Z&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Q&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Y&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Head at index </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, Tail at index </span><span style="color:#AE81FF;">7</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-graphs" tabindex="-1"><a class="header-anchor" href="#_5-graphs"><span>5. Graphs</span></a></h3><p>陌生英文单词：</p><ul><li><strong>vertices:</strong> 顶点</li><li>**incident：**附带的</li><li>**adjacent = neighbours：**邻近的；靠近的</li></ul><p>Items：</p><ul><li>undirected graph</li><li>Vertex labelled graph：顶点标记图（顶点有属性，比如有颜色属性）</li><li>Cyclic graph：有环图</li><li>Acycic graph：无环图</li><li>weighted graph：带权图（边带权）</li><li>connected or unconnected graph：（非）连通图</li><li>Adjacency Matrix：邻接矩阵</li><li>Adjacency List：邻接表</li></ul><h4 id="_5-1-图的添加、删除边和节点" tabindex="-1"><a class="header-anchor" href="#_5-1-图的添加、删除边和节点"><span>5.1 图的添加、删除边和节点</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GraphAdjMatrix</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">:list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">edges</span><span style="color:#F8F8F2;">: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]]):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vertices:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_vertex(val)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_edge(e[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], e[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        n </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.append(val)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_row </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> n</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.append(new_row)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Index out of the range&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.pop(index)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.pop(index)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.pop(index)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;index out of the range&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Edges from vertex to itself are not allowed.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;index out of the range&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Deteling edge from vertex to itself is not allowed.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;vertices = &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Adjacency Matrix = &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.print_matrix()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> print_matrix</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 在顶点列表打印时，前面加一个空格</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;  &quot;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &quot; &quot;</span><span style="color:#F8F8F2;">.join(</span><span style="color:#66D9EF;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)))</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.size()):</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.adj_mat[i].insert(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices[i])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">.join(</span><span style="color:#66D9EF;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">, row)))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMatrix(vertices, edges)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # graph.add_edge(0, 2)</span></span>
<span class="line"><span style="color:#88846F;">    # graph.remove_edge(0, 1)</span></span>
<span class="line"><span style="color:#88846F;">    # graph.add_vertex(6)</span></span>
<span class="line"><span style="color:#88846F;">    # graph.remove_vertex(1)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_5-2-dfs" tabindex="-1"><a class="header-anchor" href="#_5-2-dfs"><span>5.2 DFS</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dfs_recursive</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">visited</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">bool</span><span style="color:#F8F8F2;">]):</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited[start] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices[start], </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39; &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> neighbor, is_connected </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.adj_mat[start]):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> is_connected </span><span style="color:#F92672;">and</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> visited[neighbor]:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.dfs_recursive(neighbor, visited)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_vertex</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#F8F8F2;">        start_index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.vertices.index(start_vertex)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.dfs_recursive(start_index, visited)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> test_graph_adjmat_dfs</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;=== 测试1：简单图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1 3 2 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试2：环形图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建一个环形图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试3：不连通图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建不连通的图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 2 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 2 开始进行 DFS 遍历，预期输出 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试4：单一顶点 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建只有一个顶点的图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_5-3-bfs" tabindex="-1"><a class="header-anchor" href="#_5-3-bfs"><span>5.3 BFS</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> bfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_vertex</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        start_index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.vertices.index(start_vertex)</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [start_index]</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited[start_index] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> queue:</span></span>
<span class="line"><span style="color:#F8F8F2;">            vertex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices[vertex], </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39; &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> neighbor, is_connected </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.adj_mat[vertex]):</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> visited[neighbor] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> is_connected:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    visited[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">                    queue.append(neighbor)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16))])}const _=i(E,[["render",D]]),x=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week0405.html","title":"高级算法——第4,5周查漏补缺","lang":"zh-CN","frontmatter":{"title":"高级算法——第4,5周查漏补缺","icon":"python","date":"2024-11-06T16:04:18.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1731059867000,"updatedTime":1733388592000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":6,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":9.94,"words":2982},"filePathRelative":"zh/Advanced_Algorithms/Week0405.md","localizedDate":"2024年11月6日"}');export{_ as comp,x as data};

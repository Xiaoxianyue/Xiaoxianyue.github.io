import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o as r}from"./app-nyj23WpH.js";const i="/assets/image-20250107112123196-CbMU_D4q.png",o={};function a(s,t){return r(),n("div",null,t[0]||(t[0]=[l('<h2 id="_1-大模型架构" tabindex="-1"><a class="header-anchor" href="#_1-大模型架构"><span>1. 大模型架构</span></a></h2><img src="'+i+'" alt="image-20250107112123196" style="zoom:33%;"><p>这个架构图是一个基于大模型的系统框架，结合了视频处理、聊天机器人和数据分析功能。下面我将逐步说明每个部分的作用、顺序、基本原理和实现方法：</p><h3 id="_1-1-3d-sport-models" tabindex="-1"><a class="header-anchor" href="#_1-1-3d-sport-models"><span>1.1 <strong>3D Sport Models</strong></span></a></h3><ul><li><strong>目的</strong>: 输入 3D 运动模型，用于视频分析和数据提取。</li><li><strong>基本原理</strong>: 3D运动模型是用来检测和提取运动对象的空间信息（如位置、姿态等）。</li><li><strong>实现方法</strong>: 通常采用深度学习模型（如Pose Estimation算法）对视频中的人体或物体进行关键点检测和轨迹跟踪。</li></ul><h3 id="_1-2-视频-视频流" tabindex="-1"><a class="header-anchor" href="#_1-2-视频-视频流"><span>1.2 <strong>视频/视频流</strong></span></a></h3><ul><li><strong>目的</strong>: 接收实时视频流或预处理好的视频文件，作为输入。</li><li><strong>基本原理</strong>: 视频流是动态数据，分帧后可用于后续处理。</li><li><strong>实现方法</strong>: 通过 OpenCV 等工具进行帧分解和预处理，为后续的视频处理大模型提供数据。</li></ul><h3 id="_1-3-视频处理大模型" tabindex="-1"><a class="header-anchor" href="#_1-3-视频处理大模型"><span>1.3 <strong>视频处理大模型</strong></span></a></h3><ul><li><strong>目的</strong>: 对视频流进行深度分析，提取关键信息。</li><li><strong>基本原理</strong>: 使用深度神经网络（如卷积神经网络或 Transformer）对视频帧进行分析。</li><li><strong>实现方法</strong>: 例如，采用预训练的模型（如 YOLO、DeepLab）提取特征，结合 3DSport 模型分析运动轨迹。</li></ul><h3 id="_1-4-结构化数据" tabindex="-1"><a class="header-anchor" href="#_1-4-结构化数据"><span>1.4 <strong>结构化数据</strong></span></a></h3><ul><li><strong>目的</strong>: 将视频分析结果转化为结构化数据（如 JSON 或表格形式）。</li><li><strong>基本原理</strong>: 通过视频分析得到的特征和轨迹信息，进行格式化处理，方便后续分析。</li><li><strong>实现方法</strong>: 编写数据处理脚本（如 Python Pandas）将分析结果存储为标准数据格式。</li></ul><h3 id="_1-5-数据报告" tabindex="-1"><a class="header-anchor" href="#_1-5-数据报告"><span>1.5 <strong>数据报告</strong></span></a></h3><ul><li><strong>目的</strong>: 将结构化数据生成最终报告，供用户查看。</li><li><strong>基本原理</strong>: 数据可视化和统计分析。</li><li><strong>实现方法</strong>: 使用工具（如 Matplotlib、Tableau）将分析结果以图表、表格形式展示。</li></ul><h3 id="_1-6-比赛选择-chatbot-app" tabindex="-1"><a class="header-anchor" href="#_1-6-比赛选择-chatbot-app"><span>1.6 <strong>比赛选择 &amp; Chatbot App</strong></span></a></h3><ul><li><strong>目的</strong>: 提供用户交互界面，可选择比赛或提问聊天机器人。</li><li><strong>基本原理</strong>: 比赛选择通过菜单选择；Chatbot App 利用自然语言处理（NLP）回答问题。</li><li>实现方法: <ul><li>比赛选择通过简单的用户界面开发（如HTML/JS）。</li><li>Chatbot App 调用大语言模型（如OpenAI API）生成对话内容。</li></ul></li></ul><h3 id="_1-7-服务" tabindex="-1"><a class="header-anchor" href="#_1-7-服务"><span>1.7 <strong>服务</strong></span></a></h3><ul><li><strong>目的</strong>: 将核心功能模块（视频处理、数据分析、聊天功能）整合为服务。</li><li><strong>基本原理</strong>: 通过 API 调用或微服务架构将不同功能模块连接。</li><li><strong>实现方法</strong>: 使用框架（如Flask、FastAPI）部署后端服务。</li></ul><h3 id="_1-8-历史-背景数据" tabindex="-1"><a class="header-anchor" href="#_1-8-历史-背景数据"><span>1.8 <strong>历史/背景数据</strong></span></a></h3><ul><li><strong>目的</strong>: 提供系统分析的上下文信息。</li><li><strong>基本原理</strong>: 基于历史数据的存储和检索。</li><li><strong>实现方法</strong>: 使用数据库（如SQL或NoSQL）保存和查询用户数据或历史比赛记录。</li></ul><h3 id="_1-9-rag-retrieval-augmented-generation" tabindex="-1"><a class="header-anchor" href="#_1-9-rag-retrieval-augmented-generation"><span>1.9 <strong>RAG（Retrieval-Augmented Generation）</strong></span></a></h3><ul><li><strong>目的</strong>: 提升大模型的回答准确性，通过检索增强生成能力。</li><li><strong>基本原理</strong>: 将检索到的相关文档作为输入，辅助大语言模型生成更精准的回答。</li><li><strong>实现方法</strong>: 结合向量检索技术（如FAISS）和LLM模型，查询历史数据并生成答案。</li></ul><h3 id="_1-10-llm-model" tabindex="-1"><a class="header-anchor" href="#_1-10-llm-model"><span>1.10 <strong>LLM Model</strong></span></a></h3><ul><li><strong>目的</strong>: 提供智能回答和语言生成能力。</li><li><strong>基本原理</strong>: 利用预训练的大规模语言模型，通过深度学习生成自然语言输出。</li><li><strong>实现方法</strong>: 使用GPT等模型，输入用户问题和上下文，输出答案。</li></ul><h3 id="总结顺序" tabindex="-1"><a class="header-anchor" href="#总结顺序"><span>总结顺序</span></a></h3><ol><li><strong>数据输入与视频处理</strong>: 视频流经过大模型处理，生成结构化数据。</li><li><strong>数据分析与展示</strong>: 数据转化为用户可读的报告。</li><li><strong>用户交互</strong>: 通过比赛选择和Chatbot App进行反馈。</li><li><strong>历史增强</strong>: 利用历史数据和RAG技术为模型提供上下文，改进回答。</li></ol>',25)]))}const p=e(o,[["render",a],["__file","istarshine.html.vue"]]),d=JSON.parse('{"path":"/zh/internship/istarshine.html","title":"体育传媒大模型","lang":"zh-CN","frontmatter":{"title":"体育传媒大模型","icon":"python","date":"2024-08-01T20:42:42.000Z","author":"XiaoXianYue","isOriginal":true,"category":["智慧星光实习笔记"],"tag":["智慧星光实习笔记"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 大模型架构 image-20250107112123196 这个架构图是一个基于大模型的系统框架，结合了视频处理、聊天机器人和数据分析功能。下面我将逐步说明每个部分的作用、顺序、基本原理和实现方法： 1.1 3D Sport Models 目的: 输入 3D 运动模型，用于视频分析和数据提取。 基本原理: 3D运动模型是用来检测和提取运动对象的空...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/internship/istarshine.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"体育传媒大模型"}],["meta",{"property":"og:description","content":"1. 大模型架构 image-20250107112123196 这个架构图是一个基于大模型的系统框架，结合了视频处理、聊天机器人和数据分析功能。下面我将逐步说明每个部分的作用、顺序、基本原理和实现方法： 1.1 3D Sport Models 目的: 输入 3D 运动模型，用于视频分析和数据提取。 基本原理: 3D运动模型是用来检测和提取运动对象的空..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-07T05:47:22.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"智慧星光实习笔记"}],["meta",{"property":"article:published_time","content":"2024-08-01T20:42:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-07T05:47:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"体育传媒大模型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-01T20:42:42.000Z\\",\\"dateModified\\":\\"2025-01-07T05:47:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 大模型架构","slug":"_1-大模型架构","link":"#_1-大模型架构","children":[{"level":3,"title":"1.1 3D Sport Models","slug":"_1-1-3d-sport-models","link":"#_1-1-3d-sport-models","children":[]},{"level":3,"title":"1.2 视频/视频流","slug":"_1-2-视频-视频流","link":"#_1-2-视频-视频流","children":[]},{"level":3,"title":"1.3 视频处理大模型","slug":"_1-3-视频处理大模型","link":"#_1-3-视频处理大模型","children":[]},{"level":3,"title":"1.4 结构化数据","slug":"_1-4-结构化数据","link":"#_1-4-结构化数据","children":[]},{"level":3,"title":"1.5 数据报告","slug":"_1-5-数据报告","link":"#_1-5-数据报告","children":[]},{"level":3,"title":"1.6 比赛选择 & Chatbot App","slug":"_1-6-比赛选择-chatbot-app","link":"#_1-6-比赛选择-chatbot-app","children":[]},{"level":3,"title":"1.7 服务","slug":"_1-7-服务","link":"#_1-7-服务","children":[]},{"level":3,"title":"1.8 历史/背景数据","slug":"_1-8-历史-背景数据","link":"#_1-8-历史-背景数据","children":[]},{"level":3,"title":"1.9 RAG（Retrieval-Augmented Generation）","slug":"_1-9-rag-retrieval-augmented-generation","link":"#_1-9-rag-retrieval-augmented-generation","children":[]},{"level":3,"title":"1.10 LLM Model","slug":"_1-10-llm-model","link":"#_1-10-llm-model","children":[]},{"level":3,"title":"总结顺序","slug":"总结顺序","link":"#总结顺序","children":[]}]}],"git":{"createdTime":1736220264000,"updatedTime":1736228842000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":2}]},"readingTime":{"minutes":3.54,"words":1061},"filePathRelative":"zh/internship/istarshine.md","localizedDate":"2024年8月1日","excerpt":"<h2>1. 大模型架构</h2>\\n\\n<p>这个架构图是一个基于大模型的系统框架，结合了视频处理、聊天机器人和数据分析功能。下面我将逐步说明每个部分的作用、顺序、基本原理和实现方法：</p>\\n<h3>1.1 <strong>3D Sport Models</strong></h3>\\n<ul>\\n<li><strong>目的</strong>: 输入 3D 运动模型，用于视频分析和数据提取。</li>\\n<li><strong>基本原理</strong>: 3D运动模型是用来检测和提取运动对象的空间信息（如位置、姿态等）。</li>\\n<li><strong>实现方法</strong>: 通常采用深度学习模型（如Pose Estimation算法）对视频中的人体或物体进行关键点检测和轨迹跟踪。</li>\\n</ul>","autoDesc":true}');export{p as comp,d as data};

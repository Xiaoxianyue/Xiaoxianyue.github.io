import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as r}from"./app-C6Ab6rwu.js";const e="/assets/image-20241213222526586-VffUFthR.png",s="/assets/image-20241213222906296-CvC6PWxA.png",i="/assets/image-20241213223235790-Coyyx1dT.png",l="/assets/image-20241214095834700-KGj5ASeY.png",h={};function d(c,t){return r(),n("div",null,t[0]||(t[0]=[a('<h2 id="core-components" tabindex="-1"><a class="header-anchor" href="#core-components"><span>Core Components</span></a></h2><ul><li>Tensor</li><li>Tensor-based operations</li><li>Computational Graph</li><li>Automatic differentiation tools</li><li>BLAS, cuBLAS, cuDNN and other expansion packages</li></ul><h3 id="tensor" tabindex="-1"><a class="header-anchor" href="#tensor"><span>Tensor</span></a></h3><p>Tensor is the core component of the deep learning framework. Tensor is actually a multidimensional array.</p><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h4><p><strong>Rank</strong>: 张量的维度数。例如标量为0维，向量为1维，矩阵为2维。</p><p><strong>Shape</strong>: 每一维中的元素数量（行数和列数）。</p><p><strong>Type</strong>: 张量中元素的数据类型，比如浮点型、整型等。</p><h4 id="相关操作" tabindex="-1"><a class="header-anchor" href="#相关操作"><span>相关操作</span></a></h4><p><strong>类型转换</strong>：</p><ul><li>将数据从整数转换为浮点数，或者从32位浮点数转换为64位浮点数。</li></ul><p><strong>数值操作</strong>：</p><ul><li>生成张量和随机数，例如<code>torch.randn(2,3)</code>生成一个2行3列的张量。</li></ul><p><strong>形状变换</strong>：</p><ul><li>改变张量形状，例如插入维度、删除维度，使用方法如<code>a.view(6,1)</code>。</li></ul><p><strong>数据操作</strong>：</p><ul><li>例如切片、连接操作，<code>torch.cat((a,b))</code>将两个张量连接起来。</li></ul><p><strong>算术运算</strong>：</p><ul><li>执行加减乘除等算术操作，也包括三角函数和取模运算。</li></ul><p><strong>矩阵相关操作</strong>：</p><ul><li>例如返回对角张量、矩阵乘法、求逆矩阵、计算行列式等。</li></ul><h3 id="computational-graph" tabindex="-1"><a class="header-anchor" href="#computational-graph"><span>Computational Graph</span></a></h3><img src="'+e+'" alt="image-20241213222526586" style="zoom:33%;"><h3 id="automatic-differentiation-tools" tabindex="-1"><a class="header-anchor" href="#automatic-differentiation-tools"><span>Automatic Differentiation Tools</span></a></h3><p>自动微分是将复杂的数学运算分解成一系列简单的基本运算的过程，每种运算都可以通过查表获得。自动微分有两种形式：正向模式和反向模式</p><img src="'+s+'" alt="image-20241213222906296" style="zoom:33%;"><p>前向模式下的前向传播可以计算输出值和导数值</p><h3 id="blas-cublas-cudnn-and-other-expansion-packages" tabindex="-1"><a class="header-anchor" href="#blas-cublas-cudnn-and-other-expansion-packages"><span>BLAS, cuBLAS, cuDNN and other expansion packages</span></a></h3><p>有了上面介绍的组件，我们就可以构建一个全功能的深度学习框架： 将需要处理的数据转换成张量，对张量进行各种必要的运算，通过自动微分训练模型，然后得到输出结果开始测试。</p><img src="'+i+'" alt="image-20241213223235790" style="zoom:50%;"><h2 id="introduction-to-mainstream-frameworks" tabindex="-1"><a class="header-anchor" href="#introduction-to-mainstream-frameworks"><span>Introduction to mainstream frameworks</span></a></h2><h3 id="caffe" tabindex="-1"><a class="header-anchor" href="#caffe"><span>Caffe</span></a></h3><h4 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h4><ul><li><strong>高效</strong>：Caffe 的核心使用 C++ 编写，利用了 BLAS 和 cuDNN 等加速库，性能非常出色，尤其在 GPU 上。</li><li><strong>模块化</strong>：网络结构通过配置文件定义，不需要直接用代码设计网络，适合快速实验和切换不同的网络结构。</li><li><strong>模型库</strong>：Caffe 提供了大量预训练的经典模型（如 AlexNet、VGG、Inception），方便开发者直接使用。</li><li><strong>支持多平台</strong>：可以运行在 CPU 和 GPU 上，适应不同计算能力的设备。</li></ul><hr><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h4><ol><li><strong>工业级效率</strong>：核心用 C++ 编写，执行速度快。</li><li><strong>简易配置</strong>：通过配置文件而非代码定义网络，降低开发难度。</li><li><strong>丰富的预训练模型</strong>：减少了模型从头开始训练的时间成本。</li></ol><hr><h4 id="局限性" tabindex="-1"><a class="header-anchor" href="#局限性"><span>局限性</span></a></h4><ol><li><strong>灵活性不足</strong>：不如 TensorFlow 和 PyTorch 灵活，特别是对自定义任务支持有限。</li><li><strong>环境依赖复杂</strong>：对环境配置要求较高，新手可能需要花费更多时间设置。</li><li><strong>对 RNN 支持不足</strong>：不适合处理文本、声音或时间序列数据。</li></ol><h3 id="pytorch" tabindex="-1"><a class="header-anchor" href="#pytorch"><span>Pytorch</span></a></h3><h4 id="优点-pros" tabindex="-1"><a class="header-anchor" href="#优点-pros"><span>优点 (Pros)</span></a></h4><ol><li><strong>简单易用</strong>：PyTorch 提供了一个清晰、直观的 API，便于初学者和研究人员快速上手。</li><li><strong>细节暴露</strong>：用户可以更轻松地了解深度学习的细节（例如反向传播和训练过程），适合教学和研究。</li><li><strong>活跃的社区</strong>：PyTorch 拥有全面的文档和指南，以及一个支持热情的用户社区。</li><li><strong>Pythonic 风格</strong>：代码风格简洁优雅，与 Python 的语法和设计思想一致，开发效率高。</li></ol><hr><h4 id="缺点-cons" tabindex="-1"><a class="header-anchor" href="#缺点-cons"><span>缺点 (Cons)</span></a></h4><ol><li><strong>模型导出限制</strong>：导出的模型在跨平台移植方面有一定困难，对于工业级部署还不够成熟。</li><li><strong>代码冗余</strong>：在某些任务中，可能需要编写较多代码，增加维护复杂度。</li></ol><h3 id="tensorflow" tabindex="-1"><a class="header-anchor" href="#tensorflow"><span>TensorFlow</span></a></h3><p>是一个强大的深度学习框架，广泛应用于工业和学术界。以下是它的优缺点和适用场景的说明：</p><hr><h4 id="优点-pros-1" tabindex="-1"><a class="header-anchor" href="#优点-pros-1"><span>优点 (Pros)</span></a></h4><ol><li><strong>实时监控工具</strong>：自带 TensorBoard 可视化工具，方便用户实时监控和观察训练过程。</li><li><strong>丰富的资源和支持</strong>：有大量开发者参与，提供详细的文档和丰富的在线资料。</li><li><strong>多 GPU 和分布式训练支持</strong>：支持多 GPU 和分布式训练，具有强大的跨平台操作能力。</li><li><strong>多功能扩展</strong>：不仅限于深度学习，还支持强化学习等其他算法。</li></ol><hr><h4 id="缺点-cons-1" tabindex="-1"><a class="header-anchor" href="#缺点-cons-1"><span>缺点 (Cons)</span></a></h4><ol><li><strong>接口频繁变动</strong>：版本更新较快，接口可能变化，增加了学习和维护成本。</li><li><strong>复杂的接口设计</strong>：部分接口设计较难理解，对初学者不够友好。</li></ol><hr><h4 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h4><ul><li><strong>工业级部署</strong>：得益于多 GPU 和分布式能力，非常适合大规模工业级深度学习任务。</li><li><strong>跨领域应用</strong>：例如强化学习、图像处理、自然语言处理等。</li><li><strong>需要实时可视化的任务</strong>：通过 TensorBoard 观察训练动态，优化模型。</li></ul><p>TensorFlow 是一个灵活且高效的框架，但对于初学者可能有一定的学习曲线，适合追求大规模和高性能应用的场景。</p><h3 id="keras" tabindex="-1"><a class="header-anchor" href="#keras"><span><strong>Keras</strong></span></a></h3><h4 id="优点-pros-2" tabindex="-1"><a class="header-anchor" href="#优点-pros-2"><span><strong>优点 (Pros)</strong></span></a></h4><ul><li>✔ <strong>更简洁、更简单的 API</strong></li><li>✔ <strong>丰富的教程和可重复使用的代码</strong></li><li>✔ <strong>更多的部署选项</strong>（可以直接使用或通过 TensorFlow 后端），支持更轻松的模型导出</li><li>✔ <strong>支持多 GPU 训练（multi-GPU training）</strong></li></ul><h4 id="缺点-cons-2" tabindex="-1"><a class="header-anchor" href="#缺点-cons-2"><span><strong>缺点 (Cons)</strong></span></a></h4><ul><li>✔ <strong>过度封装导致灵活性降低</strong>，使用户难以添加新操作或获取底层数据信息</li><li>✔ <strong>许多 bug 隐藏在框架内部，难以调试细节问题</strong></li><li>✔ 初学者往往过于依赖 Keras 的易用性，而忽视了底层的工作原理</li></ul><h3 id="mxnet" tabindex="-1"><a class="header-anchor" href="#mxnet"><span><strong>MXNet</strong></span></a></h3><h4 id="优点-pros-3" tabindex="-1"><a class="header-anchor" href="#优点-pros-3"><span><strong>优点 (Pros)</strong></span></a></h4><ul><li>✔ <strong>灵活的编程模型</strong></li><li>✔ <strong>支持从云端到客户端的迁移</strong></li><li>✔ <strong>多语言支持</strong>（如 Python、R、Scala、Julia 等）</li><li>✔ <strong>支持本地分布式训练</strong></li><li>✔ <strong>优化性能，提升模型效率</strong></li></ul><h4 id="缺点-cons-3" tabindex="-1"><a class="header-anchor" href="#缺点-cons-3"><span><strong>缺点 (Cons)</strong></span></a></h4><ul><li>✔ <strong>社区规模相对较小</strong>，与 PyTorch 和 TensorFlow 相比，生态系统不够成熟</li><li>✔ 文档质量和教程数量有限，学习曲线较陡</li></ul><h2 id="comparative-analysis-of-tensorflow-and-pytorch" tabindex="-1"><a class="header-anchor" href="#comparative-analysis-of-tensorflow-and-pytorch"><span>Comparative Analysis of Tensorflow and PyTorch</span></a></h2><p>通过分析可以看出，TensorFlow 和 PyTorch 框架是目前业界使用最广泛的两个深度学习框架。TensorFlow 在业界拥有完整的解决方案和用户群。PyTorch 由于界面设计精简灵活，可以快速设计和调试网络模型，在学术界好评如潮。</p><img src="'+l+'" alt="image-20241214095834700" style="zoom:33%;"><p><strong>学术界 (Academia)：</strong><br> 从表格来看，PyTorch 在学术论文中的使用率增长较快，尤其在会议 CVPR（241.5% 增长）和 ACL（296.2% 增长）中表现突出，表明 PyTorch 在学术研究中逐渐流行。相比之下，TensorFlow 的增长幅度较小，甚至在部分会议（如 NAACL 和 ACL）中出现负增长。</p><p><strong>工业界 (Industry)：</strong><br> 从右侧图表中，TensorFlow 的在线职位提及次数最多，说明其在工业界的应用依然占主导地位。PyTorch 紧随其后，而 Keras 和 FastAI 的职位需求相对较少。</p><h4 id="特性精细对比-refinement-feature-comparison" tabindex="-1"><a class="header-anchor" href="#特性精细对比-refinement-feature-comparison"><span>特性精细对比 (Refinement Feature Comparison)</span></a></h4><table><thead><tr><th>序号</th><th>参数 (Parameters)</th><th>TensorFlow</th><th>PyTorch</th></tr></thead><tbody><tr><td>1</td><td>安装的简易性 (Ease of Installation)</td><td><strong>Good</strong></td><td><strong>Excellent</strong></td></tr><tr><td>2</td><td>入门的简易性 (Ease of Getting Started)</td><td><strong>Good</strong></td><td><strong>Excellent</strong></td></tr><tr><td>3</td><td>代码理解性 (Code Understanding)</td><td><strong>Good</strong></td><td><strong>Excellent</strong></td></tr><tr><td>4</td><td>API 丰富度 (API Richness)</td><td><strong>Excellent</strong></td><td><strong>Good</strong></td></tr><tr><td>5</td><td>模型丰富性 (Model Richness)</td><td><strong>Excellent</strong></td><td><strong>Good</strong></td></tr><tr><td>6</td><td>社区支持水平 (Level of Community Support)</td><td><strong>Excellent</strong></td><td><strong>Good</strong></td></tr><tr><td>7</td><td>语言支持水平 (Language Support Level)</td><td><strong>Excellent</strong></td><td><strong>Good</strong></td></tr><tr><td>8</td><td>可视化程度 (Degree of Visualization)</td><td><strong>Excellent</strong></td><td><strong>Good</strong></td></tr></tbody></table><h4 id="使用场景-usage-scenarios" tabindex="-1"><a class="header-anchor" href="#使用场景-usage-scenarios"><span><strong>使用场景 (Usage Scenarios)</strong></span></a></h4><ul><li><strong>TensorFlow：</strong><br> 当您需要丰富的入门资源、开发大规模生产模型、具有较高的可视化需求以及训练大规模分布式模型时，TensorFlow 是一个理想的选择。</li><li><strong>PyTorch：</strong><br> 如果您希望快速上手，对功能性要求不高，追求更好的开发和调试体验，并且擅长使用 Python 工具，那么 PyTorch 是一个很好的选择。</li></ul><h2 id="getting-started-with-pytorch" tabindex="-1"><a class="header-anchor" href="#getting-started-with-pytorch"><span>Getting Started with PyTorch</span></a></h2>',78)]))}const m=o(h,[["render",d]]),u=JSON.parse('{"path":"/zh/Machine_Learning/ch04.html","title":"机器学习第4章","lang":"zh-CN","frontmatter":{"title":"机器学习第4章","icon":"alias","date":"2024-12-13T21:59:01.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","机器学习课件梳理"],"tag":["大三上","机器学习课件梳理"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"Core Components Tensor Tensor-based operations Computational Graph Automatic differentiation tools BLAS, cuBLAS, cuDNN and other expansion packages Tensor Tensor is the core com...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Machine_Learning/ch04.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"机器学习第4章"}],["meta",{"property":"og:description","content":"Core Components Tensor Tensor-based operations Computational Graph Automatic differentiation tools BLAS, cuBLAS, cuDNN and other expansion packages Tensor Tensor is the core com..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-23T08:43:41.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"大三上"}],["meta",{"property":"article:tag","content":"机器学习课件梳理"}],["meta",{"property":"article:published_time","content":"2024-12-13T21:59:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-23T08:43:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"机器学习第4章\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-13T21:59:01.000Z\\",\\"dateModified\\":\\"2024-12-23T08:43:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1734943421000,"updatedTime":1734943421000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":1,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":6.89,"words":2067},"filePathRelative":"zh/Machine_Learning/ch04.md","localizedDate":"2024年12月13日","excerpt":"<h2>Core Components</h2>\\n<ul>\\n<li>Tensor</li>\\n<li>Tensor-based operations</li>\\n<li>Computational Graph</li>\\n<li>Automatic differentiation tools</li>\\n<li>BLAS, cuBLAS, cuDNN and other expansion packages</li>\\n</ul>\\n<h3>Tensor</h3>\\n<p>Tensor is the core component of the deep learning framework. Tensor is actually a multidimensional array.</p>","autoDesc":true}');export{m as comp,u as data};

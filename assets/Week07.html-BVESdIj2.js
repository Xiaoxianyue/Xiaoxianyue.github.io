import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as F,a as s,b as p,e as c,w as a,r as y,o as t,d as l}from"./app-COYsNQIt.js";const d="/assets/image-20241101112039730-B6JWceVI.png",u={},m={class:"MathJax",jax:"SVG",style:{position:"relative"}},v={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.801ex",height:"1.357ex",role:"img",focusable:"false",viewBox:"0 -442 796 599.8","aria-hidden":"true"},b={class:"MathJax",jax:"SVG",style:{position:"relative"}},E={style:{"vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.848ex",height:"2.059ex",role:"img",focusable:"false",viewBox:"0 -705 817 910","aria-hidden":"true"};function A(h,n){const r=y("CodeTabs");return t(),F("div",null,[n[35]||(n[35]=s("h2",{id:"_1-scheduling",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-scheduling"},[s("span",null,"1. Scheduling")])],-1)),n[36]||(n[36]=s("h3",{id:"_1-1-scheduling-problem",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-scheduling-problem"},[s("span",null,"1.1 Scheduling problem")])],-1)),s("table",null,[n[26]||(n[26]=s("thead",null,[s("tr",null,[s("th",null,"i"),s("th",null,"1"),s("th",null,"2"),s("th",null,"3"),s("th",null,"4"),s("th",null,"5"),s("th",null,"6"),s("th",null,"7"),s("th",null,"8"),s("th",null,"9"),s("th",null,"10"),s("th",null,"11")])],-1)),s("tbody",null,[s("tr",null,[s("td",null,[s("mjx-container",m,[(t(),F("svg",v,n[0]||(n[0]=[p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g>',1)]))),n[1]||(n[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"s"),s("mi",null,"i")])])],-1))])]),n[2]||(n[2]=s("td",null,"2",-1)),n[3]||(n[3]=s("td",null,"4",-1)),n[4]||(n[4]=s("td",null,"1",-1)),n[5]||(n[5]=s("td",null,"6",-1)),n[6]||(n[6]=s("td",null,"4",-1)),n[7]||(n[7]=s("td",null,"6",-1)),n[8]||(n[8]=s("td",null,"7",-1)),n[9]||(n[9]=s("td",null,"9",-1)),n[10]||(n[10]=s("td",null,"9",-1)),n[11]||(n[11]=s("td",null,"3",-1)),n[12]||(n[12]=s("td",null,"13",-1))]),s("tr",null,[s("td",null,[s("mjx-container",b,[(t(),F("svg",E,n[13]||(n[13]=[p('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g>',1)]))),n[14]||(n[14]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"f"),s("mi",null,"i")])])],-1))])]),n[15]||(n[15]=s("td",null,"5",-1)),n[16]||(n[16]=s("td",null,"6",-1)),n[17]||(n[17]=s("td",null,"7",-1)),n[18]||(n[18]=s("td",null,"9",-1)),n[19]||(n[19]=s("td",null,"9",-1)),n[20]||(n[20]=s("td",null,"10",-1)),n[21]||(n[21]=s("td",null,"11",-1)),n[22]||(n[22]=s("td",null,"12",-1)),n[23]||(n[23]=s("td",null,"13",-1)),n[24]||(n[24]=s("td",null,"14",-1)),n[25]||(n[25]=s("td",null,"15",-1))])])]),n[37]||(n[37]=p(`<ul><li>We can only perform one activity after another has finished</li><li>What is the maximum number of activities that can be completed?</li><li>Note that activities are sorted according to finish times (earliest first)</li></ul><h3 id="_1-2-coding" tabindex="-1"><a class="header-anchor" href="#_1-2-coding"><span>1.2 Coding</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># s_i 代表第 i 个活动开始时间</span></span>
<span class="line"><span style="color:#F8F8F2;">f </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># f_i 代表第 i 个活动结束时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">count </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">last_finish_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> f[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;选择活动 1：开始时间=</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">s[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">,结束时间=</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">f[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(s)):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> s[i] </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> last_finish_time:</span></span>
<span class="line"><span style="color:#F8F8F2;">        count </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;选择活动</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1}</span><span style="color:#E6DB74;">：开始时间</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">s[i]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">,结束时间</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">f[i]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        last_finish_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> f[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最多可以完成的活动数量：&quot;</span><span style="color:#F8F8F2;">, count)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-3-伪代码" tabindex="-1"><a class="header-anchor" href="#_1-3-伪代码"><span>1.3 伪代码</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">activities ← [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">] 		</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> activity numbers</span></span>
<span class="line"><span style="color:#F8F8F2;">start_times ← [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">]		</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> start times</span></span>
<span class="line"><span style="color:#F8F8F2;">finish_times ← [</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">]	</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> end times</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AE81FF;">GREEDY</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">ACTIVITY</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">SELECTOR(a, s, f)</span></span>
<span class="line"><span style="color:#F8F8F2;">	n ← </span><span style="color:#AE81FF;">LENGTH</span><span style="color:#F8F8F2;"> a</span></span>
<span class="line"><span style="color:#F8F8F2;">	solution ← []</span></span>
<span class="line"><span style="color:#F8F8F2;">	solution ← solution </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> a[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]				</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> add first activity to solution</span></span>
<span class="line"><span style="color:#F8F8F2;">	k ← </span><span style="color:#AE81FF;">1</span><span style="color:#F92672;">							//</span><span style="color:#F8F8F2;"> counter</span></span>
<span class="line"><span style="color:#AE81FF;">	FOR</span><span style="color:#F8F8F2;"> m ← </span><span style="color:#AE81FF;">2</span><span style="color:#AE81FF;"> TO</span><span style="color:#F8F8F2;"> n					</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> iterate </span><span style="color:#F92672;">from</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;"> to length a</span></span>
<span class="line"><span style="color:#AE81FF;">		IF</span><span style="color:#F8F8F2;"> s[m] </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;">  f[k]				</span><span style="color:#F92672;">//</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> start time of lower activity </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> greater than</span></span>
<span class="line"><span style="color:#F92672;"> 										//or</span><span style="color:#F8F8F2;"> equal to end time of higher activity</span></span>
<span class="line"><span style="color:#F8F8F2;">			solution ← solution </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> a[m] 	</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> add lower activity to solution </span></span>
<span class="line"><span style="color:#F8F8F2;">			k ← m							</span></span>
<span class="line"><span style="color:#AE81FF;">	RETURN</span><span style="color:#F8F8F2;"> solution</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AE81FF;">GREEDY</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">ACTIVITY</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">SELECTOR(activities, start_times, finish_times)		</span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> call</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>代码实现：</p>`,6)),c(r,{id:"154",data:[{id:""},{id:"注释版"}]},{title0:a(({value:o,isActive:e})=>n[27]||(n[27]=[])),title1:a(({value:o,isActive:e})=>n[28]||(n[28]=[l("注释版")])),tab0:a(({value:o,isActive:e})=>n[29]||(n[29]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"activities "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"11"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"start_times "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"13"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"finish_times "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"11"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"12"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"13"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"14"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"15"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," greedy"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"activities"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"start_times"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"finish_times"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    n "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(activities)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    solution "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    solution.append(activities["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"])")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    count "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    k "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"(n):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," start_times[i] "),s("span",{style:{color:"#F92672"}},">="),s("span",{style:{color:"#F8F8F2"}}," finish_times[k]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                solution.append(activities[i])")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                k "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," i")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," solution")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(greedy(activities, start_times, finish_times))")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:o,isActive:e})=>n[30]||(n[30]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," greedy_activity_selector"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"activities"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"start_times"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"finish_times"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    """')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    根据活动的开始时间和结束时间，使用贪心算法选择最大数量的互不冲突的活动。")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    参数:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    activities (list): 活动编号的列表。")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    start_times (list): 每个活动的开始时间列表，与活动编号对应。")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    finish_times (list): 每个活动的结束时间列表，与活动编号对应。")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    返回:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    list: 被选择的活动编号列表，按选择顺序排列。")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    """')]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    n "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(activities)  "),s("span",{style:{color:"#88846F"}},"# 获取活动的数量")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    solution "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," [activities["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]]  "),s("span",{style:{color:"#88846F"}},"# 初始化解集，先将第一个活动添加进解集")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    k "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#88846F"}},"  # 记录当前选择的活动的索引，初始化为第一个活动")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 从第二个活动（索引1）开始遍历，逐个检查每个活动")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," m "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", n):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 检查当前活动的开始时间是否在上一个选择的活动结束之后")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果满足条件，则当前活动可以选择")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," start_times[m] "),s("span",{style:{color:"#F92672"}},">="),s("span",{style:{color:"#F8F8F2"}}," finish_times[k]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            solution.append(activities[m])  "),s("span",{style:{color:"#88846F"}},"# 将当前活动添加到解集中")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            k "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," m  "),s("span",{style:{color:"#88846F"}},"# 更新 k 为当前选择的活动索引，作为下次选择的基础")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," solution  "),s("span",{style:{color:"#88846F"}},"# 返回最终选择的活动列表")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义活动编号、每个活动的开始时间和结束时间")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"activities "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"11"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"start_times "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"13"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"finish_times "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"11"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"12"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"13"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"14"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"15"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 调用贪心活动选择器函数，计算并输出被选择的活动列表")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"selected_activities "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," greedy_activity_selector(activities, start_times, finish_times)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"被选择的活动:"'),s("span",{style:{color:"#F8F8F2"}},", selected_activities)  "),s("span",{style:{color:"#88846F"}},"# 输出被选择的活动编号")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),n[38]||(n[38]=p('<h2 id="_2-knapsack-problem" tabindex="-1"><a class="header-anchor" href="#_2-knapsack-problem"><span>2. Knapsack problem</span></a></h2><img src="'+d+`" alt="image-20241101112039730" style="zoom:50%;"><ul><li><p>A thief robbing a store finds 3 items:</p><ul><li>Item 1, 10 lbs, £60</li><li>Item 2, 20 lbs, £100</li><li>Item 3, 30 lbs, £120</li></ul></li><li><p>The thief wants to take as valuable load as possible but he can carry at most 50 lbs in his knapsack.</p></li><li><p>Which items should he take?</p></li></ul><h3 id="_2-1-思路" tabindex="-1"><a class="header-anchor" href="#_2-1-思路"><span>2.1 思路</span></a></h3><p>两种方法：贪心算法和动态规划。</p><ul><li><p>方法一：贪心算法（按单位重量价值排序）</p><ul><li>计算每件物品单位重量价值。 <ul><li>Item 1: 60/10 = 6</li><li>Item 2: 100/20 = 5</li><li>Item 3: 120/30 = 4</li></ul></li><li>按单位重量价值从高到低排序，优先选择单位价值高的物品。</li><li>依次放入背包中，直到重量达到限制。</li><li>选择过程： <ul><li>选择 Item 1, 10 lbs, 价值 60$</li><li>选择 Item 2, 20 lbs, 价值 100$</li><li>选择 Item 3, 30 lbs，会超重，因此不选 3</li><li>总价值 60 + 100 = 160$</li></ul></li></ul></li><li><p>方法二：动态规划</p><p>对于更复杂的背包问题或当哪个物品可以部分选取时，可以使用动态规划。然而，对于这种小规模的 0/1 的背包问题，贪心算法已经足够。</p></li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义物品的重量和价值</span></span>
<span class="line"><span style="color:#F8F8F2;">items </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span><span style="color:#E6DB74;">&quot;item&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;weight&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span><span style="color:#E6DB74;">&quot;item&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;weight&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span><span style="color:#E6DB74;">&quot;item&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;weight&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;value&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">120</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义背包的最大重量</span></span>
<span class="line"><span style="color:#F8F8F2;">max_weight </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 计算每个物品的单位重量价值并添加到字典</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> items:</span></span>
<span class="line"><span style="color:#F8F8F2;">    i[</span><span style="color:#E6DB74;">&quot;per_value&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i[</span><span style="color:#E6DB74;">&quot;value&quot;</span><span style="color:#F8F8F2;">]</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">i[</span><span style="color:#E6DB74;">&quot;weight&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 按单位重量价值从高到低对比物品排序</span></span>
<span class="line"><span style="color:#F8F8F2;">items.sort(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">:x[</span><span style="color:#E6DB74;">&#39;per_value&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">reverse</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化变量</span></span>
<span class="line"><span style="color:#F8F8F2;">total_value </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">current_weight </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">selected_item </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> items:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> current_weight </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> i[</span><span style="color:#E6DB74;">&quot;weight&quot;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> max_weight:</span></span>
<span class="line"><span style="color:#F8F8F2;">        selected_item.append(i[</span><span style="color:#E6DB74;">&quot;item&quot;</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">        current_weight </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> i[</span><span style="color:#E6DB74;">&quot;weight&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">        total_value </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> i[</span><span style="color:#E6DB74;">&quot;value&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;选择物品编号：&quot;</span><span style="color:#F8F8F2;">, selected_item)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;总价值：&quot;</span><span style="color:#F8F8F2;">, total_value)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;总重量：&quot;</span><span style="color:#F8F8F2;">, current_weight)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-max-root-to-leaf-greedy" tabindex="-1"><a class="header-anchor" href="#_3-max-root-to-leaf-greedy"><span>3. Max root to leaf ：Greedy</span></a></h2><h3 id="_3-1-中文带注释版代码" tabindex="-1"><a class="header-anchor" href="#_3-1-中文带注释版代码"><span>3.1 中文带注释版代码：</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">left</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">right</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 初始化二叉树节点，包含数据data，左子节点left和右子节点right</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> left</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> right</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> greedy_max_sum</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 定义贪心算法函数，用于在二叉树中找到一个从根节点到叶子节点的最大和路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root  </span><span style="color:#88846F;"># 当前节点初始化为根节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 存储路径的列表</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root.data  </span><span style="color:#88846F;"># 初始化总和为根节点的数据值</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution.append(root.data)  </span><span style="color:#88846F;"># 将根节点的数据添加到路径solution中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 循环条件：只要当前节点有左子节点或右子节点，继续循环</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> current_node.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> current_node.right </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">        # 如果当前节点既有左子节点也有右子节点</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> current_node.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> current_node.right </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">            # 比较左子节点和右子节点的数据值</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> current_node.left.data </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> current_node.right.data:</span></span>
<span class="line"><span style="color:#88846F;">                # 如果左子节点的值大于右子节点，则选择左子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">                solution.append(current_node.left.data)  </span><span style="color:#88846F;"># 将左子节点的值添加到路径solution中</span></span>
<span class="line"><span style="color:#F8F8F2;">                total_sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> current_node.left.data  </span><span style="color:#88846F;"># 将左子节点的值累加到总和total_sum中</span></span>
<span class="line"><span style="color:#F8F8F2;">                current_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_node.left  </span><span style="color:#88846F;"># 当前节点更新为左子节点</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">                # 如果右子节点的值大于或等于左子节点，则选择右子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">                solution.append(current_node.right.data)  </span><span style="color:#88846F;"># 将右子节点的值添加到路径solution中</span></span>
<span class="line"><span style="color:#F8F8F2;">                total_sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> current_node.right.data  </span><span style="color:#88846F;"># 将右子节点的值累加到总和total_sum中</span></span>
<span class="line"><span style="color:#F8F8F2;">                current_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_node.right  </span><span style="color:#88846F;"># 当前节点更新为右子节点</span></span>
<span class="line"><span style="color:#88846F;">        # 如果当前节点只有左子节点</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> current_node.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            solution.append(current_node.left.data)  </span><span style="color:#88846F;"># 将左子节点的值添加到路径solution中</span></span>
<span class="line"><span style="color:#F8F8F2;">            total_sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> current_node.left.data  </span><span style="color:#88846F;"># 将左子节点的值累加到总和total_sum中</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_node.left  </span><span style="color:#88846F;"># 当前节点更新为左子节点</span></span>
<span class="line"><span style="color:#88846F;">        # 如果当前节点只有右子节点</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            solution.append(current_node.right.data)  </span><span style="color:#88846F;"># 将右子节点的值添加到路径solution中</span></span>
<span class="line"><span style="color:#F8F8F2;">            total_sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> current_node.right.data  </span><span style="color:#88846F;"># 将右子节点的值累加到总和total_sum中</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_node.right  </span><span style="color:#88846F;"># 当前节点更新为右子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> solution, total_sum  </span><span style="color:#88846F;"># 返回路径solution和路径上的总和total_sum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 测试代码</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 创建一个测试的二叉树</span></span>
<span class="line"><span style="color:#F8F8F2;">    root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 调用greedy_max_sum函数并输出结果</span></span>
<span class="line"><span style="color:#F8F8F2;">    path, path_sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> greedy_max_sum(root)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;路径:&quot;</span><span style="color:#F8F8F2;">, path)  </span><span style="color:#88846F;"># 输出最大路径</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;路径和:&quot;</span><span style="color:#F8F8F2;">, path_sum)  </span><span style="color:#88846F;"># 输出最大路径和</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-2-原理" tabindex="-1"><a class="header-anchor" href="#_3-2-原理"><span>3.2 原理</span></a></h3><p>在一个二叉树中先从根节点开始计算最大权重的路径，比较根结点的左右节点，再比较每一个算入路径的节点的左右节点，选取大的那一个，直到叶节点。</p><h2 id="_4-max-root-to-leaf-optimal" tabindex="-1"><a class="header-anchor" href="#_4-max-root-to-leaf-optimal"><span>4. Max root to leaf: Optimal</span></a></h2><p>这样实现可以用于需要计算路径和长度，比如决策树中找到最高收益的路径，游戏中的路径选择，树状结构中的最优选择路径等。代码的整体功能是计算二叉树中从根到叶的最大路径和，并找出并打印出对应路径。这在树结构中是一种典型的问题，用于路径和的计算和路径的追踪。</p><h3 id="_4-1-注释代码" tabindex="-1"><a class="header-anchor" href="#_4-1-注释代码"><span>4.1 注释代码</span></a></h3>`,15)),c(r,{id:"305",data:[{id:"PPT 伪代码"},{id:"文件代码"}]},{title0:a(({value:o,isActive:e})=>n[31]||(n[31]=[l("PPT 伪代码")])),title1:a(({value:o,isActive:e})=>n[32]||(n[32]=[l("文件代码")])),tab0:a(({value:o,isActive:e})=>n[33]||(n[33]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"TreeNode"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"data"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"left"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"None"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"right"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"None"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 初始化一个树节点，包含数据（data）、左子节点（left）和右子节点（right）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," data")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".left "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," left")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".right "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," right")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," max_sum_root_to_leaf"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"cur_node"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 如果当前节点为空，则返回0，表示没有路径可走")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," cur_node:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 递归计算左子树的最大路径和")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," cur_node.left "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果左子节点不存在，将左侧最大和设为0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        max_sum_left "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果左子节点存在，则递归调用函数计算左子树的最大路径和")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        max_sum_left "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," max_sum_root_to_leaf(cur_node.left)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 递归计算右子树的最大路径和")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," cur_node.right "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果右子节点不存在，将右侧最大和设为0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        max_sum_right "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果右子节点存在，则递归调用函数计算右子树的最大路径和")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        max_sum_right "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," max_sum_root_to_leaf(cur_node.right)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 比较左右子树的最大路径和，选择其中较大的值并加上当前节点的值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," max_sum_left "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#F8F8F2"}}," max_sum_right:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果左子树的路径和较大，返回左子树路径和加上当前节点的数据值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," max_sum_left "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#F8F8F2"}}," cur_node.data")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果右子树的路径和较大或相等，返回右子树路径和加上当前节点的数据值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," max_sum_right "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#F8F8F2"}}," cur_node.data")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:o,isActive:e})=>n[34]||(n[34]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"Node"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 定义一个二叉树节点类")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"data"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 初始化节点，接收一个数据参数 data，并将其赋值给当前节点的 data 属性")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 同时初始化左右子节点为 None")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," data")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".left "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".right "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," None")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __repr__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 定义当节点对象被打印或转换为字符串时的表示，返回节点的数据")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," str"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F"}},"self"),s("span",{style:{color:"#F8F8F2"}},".data)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"'''")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        尝试每一个从根节点到叶节点的路径，只有路径和等于目标和时才是正确的路径")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"'''")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"result "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 用于存储符合条件的路径的全局变量")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 查找给定的路径和，并将结果保存到全局变量 'result' 中")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," print_max_sum_tree_path"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"root"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"summ"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 如果目标和为 0，说明已经找到一条路径，返回 True")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," summ "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," True")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 如果当前节点为空，返回 False，表示没有找到路径")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," root "),s("span",{style:{color:"#F92672"}},"is"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," False")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 递归调用左子节点，将当前节点的数据值从目标和中减去")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    left "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," print_max_sum_tree_path(root.left, summ "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," root.data)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 递归调用右子节点，将当前节点的数据值从目标和中减去")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    right "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," print_max_sum_tree_path(root.right, summ "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," root.data)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 如果左子树或右子树中有满足条件的路径，将当前节点数据插入到路径列表的开头")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," left "),s("span",{style:{color:"#F92672"}},"or"),s("span",{style:{color:"#F8F8F2"}}," right:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        result.insert("),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", root.data)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 返回左或右子树的递归结果，以确定是否存在一条符合条件的路径")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," left "),s("span",{style:{color:"#F92672"}},"or"),s("span",{style:{color:"#F8F8F2"}}," right")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1})])}const _=i(u,[["render",A]]),T=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week07.html","title":"高级算法——第7周ppt总结","lang":"zh-CN","frontmatter":{"title":"高级算法——第7周ppt总结","icon":"python","date":"2024-10-30T11:28:41.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1730448945000,"updatedTime":1731571707000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":4,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":9.06,"words":2719},"filePathRelative":"zh/Advanced_Algorithms/Week07.md","localizedDate":"2024年10月30日"}');export{_ as comp,T as data};

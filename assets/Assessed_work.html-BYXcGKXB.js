import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as e}from"./app-DT5duD8C.js";const o="/assets/image-20241104171553443-LsiazAlw.png",p={};function t(r,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="assessed-standard-task-1-5-selection-sort" tabindex="-1"><a class="header-anchor" href="#assessed-standard-task-1-5-selection-sort"><span>ASSESSED STANDARD TASK 1/5: Selection Sort</span></a></h2><h3 id="question" tabindex="-1"><a class="header-anchor" href="#question"><span>Question</span></a></h3><p>Selection sort works with two subarrays: the sorted section, and the unsorted section.</p><p>It works by taking the minimum value in the unsorted array, putting it at the end of the sorted array, and continuing until there is no unsorted array.</p><p>For example, starting with the unsorted array A:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">A </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">67</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We find the minimum value, and move it to the end of the unsorted array – which, first time round, is just the first element of A:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">A </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">67</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now 2 is the sorted subarray, and the unsorted subarray is everything else.</p><p>Next we find the smallest value in the unsorted subarray, and move it to the end of the sorted subarray:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">A </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">67</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now 2 and 9 are the sorted subarray, and again we look for the smallest value in the unsorted subarray and move that to the end of the sorted subarray:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">A </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">67</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>… and so on, until we have a sorted array:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">A</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">67</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here is the pseudocode for selection sort:</p><p><strong>SELECTION_SORT(A)</strong></p><p>​ <strong>FOR i TO length(A)-1</strong></p><p>​ <strong>min ← i</strong></p><p>​ <strong>FOR j ← i + 1 TO length(A)</strong></p><p>​ <strong>IF A[j] &lt; A[min]</strong></p><p>​ <strong>min ← j</strong></p><p>​ <strong>SWAP (A, i, min)</strong></p><p>​ <strong>RETURN A</strong></p><p>Implement this pseudocode in Python, or C++, or (if you like), both, adding comments as necessary. Be aware that min may be a protected term so you may need a different variable name e.g. minn. Note that a swap needs to be performed, and this, in the pseudocode, is the subfunction SWAP. You need to work out how to implement the swap. This does not have to be done using a subfunction: the swap could be implemented directly – the choice is yours.</p><h3 id="solution-1" tabindex="-1"><a class="header-anchor" href="#solution-1"><span>Solution 1</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># Create a new list for storing the sorted list</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># Iterate through the list from back to front</span></span>
<span class="line"><span style="color:#66D9EF;">        min</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> arr[i]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i):  </span><span style="color:#88846F;"># Iterate over all elements except i and find the minimum value</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[j] </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;"> min</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">                min</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> arr[j]</span></span>
<span class="line"><span style="color:#F8F8F2;">        result.append(</span><span style="color:#66D9EF;">min</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># Add the minimum value to the newly created list</span></span>
<span class="line"><span style="color:#F8F8F2;">    result.append(arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># Add the last remaining element to result(the list)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(selection_sort([</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="solution-2" tabindex="-1"><a class="header-anchor" href="#solution-2"><span>Solution 2</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):  </span><span style="color:#88846F;"># Iterate through the list from front to back</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):  </span><span style="color:#88846F;"># Find the smallest value in an unsorted list</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[j] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> arr[min_index]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[min_index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[min_index], arr[i]  </span><span style="color:#88846F;"># Swap the minimum value with i into the sorted list</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(selection_sort([</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="assessed-standard-task-2-5-find-method-for-binary-tree-class" tabindex="-1"><a class="header-anchor" href="#assessed-standard-task-2-5-find-method-for-binary-tree-class"><span><strong>Assessed Standard Task 2/5:</strong> Find method for Binary Tree class</span></a></h2><h3 id="question-1" tabindex="-1"><a class="header-anchor" href="#question-1"><span>Question</span></a></h3><p>From the pseudocode given in the lecture slides for Week 4, Data Structures 1, Slides 119 and 120, create 2 binary search methods, one iterative and one recursive, and implement these into the python Binary Tree class given on this week’s Aula in the zip folder, ‘BST-class’.</p><p>Call the iterative method find_i, and the recursive method find_r. Notice that find_r needs a sub-method. Call this _find_r.</p><p>Each method should return True, False, or None (note that the solution for ‘None’ is not given in the iterative pseudocode).</p><p>Add comments to show your understanding.</p><p>Check your code works by calling it and returning the correct result.</p><p>You may decide, if you wish, to implement the entire class and solutions in C++, instead of, or in addition to, the python solution, but this is not mandatory for this task.</p><h3 id="solution-1-iterative" tabindex="-1"><a class="header-anchor" href="#solution-1-iterative"><span>Solution 1 Iterative</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;Binary Tree Node Classes&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">BST</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">  # Initial binary tree</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        cur </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root  </span><span style="color:#88846F;"># nodes in a binary tree</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> cur:  </span><span style="color:#88846F;"># If you don&#39;t know how many loops there could be, a while loop is appropriate.</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> val:  </span><span style="color:#88846F;"># If the node is larger than the search value, the search value is in the left subtree of the node</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> cur.val </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> val:  </span><span style="color:#88846F;"># If the node is smaller than the search value, the search value is in the right subtree of the node</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># is equal to the search value, the loop ends</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> cur</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # Create a binary search tree manually</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> BST()</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # Test</span></span>
<span class="line"><span style="color:#F8F8F2;">    node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bst.search(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> node:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;The node was found with the value,the value is </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">node.val</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># Print the value of this node</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Node not be found&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="solution-2-recursive" tabindex="-1"><a class="header-anchor" href="#solution-2-recursive"><span>Solution 2 Recursive</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TreeNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;binary tree node class&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">BST</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.search(root.left, val)  </span><span style="color:#88846F;"># Continue searching the left subtree</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> root.val:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.search(root.right, val)  </span><span style="color:#88846F;"># Continue searching the right subtree</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> root  </span><span style="color:#88846F;"># Here the address of the node is returned instead of the value</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # Creating a binary search tree manually</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> BST()</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.left.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    bst.root.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> TreeNode(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # Test Finding Nodes</span></span>
<span class="line"><span style="color:#F8F8F2;">    node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bst.search(bst.root, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> node:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;The node was found with the value. </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">node.val</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># Print the value of this node</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Node not be found&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="assessed-standard-task-3-5-implement-graph-as-adjacency-matrix" tabindex="-1"><a class="header-anchor" href="#assessed-standard-task-3-5-implement-graph-as-adjacency-matrix"><span><strong>Assessed Standard Task 3/5</strong>: Implement Graph as Adjacency Matrix</span></a></h2><h3 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2"><span>Question</span></a></h3><p>where the vertices consist of positive integers (note that 0 is not a positive integer). The program should have methods for the following:</p><p>Adding a vertex to the graph.</p><p>Adding an edge to the graph.</p><p>This should check whether the edge already exists</p><p>Removing an edge from the graph.</p><p>Checking that there is an edge to remove</p><p>Printing the graph as a matrix.</p><p>Which should look something like this:</p><img src="`+o+`" alt="image-20241104171553443" style="zoom:50%;"><p>IMPORTANT:</p><ul><li>The code as given may need altering to allow the new methods to be introduced.</li><li>Edges can be removed with no need to worry about vertices.</li></ul><p>NOTE: If you wish, you could implement the entire code as C++ instead of, or in addition to, python. This is not mandatory for this task.</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GraphAdjMat</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Classes of undirected graphs based on adjacency matrix implementation&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">edges</span><span style="color:#F8F8F2;">: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]]):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;Vertex list, stores the vertex values in the graph, the element represents the “vertex value” and the index represents the “vertex index”.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;Adjacency matrix, a two-dimensional list representing the connections between vertices of a graph, with row and column indices corresponding to “vertex indices”.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # Iterate over the incoming vertex values and add them in order to the vertex list</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vertices:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_vertex(val)</span></span>
<span class="line"><span style="color:#88846F;">        # Iterate through the list of incoming edges, adding them in turn to the adjacency matrix</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_edge(e[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], e[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;number of the vertex in the graph&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        n </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#88846F;">        #  Adds the value of the new vertex to the vertex list</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.append(val)</span></span>
<span class="line"><span style="color:#88846F;">        # Create a new row (i.e., a state where the new vertex is connected to other vertices), initialized to 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_row </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # Add new rows to the adjacency matrix indicating the state of connectivity with other vertices</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.append(new_row)</span></span>
<span class="line"><span style="color:#88846F;">        # Iterate over the existing adjacency matrix, adding a new column to each row to indicate the addition of new vertices</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat[:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]: </span><span style="color:#88846F;"># The last line was just added, so no further changes are needed</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # Check if the index is out of bounds and throw an exception if it is</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Index </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> is out of range.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.pop(index)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.pop(index)</span></span>
<span class="line"><span style="color:#88846F;">        # Remove the corresponding column from the adjacency matrix, removing the connection of this vertex to other vertices</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.pop(index)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # Check if i or j is out pf bounds and throe an exception if it is</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;index </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> or </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> is out of range.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Cannot add edge </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> to itself.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # Check if i or j is out pf bounds and throe an exception if it is</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;index </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> or </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> is out of range.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Cannot add edge </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> to itself.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> print_matrix</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#88846F;">            # Splice the elements of a line into a string output, with each element separated by a space</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">.join(</span><span style="color:#66D9EF;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">, row)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Vertex list = &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;adjacency matrix = &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.print_matrix()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # Initialize the undirected graph</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="assessed-advanced-task-1-3-remove-method-for-binary-tree-class" tabindex="-1"><a class="header-anchor" href="#assessed-advanced-task-1-3-remove-method-for-binary-tree-class"><span><strong>Assessed Advanced Task 1/3</strong>: Remove method for Binary Tree class</span></a></h2><p>From the partial pseudocode given below (one case is omitted), implement an iterative method called remove which deletes a node and reorganises the tree. There are indications where the pseudocode is missing. NB the pseudocode crosses pages.</p><p>Add comments to show your understanding.</p><p>Implement your solution into the python Binary Tree class given on this week’s Aula in the zip folder, ‘BST-class’.</p><p>Make sure that remove works correctly; that is, not only is the target node deleted, but the tree is also correctly re-organised. If not, it may mean the pseudocode needs some detail adding.</p><p>You may decide, if you wish, to implement the entire class and solution in C++ instead of, or in addition to, the python solution, but this is not mandatory for this task.</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot; Node class</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Node</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot; BST class with insert and display methods. display pretty prints the tree</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">BinaryTree</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(data)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">._insert(data, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.root)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> _insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cur_node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> cur_node.data:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur_node.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur_node.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(data)</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">._insert(data, cur_node.left)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> cur_node.data:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur_node.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cur_node.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(data)</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">._insert(data, cur_node.right)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Value already present in tree&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> display</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cur_node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        lines, _, _, _ </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._display(cur_node)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> line </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> lines:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(line)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> _display</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cur_node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> cur_node.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> cur_node.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            line </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> cur_node.data</span></span>
<span class="line"><span style="color:#F8F8F2;">            width </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(line)</span></span>
<span class="line"><span style="color:#F8F8F2;">            height </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">            middle </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> width </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> [line], width, height, middle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> cur_node.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            lines, n, p, x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._display(cur_node.left)</span></span>
<span class="line"><span style="color:#F8F8F2;">            s </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> cur_node.data</span></span>
<span class="line"><span style="color:#F8F8F2;">            u </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(s)</span></span>
<span class="line"><span style="color:#F8F8F2;">            first_line </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39;_&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> s</span></span>
<span class="line"><span style="color:#F8F8F2;">            second_line </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;/&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> u) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">            shifted_lines </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [line </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> for</span><span style="color:#F8F8F2;"> line </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> lines]</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> [first_line, second_line] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> shifted_lines, n </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u, p </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">, n </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> cur_node.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            lines, n, p, x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._display(cur_node.right)</span></span>
<span class="line"><span style="color:#F8F8F2;">            s </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> cur_node.data</span></span>
<span class="line"><span style="color:#F8F8F2;">            u </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(s)</span></span>
<span class="line"><span style="color:#F8F8F2;">            first_line </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39;_&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">            second_line </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (u </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> x) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">\\\\</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">            shifted_lines </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [u </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> line </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> line </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> lines]</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> [first_line, second_line] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> shifted_lines, n </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u, p </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">, u </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        left, n, p, x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._display(cur_node.left)</span></span>
<span class="line"><span style="color:#F8F8F2;">        right, m, q, y </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._display(cur_node.right)</span></span>
<span class="line"><span style="color:#F8F8F2;">        s </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> cur_node.data</span></span>
<span class="line"><span style="color:#F8F8F2;">        u </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(s)</span></span>
<span class="line"><span style="color:#F8F8F2;">        first_line </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (x </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39;_&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> s </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39;_&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (m </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> y) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        second_line </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;/&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">\\\\</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (m </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> q:</span></span>
<span class="line"><span style="color:#F8F8F2;">            left </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> [n </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (q </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> p)</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> q </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> p:</span></span>
<span class="line"><span style="color:#F8F8F2;">            right </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> [m </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (p </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> q)</span></span>
<span class="line"><span style="color:#F8F8F2;">        zipped_lines </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(left, right)</span></span>
<span class="line"><span style="color:#F8F8F2;">        lines </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [first_line, second_line] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> [a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">*</span><span style="color:#E6DB74;"> &#39; &#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> a, b </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> zipped_lines]</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> lines, n </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u, </span><span style="color:#66D9EF;">max</span><span style="color:#F8F8F2;">(p, q) </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">, n </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># If the tree is empty, return immediately.</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root.data </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target:  </span><span style="color:#88846F;"># if tree root is target</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> or</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">                # If the tree root has no children, then \`root_child = None\`.</span></span>
<span class="line"><span style="color:#F8F8F2;">                root_child </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root.left </span><span style="color:#F92672;">or</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root.right</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root_child  </span><span style="color:#88846F;"># Directly delete the root node.</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.if_left_and_right(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.root)</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">            &quot;&quot;&quot;The tree root is not the target&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">            cur, parent </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.root, </span><span style="color:#AE81FF;">None</span></span>
<span class="line"><span style="color:#F92672;">            while</span><span style="color:#F8F8F2;"> cur </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> cur.data </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F8F8F2;">                parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> parent.data:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#F92672;">                elif</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> parent.data:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right</span></span>
<span class="line"><span style="color:#88846F;">            # The while loop has ended, and the target node has been found and stored in \`cur\`.</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> cur </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># case 1:Target not found</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#88846F;">  # end the function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> cur.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> cur.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">                # If \`cur\` has no children, then \`child = None\`.</span></span>
<span class="line"><span style="color:#F8F8F2;">                child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur.right </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> cur.left</span></span>
<span class="line"><span style="color:#88846F;">                # Delete the node \`cur\` and replace it with its left or right subtree in its position.</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> parent.data:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#F92672;">                else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    parent.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.if_left_and_right(cur)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> if_left_and_right</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># called if delete node whether root or otherwise</span></span>
<span class="line"><span style="color:#F8F8F2;">        pre </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"><span style="color:#F8F8F2;">        re_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.right</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> re_node.left </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            pre </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> re_node</span></span>
<span class="line"><span style="color:#F8F8F2;">            re_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> re_node.left</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        node.data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> re_node.data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> re_node.right </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pre.data </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> re_node.data:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pre.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> re_node.right</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pre.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> re_node.right</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pre.data </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> re_node.data:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pre.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pre.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># example calls, which construct and display the tree</span></span>
<span class="line"><span style="color:#F8F8F2;">bst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> BinaryTree()</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.insert(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">bst.remove(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">bst.display(bst.root)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="assessed-advanced-task-implement-a-concurrent-headline-scraper" tabindex="-1"><a class="header-anchor" href="#assessed-advanced-task-implement-a-concurrent-headline-scraper"><span>**Assessed Advanced Task <strong>Implement a concurrent headline scraper</strong></span></a></h2><p>In the lecture this week there is an example of a concurrent application that reports the size of the data at different URLs.</p><p>If you look at the folder ADVANCED-TASK-3-CODE, you will find a program which goes to a set of URLs and gets the first 5 headlines back. However, it does not do this concurrently.</p><p>Your task this week is the 3rd and final advanced viva task. All 5 standard tasks have been set, so this is your final task.</p><p>The task is to implement a concurrent version of the code in ADVANCED-TASK-3-CODE, which should do the same thing, but faster.</p><p>To do this, you should continue to use concurrent.futures, as well as the Python newspaper module. The major work is in integrating these two things so that they work properly.</p><p>You should check that the headlines are being retrieved correctly (both number and content). NB, it does not matter if some headlines turn out to be a section heading or other non-news content (which can happen, depending on how the news site has been organised).</p><p>You should use timeit (there’s an example in the code given) to compare and test the non-concurrent and concurrent versions. If the concurrent version is working properly, it should be faster than the non-concurrent version. The bigger the test number, the better the effect.</p><p>It may be useful to look at the documentation on concurrent.futures as well as newspaper.</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> newspaper</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> newspaper </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Article</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_headlines</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    URLs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;http://www.foxnews.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">            &#39;http://www.cnn.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">            &#39;http://www.derspiegel.de/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">            &#39;http://www.bbc.co.uk/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">            &#39;https://theguardian.com&#39;</span><span style="color:#F8F8F2;">,]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> URLs:</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newspaper.build(url, </span><span style="color:#FD971F;font-style:italic;">memoize_articles</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&#39;&#39;The headlines from </span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;"> are&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> url, </span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">            art </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result.articles[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">            art.download()</span></span>
<span class="line"><span style="color:#F8F8F2;">            art.parse()</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(art.title)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    import</span><span style="color:#F8F8F2;"> timeit</span></span>
<span class="line"><span style="color:#F8F8F2;">    elapsed_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> timeit.timeit(</span><span style="color:#E6DB74;">&quot;get_headlines()&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">setup</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;from __main__ import get_headlines&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">number</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">             </span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(elapsed_time)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h3><p>本程序旨在通过 Python 编程实现对新闻网站头条的爬取，并利用并发技术提升运行效率。代码中使用了 <code>newspaper</code> 模块进行新闻内容解析，并通过 <code>concurrent.futures</code> 模块实现多线程并发处理。我们对比了非并发版本与并发版本的性能，证明并发技术在 I/O 密集型任务中的显著优势。</p><h3 id="_2-使用模块和工具" tabindex="-1"><a class="header-anchor" href="#_2-使用模块和工具"><span>2. 使用模块和工具</span></a></h3><ol><li><strong><code>newspaper</code> 模块</strong>： <ul><li>用于从指定的新闻网站中抓取文章链接及其内容。</li><li>支持文章的下载、解析和标题提取。</li><li>示例方法： <ul><li><code>newspaper.build(url)</code>：从指定 URL 构建新闻资源对象。</li><li><code>art.download()</code>：下载文章内容。</li><li><code>art.parse()</code>：解析文章内容以提取标题等信息。</li></ul></li></ul></li><li><strong><code>concurrent.futures</code> 模块</strong>： <ul><li>用于简化并发编程，提供线程池和进程池接口。</li><li>在此代码中，使用 <code>ThreadPoolExecutor</code> 来实现多线程的并发任务。</li></ul></li><li><strong><code>timeit</code> 模块</strong>： <ul><li>用于测试代码块的运行时间，以评估性能差异。</li></ul></li></ol><h3 id="_3-非并发版本实现" tabindex="-1"><a class="header-anchor" href="#_3-非并发版本实现"><span>3. 非并发版本实现</span></a></h3><h4 id="_3-1-代码部分" tabindex="-1"><a class="header-anchor" href="#_3-1-代码部分"><span>3.1 代码部分</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_headlines</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    URLs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.foxnews.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.cnn.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.derspiegel.de/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.bbc.co.uk/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;https://theguardian.com&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> URLs:</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newspaper.build(url, </span><span style="color:#FD971F;font-style:italic;">memoize_articles</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">The headlines from </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">url</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> are:</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># 确保爬取5条头条</span></span>
<span class="line"><span style="color:#F92672;">            try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                art </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result.articles[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">                art.download()</span></span>
<span class="line"><span style="color:#F8F8F2;">                art.parse()</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(art.title)</span></span>
<span class="line"><span style="color:#F92672;">            except</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Less than 5 articles available on </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">url</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">                break</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_3-2-功能分析" tabindex="-1"><a class="header-anchor" href="#_3-2-功能分析"><span>3.2 功能分析</span></a></h4><ol><li><strong>URL 列表</strong>：定义了 5 个新闻网站的 URL，作为爬取的目标。</li><li>逐一处理： <ul><li>使用 <code>newspaper.build(url)</code> 构建新闻资源对象。</li><li>遍历前 5 条文章（索引 0-4），调用 <code>download()</code> 和 <code>parse()</code> 方法下载并解析文章内容。</li><li>打印提取的标题。</li></ul></li><li>异常处理： <ul><li>如果目标网站少于 5 篇文章，捕获 <code>IndexError</code> 并打印提示信息。</li></ul></li></ol><h4 id="_3-3-缺点" tabindex="-1"><a class="header-anchor" href="#_3-3-缺点"><span>3.3 缺点</span></a></h4><ul><li><strong>串行执行</strong>：每个 URL 的处理需要等待上一个完成，导致 I/O 阻塞时间较长。</li><li><strong>性能瓶颈</strong>：对于包含大量目标 URL 的任务，运行时间可能大幅增加。</li></ul><h3 id="_4-并发版本实现" tabindex="-1"><a class="header-anchor" href="#_4-并发版本实现"><span>4. 并发版本实现</span></a></h3><h4 id="_4-1-代码部分" tabindex="-1"><a class="header-anchor" href="#_4-1-代码部分"><span>4.1 代码部分</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_headlines_concurrently</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    URLs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.foxnews.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.cnn.com/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.derspiegel.de/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;http://www.bbc.co.uk/&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">        &#39;https://theguardian.com&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> fetch_headlines</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newspaper.build(url, </span><span style="color:#FD971F;font-style:italic;">memoize_articles</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            headlines </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># 确保爬取5条头条</span></span>
<span class="line"><span style="color:#F92672;">                try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    art </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result.articles[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">                    art.download()</span></span>
<span class="line"><span style="color:#F8F8F2;">                    art.parse()</span></span>
<span class="line"><span style="color:#F8F8F2;">                    headlines.append(art.title)</span></span>
<span class="line"><span style="color:#F92672;">                except</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                    break</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> url, headlines</span></span>
<span class="line"><span style="color:#F92672;">        except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> url, [</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Error fetching articles: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">e</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    with</span><span style="color:#F8F8F2;"> concurrent.futures.ThreadPoolExecutor() </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> executor:</span></span>
<span class="line"><span style="color:#F8F8F2;">        future_to_url </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {executor.submit(fetch_headlines, url): url </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> URLs}</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> future </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> concurrent.futures.as_completed(future_to_url):</span></span>
<span class="line"><span style="color:#F8F8F2;">            url, headlines </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> future.result()</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">The headlines from </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">url</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> are:</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> headline </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> headlines:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(headline)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_4-2-功能分析" tabindex="-1"><a class="header-anchor" href="#_4-2-功能分析"><span>4.2 功能分析</span></a></h4><ol><li><strong>定义 <code>fetch_headlines</code> 函数</strong>： <ul><li>封装每个 URL 的爬取逻辑： <ul><li>调用 <code>newspaper.build(url)</code> 创建资源对象。</li><li>遍历前 5 篇文章，爬取标题。</li><li>使用 <code>try-except</code> 捕获 <code>IndexError</code> 和其他异常。</li></ul></li><li>返回结果为 <code>(URL, headlines)</code>。</li></ul></li><li><strong>多线程并发爬取</strong>： <ul><li>使用 <code>ThreadPoolExecutor</code> 创建线程池。</li><li>利用 <code>executor.submit(fetch_headlines, url)</code> 将每个 URL 的爬取任务提交到线程池中。</li><li>使用 <code>concurrent.futures.as_completed()</code> 处理任务结果并打印每个网站的头条。</li></ul></li><li><strong>线程池的优势</strong>： <ul><li>并行化每个 URL 的爬取任务。</li><li>利用 CPU 等待时间执行其他任务，显著提升 I/O 密集型任务的效率。</li></ul></li></ol><h4 id="_4-3-异常处理" tabindex="-1"><a class="header-anchor" href="#_4-3-异常处理"><span>4.3 异常处理</span></a></h4><ul><li>捕获构建新闻资源对象或文章下载时的所有异常，避免程序因错误退出。</li></ul><h3 id="_5-性能对比" tabindex="-1"><a class="header-anchor" href="#_5-性能对比"><span><strong>5. 性能对比</strong></span></a></h3><h4 id="_5-1-代码部分" tabindex="-1"><a class="header-anchor" href="#_5-1-代码部分"><span>5.1 代码部分</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 非并发版本运行时间</span></span>
<span class="line"><span style="color:#F8F8F2;">    non_concurrent_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> timeit.timeit(</span><span style="color:#E6DB74;">&quot;get_headlines()&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">setup</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;from __main__ import get_headlines&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">number</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Non-concurrent version average time: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">non_concurrent_time</span><span style="color:#66D9EF;font-style:italic;">:.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 并发版本运行时间</span></span>
<span class="line"><span style="color:#F8F8F2;">    concurrent_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> timeit.timeit(</span><span style="color:#E6DB74;">&quot;get_headlines_concurrently()&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">setup</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;from __main__ import get_headlines_concurrently&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">number</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Concurrent version average time: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">concurrent_time</span><span style="color:#66D9EF;font-style:italic;">:.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-功能分析" tabindex="-1"><a class="header-anchor" href="#_5-2-功能分析"><span>5.2 功能分析</span></a></h4><ol><li><strong>非并发运行时间</strong>：调用 <code>get_headlines()</code>，计算多次运行的平均时间。</li><li><strong>并发运行时间</strong>：调用 <code>get_headlines_concurrently()</code>，计算多次运行的平均时间。</li><li>性能评估： <ul><li>理论上，并发版本的运行时间显著低于非并发版本。</li><li>I/O 密集型任务（如网络请求）更能体现并发的优势。</li></ul></li></ol><h3 id="_6-结果示例和分析" tabindex="-1"><a class="header-anchor" href="#_6-结果示例和分析"><span><strong>6. 结果示例和分析</strong></span></a></h3><h4 id="_6-1-示例输出" tabindex="-1"><a class="header-anchor" href="#_6-1-示例输出"><span>6.1 示例输出</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>Non-concurrent version average time: 10.25 seconds</span></span>
<span class="line"><span>Concurrent version average time: 4.12 seconds</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-2-结果分析" tabindex="-1"><a class="header-anchor" href="#_6-2-结果分析"><span>6.2 结果分析</span></a></h4><ul><li>非并发版本因串行处理每个 URL，导致总运行时间为各任务运行时间的总和。</li><li>并发版本利用线程池并行处理多个 URL，同时下载、解析文章，显著缩短运行时间。</li><li>在 URL 数量较多或网络延迟较大时，并发性能优势更为显著。</li></ul><h3 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h3><p>通过对比非并发与并发版本的运行效率，可以得出以下结论：</p><ol><li><strong>并发技术的必要性</strong>：在处理 I/O 密集型任务（如网络爬取）时，并发技术能够充分利用等待时间执行其他任务，从而显著提高整体效率。</li><li><strong>代码模块化设计</strong>：通过封装爬取逻辑为函数并结合线程池，使代码具备更高的可读性和可扩展性。</li><li><strong>应用场景</strong>：本程序适用于需要快速抓取多网站数据的场景，如新闻聚合器、实时数据分析等。</li></ol>`,104)]))}const i=n(p,[["render",t]]),y=JSON.parse('{"path":"/zh/Advanced_Algorithms/Assessed_work.html","title":"高级算法作业第一版代码","lang":"zh-CN","frontmatter":{"title":"高级算法作业第一版代码","icon":"python","date":"2024-10-18T15:18:51.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法大作业"],"tag":["大三上","高级算法大作业"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1729244229000,"updatedTime":1734943421000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":6,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":13.23,"words":3969},"filePathRelative":"zh/Advanced_Algorithms/Assessed_work.md","localizedDate":"2024年10月18日"}');export{i as comp,y as data};

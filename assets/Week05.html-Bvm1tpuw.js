import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,e as r,a as s,w as p,d as l,r as y,o}from"./app-C6Ab6rwu.js";const T="/assets/9cdd35b89f017388e6b2725a225615f-Cfyrsj0S.jpg",Q="/assets/image-20241022092111265-sKlUYlHt.png",m="/assets/image-20241022092414352-Dq5PqM64.png",v="/assets/a8238cea212f9079fe15879158dbe56-COof6BBk.png",u="/assets/image-20241023083841199-DXZcjk82.png",b="/assets/4dc4d8dbd8dd0c0181e7a40cadc3fdd-DpfrU6lk.jpg",f="/assets/31a029d30e2e75665147d0aae04973b-BQw1A8NE.jpg",h="/assets/3ad4e4ef093fc5301406c9b94abedd8-CMV2Y_1z.png",E="/assets/012ade3e46371fb2e40d57d0e2f9d01-CNN9uPq-.png",g="/assets/72e8bbd7617635b95ffa14dc842af14-CVtA5Wr1.png",D="/assets/74ff6bd106acdc616530b51282e72c6-B4Qz_zBJ.png",H="/assets/8ea7e612ca1db1cca4de43a05c94d9b-CECUcwbx.png",x="/assets/0696f56e224a0f4f2949eb582a5c172-A5PQo89n.png",A="/assets/2298620d0f59ba179e5aed2ad41bb9c-DFCi_80w.png",V="/assets/1ce52674e82763b903498349c279cd1-vLYl5OGg.png",L="/assets/5572e2bbb2deadaea4e73c3729ecd04-C0B2hHzn.png",M="/assets/d805f81b8d92e84b3efee83282a5fe8-DutBxPcv.png",k="/assets/6352a75b8d5b68eb1bb97e33a0c0775-D7cXzzdq.png",q="/assets/aa786870cd3b6501cbd39b844b6b0eb-R2yb-jxn.png",w="/assets/e0fc5da377bae5ce13b430e5744eac1-CZL3ELy3.png",Z={},B={class:"MathJax",jax:"SVG",style:{position:"relative"}},_={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},j={class:"MathJax",jax:"SVG",style:{position:"relative"}},C={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},N={class:"MathJax",jax:"SVG",style:{position:"relative"}},S={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},z={class:"MathJax",jax:"SVG",style:{position:"relative"}},O={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},G={class:"MathJax",jax:"SVG",style:{position:"relative"}},J={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},P={class:"MathJax",jax:"SVG",style:{position:"relative"}},I={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},X={class:"MathJax",jax:"SVG",style:{position:"relative"}},Y={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},K={class:"MathJax",jax:"SVG",style:{position:"relative"}},U={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},W={class:"MathJax",jax:"SVG",style:{position:"relative"}},R={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},$={class:"MathJax",jax:"SVG",style:{position:"relative"}},ss={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},ns={class:"MathJax",jax:"SVG",style:{position:"relative"}},ls={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},as={class:"MathJax",jax:"SVG",style:{position:"relative"}},es={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},os={class:"MathJax",jax:"SVG",style:{position:"relative"}},ps={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},ts={class:"MathJax",jax:"SVG",style:{position:"relative"}},Fs={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},rs={class:"MathJax",jax:"SVG",style:{position:"relative"}},cs={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},is={class:"MathJax",jax:"SVG",style:{position:"relative"}},ys={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.023ex",height:"1.579ex",role:"img",focusable:"false",viewBox:"0 -676 1778 698","aria-hidden":"true"},ds={class:"MathJax",jax:"SVG",style:{position:"relative"}},Ts={style:{"vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.507ex",role:"img",focusable:"false",viewBox:"0 -666 500 666","aria-hidden":"true"},Qs={class:"MathJax",jax:"SVG",style:{position:"relative"}},ms={style:{"vertical-align":"-0.816ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.795ex",height:"2.773ex",role:"img",focusable:"false",viewBox:"0 -864.9 793.6 1225.5","aria-hidden":"true"},vs={class:"MathJax",jax:"SVG",style:{position:"relative"}},us={style:{"vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.507ex",role:"img",focusable:"false",viewBox:"0 -666 500 666","aria-hidden":"true"},bs={class:"MathJax",jax:"SVG",style:{position:"relative"}},fs={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},hs={class:"MathJax",jax:"SVG",style:{position:"relative"}},Es={style:{"vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.934ex",height:"2.057ex",role:"img",focusable:"false",viewBox:"0 -704 2623 909","aria-hidden":"true"},gs={class:"MathJax",jax:"SVG",style:{position:"relative"}},Ds={style:{"vertical-align":"-0.439ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.063ex",height:"1.971ex",role:"img",focusable:"false",viewBox:"0 -677 4006 871","aria-hidden":"true"},Hs={class:"MathJax",jax:"SVG",style:{position:"relative"}},xs={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"23.005ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 10168.3 1000","aria-hidden":"true"},As={class:"MathJax",jax:"SVG",style:{position:"relative"}},Vs={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.151ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2276.6 1000","aria-hidden":"true"},Ls={class:"MathJax",jax:"SVG",style:{position:"relative"}},Ms={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.151ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2276.6 1000","aria-hidden":"true"},ks={class:"MathJax",jax:"SVG",style:{position:"relative"}},qs={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},ws={class:"MathJax",jax:"SVG",style:{position:"relative"}},Zs={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"11.312ex",height:"1.579ex",role:"img",focusable:"false",viewBox:"0 -676 5000 698","aria-hidden":"true"},Bs={class:"MathJax",jax:"SVG",style:{position:"relative"}},_s={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 500 688","aria-hidden":"true"},js={class:"MathJax",jax:"SVG",style:{position:"relative"}},Cs={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.554ex",role:"img",focusable:"false",viewBox:"0 -665 500 687","aria-hidden":"true"},Ns={class:"MathJax",jax:"SVG",style:{position:"relative"}},Ss={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.554ex",role:"img",focusable:"false",viewBox:"0 -665 500 687","aria-hidden":"true"},zs={class:"MathJax",jax:"SVG",style:{position:"relative"}},Os={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 500 688","aria-hidden":"true"},Gs={class:"MathJax",jax:"SVG",style:{position:"relative"}},Js={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.554ex",role:"img",focusable:"false",viewBox:"0 -665 500 687","aria-hidden":"true"},Ps={class:"MathJax",jax:"SVG",style:{position:"relative"}},Is={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 500 688","aria-hidden":"true"},Xs={class:"MathJax",jax:"SVG",display:"true",style:{position:"relative"}},Ys={style:{"vertical-align":"-3.507ex"},xmlns:"http://www.w3.org/2000/svg",width:"50.938ex",height:"8.145ex",role:"img",focusable:"false",viewBox:"0 -2050 22514.6 3600","aria-hidden":"true"},Ks={class:"MathJax",jax:"SVG",style:{position:"relative"}},Us={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1000 688","aria-hidden":"true"},Ws={class:"MathJax",jax:"SVG",display:"true",style:{position:"relative"}},Rs={style:{"vertical-align":"-3.507ex"},xmlns:"http://www.w3.org/2000/svg",width:"50.938ex",height:"8.145ex",role:"img",focusable:"false",viewBox:"0 -2050 22514.6 3600","aria-hidden":"true"};function $s(sn,n){const c=y("Tabs"),i=y("CodeTabs");return o(),e("div",null,[n[170]||(n[170]=a(`<h2 id="_1-stacks" tabindex="-1"><a class="header-anchor" href="#_1-stacks"><span>1. Stacks</span></a></h2><p>栈（stack）是一种遵循先入后出逻辑的线性数据结构。</p><p>我们可以将栈类比为桌面上的一摞盘子，如果想取出底部的盘子，则需要先将上面的盘子依次移走。我们将盘子替换为各种类型的元素（如整数、字符、对象等），就得到了栈这种数据结构。</p><p>我们把堆叠元素的顶部称为“栈顶”，底部称为“栈底”。将把元素添加到栈顶的操作叫作“入栈”，删除栈顶元素的操作叫作“出栈”。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Stack</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.stack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> is_empty</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 判断栈是否为空</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.stack) </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> push</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 入栈操作，将元素添加到栈顶</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.stack.append(item)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> pop</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 出栈操作，弹出栈顶元素</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F92672;"> not</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.is_empty():</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.stack.pop()</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;pop from an empty stack&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 手动报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> peek</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 查看栈顶元素但不弹出</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F92672;"> not</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.is_empty():</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.stack[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;empty stack&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 手动报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 返回栈的大小</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.stack)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例</span></span>
<span class="line"><span style="color:#F8F8F2;">stack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Stack()</span></span>
<span class="line"><span style="color:#F8F8F2;">stack.push(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">stack.push(</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">stack.push(</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;栈顶元素:&quot;</span><span style="color:#F8F8F2;">, stack.peek())  </span><span style="color:#88846F;"># 输出 30</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;栈大小:&quot;</span><span style="color:#F8F8F2;">, stack.size())  </span><span style="color:#88846F;"># 输出 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">stack.pop()  </span><span style="color:#88846F;"># 弹出 30</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;弹出后的栈顶元素:&quot;</span><span style="color:#F8F8F2;">, stack.peek())  </span><span style="color:#88846F;"># 输出 20</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># output</span></span>
<span class="line"><span style="color:#F8F8F2;">栈顶元素: </span><span style="color:#AE81FF;">30</span></span>
<span class="line"><span style="color:#F8F8F2;">栈大小: </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">弹出后的栈顶元素: </span><span style="color:#AE81FF;">20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_2-queues" tabindex="-1"><a class="header-anchor" href="#_2-queues"><span>2. Queues</span></a></h2><p>队列（queue）是一种遵循先入先出规则的线性数据结构。顾名思义，队列模拟了排队现象，即新来的人不断加入队列尾部，而位于队列头部的人逐个离开。</p><p>我们将队列头部称为“队首”，尾部称为“队尾”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Queue</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> is_empty</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 判断队列是否为空</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.queue) </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> enqueue</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 入队操作，将元素添加到队列末尾</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.queue.append(item)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dequeue</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 出队操作，移除并返回队列头部的元素</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F92672;"> not</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.is_empty():</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;pop from an empty queue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> front</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 返回队列头部元素但不移除</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F92672;"> not</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.is_empty():</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.queue[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;empty queue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 返回队列的大小</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.queue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例</span></span>
<span class="line"><span style="color:#F8F8F2;">queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Queue()</span></span>
<span class="line"><span style="color:#F8F8F2;">queue.enqueue(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">queue.enqueue(</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">queue.enqueue(</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;队列头部元素:&quot;</span><span style="color:#F8F8F2;">, queue.front())  </span><span style="color:#88846F;"># 输出 10</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;队列大小:&quot;</span><span style="color:#F8F8F2;">, queue.size())      </span><span style="color:#88846F;"># 输出 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">queue.dequeue()  </span><span style="color:#88846F;"># 移除 10</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;移除后的队列头部元素:&quot;</span><span style="color:#F8F8F2;">, queue.front())  </span><span style="color:#88846F;"># 输出 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-list" tabindex="-1"><a class="header-anchor" href="#_3-list"><span>3. List</span></a></h2><p>链表（Linked List）是一种线性数据结构，其中的每一个元素都是一个节点对象，各个节点通过“引用”相连接，引用记录了下一个节点的内存地址，通过它可以从当前的节点访问到下一个节点。链表的设计使得各个节点可以分散存储在内存的各处，他们的内存地址无需连接。</p><img src="`+T+'" alt="9cdd35b89f017388e6b2725a225615f" style="zoom:33%;"><h3 id="_3-1-基础代码" tabindex="-1"><a class="header-anchor" href="#_3-1-基础代码"><span>3.1 基础代码</span></a></h3><p>单向链表</p>',14)),r(c,{id:"36",data:[{id:"构建元素"},{id:"连接元素"}]},{title0:p(({value:t,isActive:F})=>n[0]||(n[0]=[l("构建元素")])),title1:p(({value:t,isActive:F})=>n[1]||(n[1]=[l("连接元素")])),tab0:p(({value:t,isActive:F})=>n[2]||(n[2]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"ListNode"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"value"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".value "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," value")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".next: ListNode "),s("span",{style:{color:"#F92672"}},"|"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," None")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n0 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("ul",null,[s("li",null,[s("p",null,"Python tutor"),s("img",{src:Q,alt:"image-20241022092111265",style:{zoom:"25%"}})])],-1)])),tab1:p(({value:t,isActive:F})=>n[3]||(n[3]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"ListNode"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"value"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".value "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," value")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".next: ListNode "),s("span",{style:{color:"#F92672"}},"|"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," None")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n0 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ListNode("),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n0.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n1")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"n1.next "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," n2")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("ul",null,[s("li",null,[s("p",null,"Python tutor"),s("img",{src:m,alt:"image-20241022092414352",style:{zoom:"25%"}})])],-1)])),_:1}),n[171]||(n[171]=s("p",null,"双向链表",-1)),r(c,{id:"63",data:[]}),n[172]||(n[172]=a('<img src="'+v+`" alt="a8238cea212f9079fe15879158dbe56" style="zoom:33%;"><h3 id="_3-2-插入" tabindex="-1"><a class="header-anchor" href="#_3-2-插入"><span>3.2 插入</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ListNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.next: ListNode </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> insert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n0</span><span style="color:#F8F8F2;">: ListNode, </span><span style="color:#FD971F;font-style:italic;">P</span><span style="color:#F8F8F2;">: ListNode):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;在链表的节点 n0 之后插入节点 P&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n0.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    P.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n1</span></span>
<span class="line"><span style="color:#F8F8F2;">    n0.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> P</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">n0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n0.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n1</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n2</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n3</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-3-删除" tabindex="-1"><a class="header-anchor" href="#_3-3-删除"><span>3.3 删除</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ListNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.next: ListNode </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> remove</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n0</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> n0.next </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        n0.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n0.next.next</span></span>
<span class="line"><span style="color:#F92672;">        return</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化链表的各个节点</span></span>
<span class="line"><span style="color:#F8F8F2;">n0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n0.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n1</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n2</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n3</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 删除 n2</span></span>
<span class="line"><span style="color:#F8F8F2;">remove(n0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-4-查找索引" tabindex="-1"><a class="header-anchor" href="#_3-4-查找索引"><span>3.4 查找索引</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ListNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.next: ListNode </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> access</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">head</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(index):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> head </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            head </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head.next</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化链表的各个节点</span></span>
<span class="line"><span style="color:#F8F8F2;">n0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n0.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n1</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n2</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n3</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n4</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 访问节点</span></span>
<span class="line"><span style="color:#F8F8F2;">node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> access(n0, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;链表中索引 1 处的节点的值为</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">node.value</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-5-查找值" tabindex="-1"><a class="header-anchor" href="#_3-5-查找值"><span>3.5 查找值</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ListNode</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.next: ListNode </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">head</span><span style="color:#F8F8F2;">: ListNode, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    index </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> head </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> head.value </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> index</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            head </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head.next</span></span>
<span class="line"><span style="color:#F8F8F2;">            index </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">n0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">n0.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n1</span></span>
<span class="line"><span style="color:#F8F8F2;">n1.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n2</span></span>
<span class="line"><span style="color:#F8F8F2;">n2.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n3</span></span>
<span class="line"><span style="color:#F8F8F2;">n3.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">find_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> find(n0, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;找到首个值为 1 的节点，在链表的</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">find_index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">号位&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_4-图" tabindex="-1"><a class="header-anchor" href="#_4-图"><span>4. 图</span></a></h2><p>图（graph）是一种非线性数据结构，有顶点（vertex）和边（edge）组成。</p><p>我们可以将图 G 抽象的表示为一组顶点 V 和一组边 E 的集合。</p><p>以下示例展示了一个包含 5 个顶点和 7 条边的图。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">V </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">E </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)}</span></span>
<span class="line"><span style="color:#F8F8F2;">G </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {V, E}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将顶点看作节点，将边看作连接各个节点的引用（指针），我们就可以将图看作一种从链表扩展而来的数据结构。</p><p>相较于线性关系（链表）和分治关系（树），网络关系（图）的自由度更高，因而更加复杂。</p><h3 id="_4-1-术语" tabindex="-1"><a class="header-anchor" href="#_4-1-术语"><span>4.1 术语</span></a></h3><ul><li><p>有向图：边有指向，有方向，例如微信和 QQ 的好友关系</p></li><li><p>无向图：边无指向，无方向。</p></li><li><p>连通图：从某个一个顶点出发到任意一个顶点的路径都连通。</p></li><li><p>非连通图：从某一个顶点出发，至少有一个顶点无法到达。</p></li><li><p>有权图：每一条边都附带一个对应的数值。</p><img src="`+u+'" alt="image-20241023083841199" style="zoom:33%;"><p>​ 图 1-1</p></li><li><p>邻接：比如图 1-1 ，0与1和3邻接。</p></li><li><p>路径：从顶点 A 到顶点 B 经过的边构成的序列被称为 A 到 B 的路径。</p></li><li><p>度：</p><ul><li>无向图：一个顶点拥有的边数。</li><li>有向图：分为入度和出度。</li></ul></li><li><p>邻接矩阵：设图的顶点数为 n ，邻接矩阵使用一个 n X n 的大小矩阵来表示图，每一行（列）代表一个顶点，矩阵元素代表边，用 1 或 0 表示两顶点之间是否存在边。</p><p>例子：设邻接矩阵为 M，顶点列表为 V，那么矩阵元素 M {i, j} = 1 表示顶点V[i] 到顶点V[j]之间存在的边，反之 M[i,j] = 0 表示两顶点之间无边。</p></li></ul><img src="'+b+'" alt="4dc4d8dbd8dd0c0181e7a40cadc3fdd" style="zoom:25%;"><p>​ 图 1-2</p><p>邻接矩阵特点：</p><ol><li>顶点不能与自身相连，因此邻接矩阵主对角线元素没有意义。</li><li>对于无向图，两个方向的边等价，此时邻接矩阵关于主对角线对称</li><li>将邻接矩阵的元素从 1 到 哦替换为权重，则可表示有权图</li></ol><ul><li><p>邻接表</p><img src="'+f+'" alt="31a029d30e2e75665147d0aae04973b" style="zoom:25%;"></li></ul><h3 id="_4-2-基于邻接矩阵的变换" tabindex="-1"><a class="header-anchor" href="#_4-2-基于邻接矩阵的变换"><span>4.2 基于邻接矩阵的变换</span></a></h3>',24)),r(c,{id:"206",data:[{id:"Step 1"},{id:"Step 2"},{id:"Step 3"},{id:"Step 4"},{id:"Step 5"}]},{title0:p(({value:t,isActive:F})=>n[4]||(n[4]=[l("Step 1")])),title1:p(({value:t,isActive:F})=>n[5]||(n[5]=[l("Step 2")])),title2:p(({value:t,isActive:F})=>n[6]||(n[6]=[l("Step 3")])),title3:p(({value:t,isActive:F})=>n[7]||(n[7]=[l("Step 4")])),title4:p(({value:t,isActive:F})=>n[8]||(n[8]=[l("Step 5")])),tab0:p(({value:t,isActive:F})=>n[9]||(n[9]=[s("img",{src:h,alt:"3ad4e4ef093fc5301406c9b94abedd8",style:{zoom:"50%"}},null,-1)])),tab1:p(({value:t,isActive:F})=>n[10]||(n[10]=[s("img",{src:E,alt:"012ade3e46371fb2e40d57d0e2f9d01",style:{zoom:"50%"}},null,-1)])),tab2:p(({value:t,isActive:F})=>n[11]||(n[11]=[s("img",{src:g,alt:"72e8bbd7617635b95ffa14dc842af14",style:{zoom:"50%"}},null,-1),s("p",null,null,-1)])),tab3:p(({value:t,isActive:F})=>n[12]||(n[12]=[s("img",{src:D,alt:"74ff6bd106acdc616530b51282e72c6",style:{zoom:"50%"}},null,-1)])),tab4:p(({value:t,isActive:F})=>n[13]||(n[13]=[s("img",{src:H,alt:"8ea7e612ca1db1cca4de43a05c94d9b",style:{zoom:"50%"}},null,-1)])),_:1}),n[173]||(n[173]=a(`<div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GraphAdjMat</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;基于邻接矩阵实现的无向图类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">edges</span><span style="color:#F8F8F2;">: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]]):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;构造方法，初始化图，接收顶点和边的列表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 顶点列表，存储图中的顶点值，元素代表“顶点值”，索引代表“顶点索引”</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # 邻接矩阵，用二维列表表示图的顶点之间的连接情况，行列索引对应“顶点索引”</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # 遍历传入的顶点值，依次添加到顶点列表中</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vertices:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_vertex(val)</span></span>
<span class="line"><span style="color:#88846F;">        # 遍历传入的边列表，依次在邻接矩阵中添加这些边</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_edge(e[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], e[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;获取顶点数量&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 返回顶点列表的长度，即图中顶点的数量</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加顶点&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 获取当前图的顶点数量，方便扩展邻接矩阵</span></span>
<span class="line"><span style="color:#F8F8F2;">        n </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#88846F;">        # 将新顶点的值添加到顶点列表中</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.append(val)</span></span>
<span class="line"><span style="color:#88846F;">        # 创建一个新的行（即新顶点与其他顶点的连接状态），初始化为 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_row </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 新行需要有 n+1 列，因为新增了一个顶点</span></span>
<span class="line"><span style="color:#88846F;">        # 将新行添加到邻接矩阵中，表示与其他顶点的连接状态</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.append(new_row)</span></span>
<span class="line"><span style="color:#88846F;">        # 遍历现有的邻接矩阵，为每一行添加一个新列，表示新顶点的加入</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat[:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:  </span><span style="color:#88846F;"># 最后一行是刚刚添加的，因此不需要再修改</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除指定索引的顶点&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 检查索引是否越界，如果越界则抛出异常</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 超出范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # 从顶点列表中移除索引为 index 的顶点</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.pop(index)</span></span>
<span class="line"><span style="color:#88846F;">        # 从邻接矩阵中移除对应的行，表示删除该顶点的所有连接</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.pop(index)</span></span>
<span class="line"><span style="color:#88846F;">        # 从邻接矩阵中移除对应的列，删除该顶点与其他顶点的连接</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.pop(index)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加边&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 检查顶点索引 i 和 j 是否越界</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 或 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 超出范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # 检查是否尝试添加自环（即从顶点 i 到自身的边）</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;不允许添加从顶点 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 到自身的边。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # 在无向图中，邻接矩阵关于主对角线对称，因此需要设置两个位置的值为 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除边&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 检查顶点索引 i 和 j 是否越界</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 或 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 超出范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # 检查是否尝试删除自环</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;不允许删除从顶点 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 到自身的边。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # 删除边，在邻接矩阵中将两个位置的值设为 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> print_matrix</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印邻接矩阵&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 遍历邻接矩阵的每一行</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#88846F;">            # 将行中的元素拼接成字符串输出，每个元素之间用空格分隔</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">.join(</span><span style="color:#66D9EF;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">, row)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印顶点列表和邻接矩阵&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 输出顶点列表</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;顶点列表 =&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"><span style="color:#88846F;">        # 输出邻接矩阵的标题</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;邻接矩阵 =&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">        # 调用内部的 print_matrix 方法，输出矩阵内容</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.print_matrix()</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化无向图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加边</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 1, 2 的索引分别为 0, 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除边</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 1, 3 的索引分别为 0, 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.remove_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加顶点</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.add_vertex(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除顶点</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 3 的索引为 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.remove_vertex(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-3-dfs" tabindex="-1"><a class="header-anchor" href="#_4-3-dfs"><span>4.3 DFS</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GraphAdjMat</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;基于邻接矩阵实现的无向图类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">edges</span><span style="color:#F8F8F2;">: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]]):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 顶点列表，元素代表“顶点值”，索引代表“顶点索引”</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # 邻接矩阵，行列索引对应“顶点索引”</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # 添加顶点</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vertices:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_vertex(val)</span></span>
<span class="line"><span style="color:#88846F;">        # 添加边</span></span>
<span class="line"><span style="color:#88846F;">        # 请注意，edges 元素代表顶点索引，即对应 vertices 元素索引</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_edge(e[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], e[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;获取顶点数量&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加顶点&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        n </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.append(val)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_row </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (n</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.append(new_row)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat[:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除顶点&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">超出范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.pop(index)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.pop(index)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.pop(index)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加边&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">和</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">超储范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;不允许添加从顶点</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">到自身的边&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除边&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j</span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">和</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">超储范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;不允许删除从顶点</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">到自身的边&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> print_matrix</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印邻接矩阵&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">.join(</span><span style="color:#66D9EF;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">, row)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印邻接矩阵和顶点列表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;顶点列表 =&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;邻接矩阵 =&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.print_matrix()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dfs_recursive</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">visited</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">bool</span><span style="color:#F8F8F2;">]):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;递归方式实现 DFS&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    visited[start] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span><span style="color:#88846F;">  # 标记当前顶点为已访问</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices[start], </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 输出当前顶点</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#88846F;">    # 遍历所有与当前顶点相连的顶点</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> neighbor, is_connected </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.adj_mat[start]):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> is_connected </span><span style="color:#F92672;">and</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> visited[neighbor]:  </span><span style="color:#88846F;"># 如果有连接且未访问</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.dfs_recursive(neighbor, visited)  </span><span style="color:#88846F;"># 递归访问该顶点</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_vertex</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;调用 DFS 遍历&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()  </span><span style="color:#88846F;"># 初始化所有顶点都未访问</span></span>
<span class="line"><span style="color:#F8F8F2;">        start_index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.vertices.index(start_vertex)  </span><span style="color:#88846F;"># 获取起始顶点的索引</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.dfs_recursive(start_index, visited)  </span><span style="color:#88846F;"># 从起始顶点开始递归遍历</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">()  </span><span style="color:#88846F;"># 打印结果后的换行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化无向图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加边</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 1, 2 的索引分别为 0, 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除边</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 1, 3 的索引分别为 0, 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.remove_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加顶点</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.add_vertex(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除顶点</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 3 的索引为 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.remove_vertex(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> test_graph_adjmat_dfs</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;=== 测试1：简单图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1 3 2 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试2：环形图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建一个环形图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试3：不连通图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建不连通的图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 2 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 2 开始进行 DFS 遍历，预期输出 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试4：单一顶点 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建只有一个顶点的图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-4-bfs" tabindex="-1"><a class="header-anchor" href="#_4-4-bfs"><span>4.4 BFS</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GraphAdjMat</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;基于邻接矩阵实现的无向图类&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">edges</span><span style="color:#F8F8F2;">: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]]):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 顶点列表，元素代表“顶点值”，索引代表“顶点索引”</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices: list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # 邻接矩阵，行列索引对应“顶点索引”</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat: list[list[</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#88846F;">        # 添加顶点</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vertices:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_vertex(val)</span></span>
<span class="line"><span style="color:#88846F;">        # 添加边</span></span>
<span class="line"><span style="color:#88846F;">        # 请注意，edges 元素代表顶点索引，即对应 vertices 元素索引</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.add_edge(e[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], e[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> size</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;获取顶点数量&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加顶点&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        n </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.append(val)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_row </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> (n</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.append(new_row)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat[:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_vertex</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除顶点&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">超出范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.vertices.pop(index)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat.pop(index)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#F8F8F2;">            row.pop(index)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加边&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">和</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">超储范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;不允许添加从顶点</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">到自身的边&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">j</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除边&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size() </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> j</span><span style="color:#F92672;">&gt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size():</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;顶点索引</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">和</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">j</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">超储范围。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F92672;">            raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;不允许删除从顶点</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">到自身的边&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[i][j] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.adj_mat[j][i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> print_matrix</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印邻接矩阵&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.adj_mat:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">.join(</span><span style="color:#66D9EF;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">, row)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印邻接矩阵和顶点列表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;顶点列表 =&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;邻接矩阵 =&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.print_matrix()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dfs_recursive</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">visited</span><span style="color:#F8F8F2;">: list[</span><span style="color:#66D9EF;font-style:italic;">bool</span><span style="color:#F8F8F2;">]):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;递归方式实现 DFS&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited[start] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span><span style="color:#88846F;">  # 标记当前顶点为已访问</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices[start], </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 输出当前顶点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 遍历所有与当前顶点相连的顶点</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> neighbor, is_connected </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.adj_mat[start]):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> is_connected </span><span style="color:#F92672;">and</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> visited[neighbor]:  </span><span style="color:#88846F;"># 如果有连接且未访问</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.dfs_recursive(neighbor, visited)  </span><span style="color:#88846F;"># 递归访问该顶点</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> dfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_vertex</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;调用 DFS 遍历&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()  </span><span style="color:#88846F;"># 初始化所有顶点都未访问</span></span>
<span class="line"><span style="color:#F8F8F2;">        start_index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.vertices.index(start_vertex)  </span><span style="color:#88846F;"># 获取起始顶点的索引</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.dfs_recursive(start_index, visited)  </span><span style="color:#88846F;"># 从起始顶点开始递归遍历</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">()  </span><span style="color:#88846F;"># 打印结果后的换行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> bfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_vertex</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 获取起始顶点在列表中的索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        start_index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.vertices.index(start_vertex)</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [start_index]  </span><span style="color:#88846F;"># 使用列表模拟队列</span></span>
<span class="line"><span style="color:#88846F;">        # 初始化所有顶点状态为空</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size()</span></span>
<span class="line"><span style="color:#88846F;">        # 标记顶点为已经访问</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited[start_index] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#88846F;">        # 当队列不为空时，进行遍历</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> queue:</span></span>
<span class="line"><span style="color:#88846F;">            # 模拟队列，从队列中取出头部顶点。</span></span>
<span class="line"><span style="color:#F8F8F2;">            vertex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">            # 打印当前节点的值</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.vertices[vertex], </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">            # 遍历当前节点的所有与之有边的邻节点</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> neighbor, is_connect </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.adj_mat[vertex]):</span></span>
<span class="line"><span style="color:#88846F;">                # 如果存在邻节点且没有被访问过</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> visited[neighbor] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> is_connect:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    visited[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">                    queue.append(neighbor)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">()   </span><span style="color:#88846F;"># 只为换行</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化无向图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加边</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 1, 2 的索引分别为 0, 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除边</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 1, 3 的索引分别为 0, 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.remove_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加顶点</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.add_vertex(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除顶点</span></span>
<span class="line"><span style="color:#88846F;">    # 顶点 3 的索引为 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.remove_vertex(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> test_graph_adjmat_dfs</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;=== 测试1：简单图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1 3 2 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试2：环形图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建一个环形图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试3：不连通图 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建不连通的图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0 1</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 2 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 2 开始进行 DFS 遍历，预期输出 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">=== 测试4：单一顶点 ===&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 创建只有一个顶点的图</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> GraphAdjMat(vertices, edges)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.print()  </span><span style="color:#88846F;"># 打印邻接矩阵</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;DFS 从顶点 0 开始：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    graph.dfs(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># 从顶点 0 开始进行 DFS 遍历，预期输出 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_5-hashing" tabindex="-1"><a class="header-anchor" href="#_5-hashing"><span>5. Hashing</span></a></h2>`,6)),s("p",null,[n[16]||(n[16]=l("哈希表（hash table），又叫散列表，他通过建立键 ")),n[17]||(n[17]=s("code",null,"key",-1)),n[18]||(n[18]=l(" 与 值")),n[19]||(n[19]=s("code",null,"value",-1)),n[20]||(n[20]=l(" 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键，则可以在 ")),s("mjx-container",B,[(o(),e("svg",_,n[14]||(n[14]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[15]||(n[15]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))]),n[21]||(n[21]=l(" 时间内获取对应的值。"))]),n[174]||(n[174]=s("p",null,"如图 6-1 所示，给定 n 个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能，则可以采用下图所示的哈希表来实现。",-1)),n[175]||(n[175]=s("img",{src:x,alt:"0696f56e224a0f4f2949eb582a5c172",style:{zoom:"50%"}},null,-1)),n[176]||(n[176]=s("p",null,"除了哈希表外，数组和链表也可以实现查询功能，它们的效率对比如表 6-1 所示。",-1)),s("ul",null,[s("li",null,[n[24]||(n[24]=l("**添加元素：**仅需将元素添加至数组（链表）的尾部即可，使用")),s("mjx-container",j,[(o(),e("svg",C,n[22]||(n[22]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[23]||(n[23]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))]),n[25]||(n[25]=l("时间"))]),s("li",null,[n[28]||(n[28]=l("**查询元素：**由于数组（链表）是乱序的，因此需要遍历其中的所有元素，使用 ")),s("mjx-container",N,[(o(),e("svg",S,n[26]||(n[26]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[27]||(n[27]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))]),n[29]||(n[29]=l(" 时间。"))]),s("li",null,[n[32]||(n[32]=s("strong",null,"删除元素",-1)),n[33]||(n[33]=l("：需要先查询元素再从数组（链表）中删除，使用 ")),s("mjx-container",z,[(o(),e("svg",O,n[30]||(n[30]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[31]||(n[31]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))]),n[34]||(n[34]=l(" 时间。"))])]),n[177]||(n[177]=s("div",{style:{"text-align":"center"}},[s("p",null,"表 6-1 元素查询效率对比")],-1)),s("table",null,[n[56]||(n[56]=s("thead",null,[s("tr",null,[s("th"),s("th",null,"数组"),s("th",null,"链表"),s("th",null,"哈希表")])],-1)),s("tbody",null,[s("tr",null,[n[41]||(n[41]=s("td",null,"查找元素",-1)),s("td",null,[s("mjx-container",G,[(o(),e("svg",J,n[35]||(n[35]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[36]||(n[36]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])]),s("td",null,[s("mjx-container",P,[(o(),e("svg",I,n[37]||(n[37]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[38]||(n[38]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])]),s("td",null,[s("mjx-container",X,[(o(),e("svg",Y,n[39]||(n[39]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[40]||(n[40]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))])])]),s("tr",null,[n[48]||(n[48]=s("td",null,"添加元素",-1)),s("td",null,[s("mjx-container",K,[(o(),e("svg",U,n[42]||(n[42]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[43]||(n[43]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))])]),s("td",null,[s("mjx-container",W,[(o(),e("svg",R,n[44]||(n[44]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[45]||(n[45]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))])]),s("td",null,[s("mjx-container",$,[(o(),e("svg",ss,n[46]||(n[46]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[47]||(n[47]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))])])]),s("tr",null,[n[55]||(n[55]=s("td",null,"删除元素",-1)),s("td",null,[s("mjx-container",ns,[(o(),e("svg",ls,n[49]||(n[49]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[50]||(n[50]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])]),s("td",null,[s("mjx-container",as,[(o(),e("svg",es,n[51]||(n[51]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[52]||(n[52]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])]),s("td",null,[s("mjx-container",os,[(o(),e("svg",ps,n[53]||(n[53]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[54]||(n[54]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))])])])])]),s("p",null,[n[59]||(n[59]=l("观察发现，")),n[60]||(n[60]=s("strong",null,"在哈希表中进行增删查改的时间复杂度都是",-1)),n[61]||(n[61]=l()),s("mjx-container",ts,[(o(),e("svg",Fs,n[57]||(n[57]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[58]||(n[58]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))]),n[62]||(n[62]=l("，非常高效。"))]),n[178]||(n[178]=a(`<h3 id="_5-1-哈希表的常用操作" tabindex="-1"><a class="header-anchor" href="#_5-1-哈希表的常用操作"><span>5.1 哈希表的常用操作</span></a></h3><p>哈希表的常用操作包括：初始化、查询、添加键值对和删除键值对。示例代码如下：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">hmap: </span><span style="color:#66D9EF;font-style:italic;">dict</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 添加操作</span></span>
<span class="line"><span style="color:#88846F;"># 在哈希表中添加键值对 (key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">hmap[</span><span style="color:#AE81FF;">12836</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;haha&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">hmap[</span><span style="color:#AE81FF;">15937</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;xixi&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">hmap[</span><span style="color:#AE81FF;">16758</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;heihei&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">hmap[</span><span style="color:#AE81FF;">13276</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;hehe&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">hmap[</span><span style="color:#AE81FF;">10583</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;yeye&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 查询操作</span></span>
<span class="line"><span style="color:#88846F;"># 向哈希表中输入键，得到值</span></span>
<span class="line"><span style="color:#F8F8F2;">name: </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> hmap[</span><span style="color:#AE81FF;">15937</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 删除操作</span></span>
<span class="line"><span style="color:#88846F;"># 在哈希表中删除键值对（key，value）</span></span>
<span class="line"><span style="color:#F8F8F2;">hmap.pop(</span><span style="color:#AE81FF;">10583</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">HashTable</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">size</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> size  </span><span style="color:#88846F;"># 哈希表的大小</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.table </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[] </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(size)]  </span><span style="color:#88846F;"># 初始化哈希表，每个槽都是一个空列表，用于处理冲突</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> _hash</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 简单的哈希函数：将键转换为字符串后求哈希值，并将其模以哈希表大小</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(key) </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> put</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 向哈希表中插入键值对</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._hash(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.table[index]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i, (k, v) </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(bucket):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> k </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                bucket[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (key, value)</span></span>
<span class="line"><span style="color:#F92672;">                return</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket.append((key, value))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 获取键对应的值</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._hash(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.table[index]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> k, v </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> bucket:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> k </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> v</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 从哈希表中删除键</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">._hash(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.table[index]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i, (k, v) </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(bucket):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> k </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                bucket[i] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">                return</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用示例</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_table </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> HashTable()</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_table.put(</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Alice&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(hash_table.get(</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 输出: Alice</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_table.put(</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Bob&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(hash_table.get(</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 输出: Bob</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_table.remove(</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(hash_table.get(</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 输出: None</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_5-2-哈希表的遍历" tabindex="-1"><a class="header-anchor" href="#_5-2-哈希表的遍历"><span>5.2 哈希表的遍历</span></a></h3>`,4)),r(i,{id:"345",data:[{id:"字典实现"},{id:"列表实现"},{id:"新语法 yield"}]},{title0:p(({value:t,isActive:F})=>n[63]||(n[63]=[l("字典实现")])),title1:p(({value:t,isActive:F})=>n[64]||(n[64]=[l("列表实现")])),title2:p(({value:t,isActive:F})=>n[65]||(n[65]=[l("新语法 yield")])),tab0:p(({value:t,isActive:F})=>n[66]||(n[66]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap: "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"dict"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," {}")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 添加操作")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 在哈希表中添加键值对 (key, value)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap["),s("span",{style:{color:"#AE81FF"}},"12836"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}}," 'haha'")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap["),s("span",{style:{color:"#AE81FF"}},"15937"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}}," 'xixi'")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap["),s("span",{style:{color:"#AE81FF"}},"16758"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}}," 'heihei'")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap["),s("span",{style:{color:"#AE81FF"}},"13276"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}}," 'hehe'")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap["),s("span",{style:{color:"#AE81FF"}},"10583"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}}," 'yeye'")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 查询操作")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 向哈希表中输入键，得到值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"name: "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"str"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," hmap["),s("span",{style:{color:"#AE81FF"}},"15937"),s("span",{style:{color:"#F8F8F2"}},"]")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 删除操作")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 在哈希表中删除键值对（key，value）")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hmap.pop("),s("span",{style:{color:"#AE81FF"}},"10583"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历哈希表")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," key, value "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hmap.items():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(key, "),s("span",{style:{color:"#E6DB74"}},"'->'"),s("span",{style:{color:"#F8F8F2"}},", value)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 单独遍历键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," key "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hmap.keys():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(key)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 单独遍历值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," value "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hmap.values():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(value)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:p(({value:t,isActive:F})=>n[67]||(n[67]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"HashTable"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"size"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".size "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," size  "),s("span",{style:{color:"#88846F"}},"# 哈希表的大小")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".table "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," [[] "),s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," _ "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"(size)]  "),s("span",{style:{color:"#88846F"}},"# 初始化哈希表，每个槽都是一个空列表，用于处理冲突")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," _hash"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 简单的哈希函数：将键转换为字符串后求哈希值，并将其模以哈希表大小")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F8F8F2"}},"(key) "),s("span",{style:{color:"#F92672"}},"%"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".size")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," put"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"value"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 向哈希表中插入键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},"._hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table[index]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," i, (k, v) "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," enumerate"),s("span",{style:{color:"#F8F8F2"}},"(bucket):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," k "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"                # 如果键已存在，则更新值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                bucket[i] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," (key, value)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果键不存在，则添加新的键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket.append((key, value))")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," get"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 获取键对应的值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},"._hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table[index]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," k, v "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," k "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return"),s("span",{style:{color:"#F8F8F2"}}," v")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#88846F"}},"  # 如果键不存在，返回None")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," remove"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 从哈希表中删除键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},"._hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table[index]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," i, (k, v) "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," enumerate"),s("span",{style:{color:"#F8F8F2"}},"(bucket):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," k "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                del"),s("span",{style:{color:"#F8F8F2"}}," bucket[i]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return"),s("span",{style:{color:"#AE81FF"}}," True")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," False"),s("span",{style:{color:"#88846F"}},"  # 如果键不存在，返回False")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," items"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        items_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历哈希表中的所有键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," bucket "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," item "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                items_lst.append(item)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," items_lst")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," keys"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历哈希表中的所有键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        key_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," bucket "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," k, _ "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                key_lst.append(k)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," key_lst")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," values"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历哈希表中的所有值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        value_lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," bucket "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," _, v "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                value_lst.append(v)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," value_lst")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 使用示例")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," HashTable()")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table.put("),s("span",{style:{color:"#E6DB74"}},'"name"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},'"Alice"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table.put("),s("span",{style:{color:"#E6DB74"}},'"age"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"25"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table.put("),s("span",{style:{color:"#E6DB74"}},'"city"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},'"New York"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Items:"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," key, value "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hash_table.items():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(key, value)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},'Keys:"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," key "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hash_table.keys():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(key)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},'Values:"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," value "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hash_table.values():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(value)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab2:p(({value:t,isActive:F})=>n[68]||(n[68]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"HashTable"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#66D9EF"}}," __init__"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"size"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".size "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," size  "),s("span",{style:{color:"#88846F"}},"# 哈希表的大小")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#FD971F"}},"        self"),s("span",{style:{color:"#F8F8F2"}},".table "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," [[] "),s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," _ "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"(size)]  "),s("span",{style:{color:"#88846F"}},"# 初始化哈希表，每个槽都是一个空列表，用于处理冲突")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," _hash"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 简单的哈希函数：将键转换为字符串后求哈希值，并将其模以哈希表大小")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F8F8F2"}},"(key) "),s("span",{style:{color:"#F92672"}},"%"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".size")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," put"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"value"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 向哈希表中插入键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},"._hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table[index]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," i, (k, v) "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," enumerate"),s("span",{style:{color:"#F8F8F2"}},"(bucket):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," k "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"                # 如果键已存在，则更新值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                bucket[i] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," (key, value)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果键不存在，则添加新的键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket.append((key, value))")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," get"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 获取键对应的值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},"._hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table[index]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," k, v "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," k "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return"),s("span",{style:{color:"#F8F8F2"}}," v")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," None"),s("span",{style:{color:"#88846F"}},"  # 如果键不存在，返回None")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," remove"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 从哈希表中删除键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},"._hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        bucket "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table[index]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," i, (k, v) "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," enumerate"),s("span",{style:{color:"#F8F8F2"}},"(bucket):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," k "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                del"),s("span",{style:{color:"#F8F8F2"}}," bucket[i]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return"),s("span",{style:{color:"#AE81FF"}}," True")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," False"),s("span",{style:{color:"#88846F"}},"  # 如果键不存在，返回False")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," items"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历哈希表中的所有键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," bucket "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," item "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                yield"),s("span",{style:{color:"#F8F8F2"}}," item")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," keys"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历哈希表中的所有键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," bucket "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," k, _ "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                yield"),s("span",{style:{color:"#F8F8F2"}}," k")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    def"),s("span",{style:{color:"#A6E22E"}}," values"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"self"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历哈希表中的所有值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," bucket "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#FD971F"}}," self"),s("span",{style:{color:"#F8F8F2"}},".table:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," _, v "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," bucket:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                yield"),s("span",{style:{color:"#F8F8F2"}}," v")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 使用示例")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," HashTable()")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table.put("),s("span",{style:{color:"#E6DB74"}},'"name"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},'"Alice"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table.put("),s("span",{style:{color:"#E6DB74"}},'"age"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"25"),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"hash_table.put("),s("span",{style:{color:"#E6DB74"}},'"city"'),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},'"New York"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历键值对")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Items:"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," key, value "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hash_table.items():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(key, value)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历键")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},'Keys:"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," key "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hash_table.keys():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(key)")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 遍历值")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},'Values:"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," value "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," hash_table.values():")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(value)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),n[179]||(n[179]=a('<h3 id="_5-3-哈希表的简单实现" tabindex="-1"><a class="header-anchor" href="#_5-3-哈希表的简单实现"><span>5.3 哈希表的简单实现</span></a></h3><p>我们先考虑最简单的情况，仅用一个数组来实现哈希表。在哈希表中，我们将数组中的每个空位称为桶（bucket），每一个桶可存储一个键值对。因此，查询操作就是找到 <code>key</code> 对应的桶，并在桶中获取 <code>value</code>。</p><p>那么，如何基于 <code>key</code> 定位对应的桶呢？这是通过哈希函数（hash function）实现的。哈希函数作用是用一个较大的输入空间映射到一个较小的输出空间。在哈希表中，输入空间是所有 <code>key</code>, 输出空间是所有桶（数组索引）。换句话说，输入一个 <code>key</code>，我们可以通过哈希函数得到该 <code>key</code> 对应的键值对在数组中的存储位置。</p><p>输入一个 <code>key</code>，哈希函数的计算过程分为以下两种：</p><ol><li>通过某种哈希算法 <code>hash()</code>计算得到哈希值。</li><li>将哈希值对桶数量（数组长度）<code>capacity</code> 取值，从而获取该 <code>key</code>对应的数组索引 <code>index</code></li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">index </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(key) </span><span style="color:#88846F;"># capacity</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>随后，我们就可以用 <code>index</code>在哈希表中访问对应的值，从而获取 <code>value</code>。</p><p>设数组长度为 <code>capacity = 100</code>哈希算法 <code>hash(key) = key</code>，易得哈希函数为 <code>key % 100</code> 。下图展示了哈希函数的工作原理。</p><img src="'+A+`" alt="2298620d0f59ba179e5aed2ad41bb9c" style="zoom:50%;"><p>以下代码实现了一个简单的哈希表。其中，我们将 <code>key</code> 和 <code>value</code> 分装成一个类 <code>Pair</code>，以表示键值对。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Pair</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;键值对&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ArrayHashing</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets: list[Pair </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> hash_fun</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 100</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        index: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_fun(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        pair: Pair </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index]</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> pair.value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> put</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        pair </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Pair(key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">        index: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_fun(key)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> pair</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> delete</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        index: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_fun(key)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> entry_set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; list[Pair]:</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                yield</span><span style="color:#F8F8F2;"> pair</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> key_set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; list[Pair]:</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                yield</span><span style="color:#F8F8F2;"> pair.key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> value_set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; list[Pair]:</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                yield</span><span style="color:#F8F8F2;"> pair.value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(pair.key, </span><span style="color:#E6DB74;">&quot;-&gt;&quot;</span><span style="color:#F8F8F2;">, pair.value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;Driver Code&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化哈希表</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ArrayHashing()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap.put(</span><span style="color:#AE81FF;">12836</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小哈&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap.put(</span><span style="color:#AE81FF;">15937</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小啰&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap.put(</span><span style="color:#AE81FF;">16750</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小算&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap.put(</span><span style="color:#AE81FF;">13276</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小法&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap.put(</span><span style="color:#AE81FF;">10583</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小鸭&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 查询操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> hmap.get(</span><span style="color:#AE81FF;">15937</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    hmap.delete(</span><span style="color:#AE81FF;">10583</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 遍历哈希表</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">遍历键值对 Key-&gt;Value&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> hmap.entry_set():</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(pair.key, </span><span style="color:#E6DB74;">&quot;-&gt;&quot;</span><span style="color:#F8F8F2;">, pair.value)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_5-4-哈希冲突与扩容" tabindex="-1"><a class="header-anchor" href="#_5-4-哈希冲突与扩容"><span>5.4 哈希冲突与扩容</span></a></h3><p>从本质上看，哈希函数的作用就是将所有 <code>key</code>构成的输入空间映射到数组所有索引号构成的输出空间。而输入空间往往远大于输出空间。因此，理论上一定存在“多个输入对应想相同输出“的情况。</p>`,13)),r(c,{id:"401",data:[{id:""}]},{title0:p(({value:t,isActive:F})=>n[69]||(n[69]=[])),tab0:p(({value:t,isActive:F})=>n[70]||(n[70]=[s("p",null,"哈希函数的作用是将一个输入（通常是一个“key”）转换为一个数字（通常是数组的索引）。这个过程就像是给每个输入找到一个“家”，这样你可以在数组中根据索引快速找到对应的数据。",-1),s("p",null,"但是，输入的可能性非常多，比如所有的字符串、所有的整数等等——这个集合被称为“输入空间”。而数组的大小是有限的，这个数组的索引范围也称为“输出空间”。因为输入空间比输出空间大，所以不可能给每个不同的输入都找到唯一的输出位置，最终会有多个输入映射到相同的输出位置。这种情况就是所谓的“哈希冲突”。",-1),s("p",null,"一个例子：",-1),s("p",null,"假设你有一个哈希函数，输入是1到100的整数，而你的数组只有10个位置（索引0到9）。无论你的哈希函数怎么设计，总会有某些整数映射到相同的索引位置。",-1),s("p",null,"比如，我们的哈希函数可以定义为hash(key) = key % 10，表示将输入的整数对10取余数，得到的结果就是索引位置。",-1),s("p",null,[l("这样："),s("br"),l(" • 1 % 10 = 1"),s("br"),l(" • 11 % 10 = 1"),s("br"),l(" • 21 % 10 = 1")],-1),s("p",null,"这三个数（1, 11, 21）都会映射到索引1的位置。因为输入空间（1到100）远大于输出空间（索引0到9），所以一定会有不同的输入映射到相同的输出位置。",-1),s("p",null,"总结：哈希函数设计的目标是尽量分散这些映射，减少冲突，但完全避免冲突是理论上做不到的。",-1)])),_:1}),n[180]||(n[180]=a(`<p>对于上述示例中的哈希函数，当输入的 <code>key</code>后两位相同时，哈希函数的输出也相同。例如，查询学号为 12836 和 20336 的两个学生时，我们得到：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">12836</span><span style="color:#F92672;"> %</span><span style="color:#AE81FF;"> 100</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 36</span></span>
<span class="line"><span style="color:#AE81FF;">20336</span><span style="color:#F92672;"> %</span><span style="color:#AE81FF;"> 100</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 36</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如图 6-3 所示，两个学号指向了同一个姓名，这显然是不对的。我们将这种多个输入对应同一输出的情况称为哈希冲突（hash collision）。</p><img src="`+V+'" alt="1ce52674e82763b903498349c279cd1" style="zoom:67%;">',4)),s("p",null,[n[73]||(n[73]=l("容易想到，哈希表容量 ")),s("mjx-container",rs,[(o(),e("svg",cs,n[71]||(n[71]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"})])])],-1)]))),n[72]||(n[72]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"n")])],-1))]),n[74]||(n[74]=l(" 越大，多个 ")),n[75]||(n[75]=s("code",null,"key",-1)),n[76]||(n[76]=l(" 被分配到同一个桶中的概率就越低，冲突就越少。因此，")),n[77]||(n[77]=s("strong",null,"我们可以通过扩容哈希表来减少哈希冲突",-1)),n[78]||(n[78]=l("。"))]),n[181]||(n[181]=s("p",null,[l("如图 6-4 所示，扩容前键值对 "),s("code",null,"(136, A)"),l(" 和 "),s("code",null,"(236, D)"),l(" 发生冲突，扩容后冲突消失。")],-1)),n[182]||(n[182]=s("img",{src:L,alt:"5572e2bbb2deadaea4e73c3729ecd04",style:{zoom:"67%"}},null,-1)),n[183]||(n[183]=s("p",null,"类似于数组扩容，哈希表扩容需将所有键值对从原哈希表迁移至新哈希表，非常耗时；并且由于哈希表容量 capacity 改变，我们需要通过哈希函数来重新计算所有键值对的存储位置，这进一步增加了扩容过程的计算开销。为此，编程语言通常会预留足够大的哈希表容量，防止频繁扩容。",-1)),s("p",null,[n[83]||(n[83]=l("负载因子（load factor）是哈希表的一个重要概念，其定义为哈希表的元素数量除以桶数量，用于衡量哈希冲突的严重程度，")),n[84]||(n[84]=s("strong",null,"也常作为哈希表扩容的触发条件",-1)),n[85]||(n[85]=l("。例如在 Java 中，当负载因子超过 ")),s("mjx-container",is,[(o(),e("svg",ys,n[79]||(n[79]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g></g></g>',1)]))),n[80]||(n[80]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"0.75")])],-1))]),n[86]||(n[86]=l(" 时，系统会将哈希表扩容至原先的 ")),s("mjx-container",ds,[(o(),e("svg",Ts,n[81]||(n[81]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"})])])],-1)]))),n[82]||(n[82]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"2")])],-1))]),n[87]||(n[87]=l(" 倍。"))]),n[184]||(n[184]=a('<p><strong>通常情况下哈希函数的输入空间远大于输出空间</strong>，因此理论上哈希冲突是不可避免的。比如，输入空间为全体整数，输出空间为数组容量大小，则必然有多个整数映射至同一桶索引。</p><p>哈希冲突会导致查询结果错误，严重影响哈希表的可用性。为了解决该问题，每当遇到哈希冲突时，我们就进行哈希表扩容，直至冲突消失为止。此方法简单粗暴且有效，但效率太低，因为哈希表扩容需要进行大量的数据搬运与哈希值计算。为了提升效率，我们可以采用以下策略。</p><ol><li>改良哈希表数据结构，<strong>使得哈希表可以在出现哈希冲突时正常工作</strong>。</li><li>仅在必要时，即当哈希冲突比较严重时，才执行扩容操作。</li></ol><p>哈希表的结构改良方法主要包括“链式地址”和“开放寻址”。</p><h4 id="_1-链式地址" tabindex="-1"><a class="header-anchor" href="#_1-链式地址"><span>1. 链式地址</span></a></h4><p>在原始哈希表中，每个桶仅能存储一个键值对。链式地址（separate chaining）将单个元素转换为链表，将键值对作为链表节点，将所有发生冲突的键值对都存储在同一链表中。图 6-5 展示了一个链式地址哈希表的例子。</p><img src="'+M+'" alt="d805f81b8d92e84b3efee83282a5fe8" style="zoom:67%;"><p>基于链式地址实现的哈希表的操作方法发生了以下变化。</p><ul><li><strong>查询元素</strong>：输入 <code>key</code> ，经过哈希函数得到桶索引，即可访问链表头节点，然后遍历链表并对比 <code>key</code> 以查找目标键值对。</li><li><strong>添加元素</strong>：首先通过哈希函数访问链表头节点，然后将节点（键值对）添加到链表中。</li><li><strong>删除元素</strong>：根据哈希函数的结果访问链表头部，接着遍历链表以查找目标节点并将其删除。</li></ul><p>链式地址存在以下局限性。</p><ul><li><strong>占用空间增大</strong>：链表包含节点指针，它相比数组更加耗费内存空间。</li><li><strong>查询效率降低</strong>：因为需要线性遍历链表来查找对应元素。</li></ul><p>以下代码给出了链式地址哈希表的简单实现，需要注意两点。</p>',12)),s("ul",null,[n[95]||(n[95]=s("li",null,"**使用列表（动态数组）代替链表，从而简化代码。**在这种设定下，哈希表（数组）包含多个桶，每个桶都是一个列表。",-1)),s("li",null,[n[92]||(n[92]=l("以下实现包含哈希表扩容方法。当负载因子超过 ")),s("mjx-container",Qs,[(o(),e("svg",ms,n[88]||(n[88]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g>',1)]))),n[89]||(n[89]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mfrac",null,[s("mn",null,"2"),s("mn",null,"3")])])],-1))]),n[93]||(n[93]=l(" 时，我们将哈希表扩容至原先的 ")),s("mjx-container",vs,[(o(),e("svg",us,n[90]||(n[90]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"})])])],-1)]))),n[91]||(n[91]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"2")])],-1))]),n[94]||(n[94]=l(" 倍。"))])]),n[185]||(n[185]=a(`<div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Pair</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">:</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">HashMapChaining</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.capacity </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 4</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.load_thres </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2.0</span><span style="color:#F92672;"> /</span><span style="color:#AE81FF;"> 3.0</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.extend_ratio </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[] </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.capacity)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> hash_func</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> load_factor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">float</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">/</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_func(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> bucket:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair.key </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> pair.val</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> put</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.load_factor() </span><span style="color:#F92672;">&gt;</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.load_thres:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.extend()</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_func(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> bucket:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair.key </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                pair.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F92672;">                return</span></span>
<span class="line"><span style="color:#F8F8F2;">        pair </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Pair(key, val)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket.append(pair)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_func(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        bucket </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index]</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> bucket:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair.key </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">                bucket.remove(pair)</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">-=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">                break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> extend</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        buckets </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.capacity </span><span style="color:#F92672;">*=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.extend_ratio</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[] </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.capacity)]</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> bucket </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> buckets:</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> bucket:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.put(pair.key, pair.val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> bucket </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets:</span></span>
<span class="line"><span style="color:#F8F8F2;">            res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> bucket:</span></span>
<span class="line"><span style="color:#F8F8F2;">                res.append(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">(pair.key) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;-&gt;&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> pair.val)</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;Driver Code&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化哈希表</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> HashMapChaining()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.put(</span><span style="color:#AE81FF;">12836</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小哈&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.put(</span><span style="color:#AE81FF;">15937</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小啰&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.put(</span><span style="color:#AE81FF;">16750</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小算&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.put(</span><span style="color:#AE81FF;">13276</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小法&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.put(</span><span style="color:#AE81FF;">10583</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小鸭&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 查询操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> hashmap.get(</span><span style="color:#AE81FF;">13276</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.remove(</span><span style="color:#AE81FF;">12836</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    hashmap.print()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,1)),s("p",null,[n[100]||(n[100]=l("值得注意的是，当链表很长时，查询效率 ")),s("mjx-container",bs,[(o(),e("svg",fs,n[96]||(n[96]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[97]||(n[97]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))]),n[101]||(n[101]=l(" 很差。")),n[102]||(n[102]=s("strong",null,"此时可以将链表转换为“AVL 树”或“红黑树”",-1)),n[103]||(n[103]=l("，从而将查询操作的时间复杂度优化至 ")),s("mjx-container",hs,[(o(),e("svg",Es,n[98]||(n[98]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1061,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1546,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2023,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g>',1)]))),n[99]||(n[99]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n")])],-1))]),n[104]||(n[104]=l("。"))]),n[186]||(n[186]=a('<h4 id="_2-开放寻址" tabindex="-1"><a class="header-anchor" href="#_2-开放寻址"><span>2. 开放寻址</span></a></h4><p>开放寻址（open addressing）不引入额外的数据结构，而是通过“多次探测”来处理哈希冲突，探测方式主要包括线性探测、平方探测和多次哈希等。</p><p>下面以线性探测为例，介绍开放寻址哈希表的工作机制。</p><h5 id="线性探测" tabindex="-1"><a class="header-anchor" href="#线性探测"><span><mark><strong>线性探测：</strong></mark></span></a></h5><p>线性探测采用固定步长的线性搜索来进行探测，其操作方法与普通哈希表有所不同。</p><ul><li><strong>插入元素</strong>：通过哈希函数计算桶索引，若发现桶内已有元素，则从冲突位置向后线性遍历（步长通常为 1 ），直至找到空桶，将元素插入其中。</li><li><strong>查找元素</strong>：若发现哈希冲突，则使用相同步长向后进行线性遍历，直到找到对应元素，返回 <code>value</code> 即可；如果遇到空桶，说明目标元素不在哈希表中，返回 <code>None</code> 。</li></ul><img src="'+k+'" alt="6352a75b8d5b68eb1bb97e33a0c0775" style="zoom:33%;"><p>图展示了开放寻址（线性探测）哈希表的键值对分布。根据此哈希函数，最后两位相同的 <code>key</code> 都会被映射到相同的桶。而通过线性探测，它们被依次存储在该桶以及之下的桶中。</p><p>然而，<strong>线性探测容易产生“聚集现象”</strong>。具体来说，数组中连续被占用的位置越长，这些连续位置发生哈希冲突的可能性越大，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作效率劣化。</p><p>值得注意的是，<strong>我们不能在开放寻址哈希表中直接删除元素</strong>。这是因为删除元素会在数组内产生一个空桶 <code>None</code> ，而当查询元素时，线性探测到该空桶就会返回，因此在该空桶之下的元素都无法再被访问到，程序可能误判这些元素不存在，如下图所示。</p><img src="'+q+`" alt="aa786870cd3b6501cbd39b844b6b0eb" style="zoom:33%;"><p>为了解决该问题，我们可以采用懒删除（lazy deletion）机制：它不直接从哈希表中移除元素，<strong>而是利用一个常量 <code>TOMBSTONE</code> 来标记这个桶</strong>。在该机制下，<code>None</code> 和 <code>TOMBSTONE</code> 都代表空桶，都可以放置键值对。但不同的是，线性探测到 <code>TOMBSTONE</code> 时应该继续遍历，因为其之下可能还存在键值对。</p><p>然而，<strong>懒删除可能会加速哈希表的性能退化</strong>。这是因为每次删除操作都会产生一个删除标记，随着 <code>TOMBSTONE</code> 的增加，搜索时间也会增加，因为线性探测可能需要跳过多个 <code>TOMBSTONE</code> 才能找到目标元素。</p><p>为此，考虑在线性探测中记录遇到的首个 <code>TOMBSTONE</code> 的索引，并将搜索到的目标元素与该 <code>TOMBSTONE</code> 交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而优化查询效率。</p><p>以下代码实现了一个包含懒删除的开放寻址（线性探测）哈希表。为了更加充分地使用哈希表的空间，我们将哈希表看作一个“环形数组”，当越过数组尾部时，回到头部继续遍历。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">HashMapOpenAddressing</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;开放寻址哈希表&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#88846F;">  # 键值对数量</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.capacity </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 4</span><span style="color:#88846F;">  # 哈希表容量</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.load_thres </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2.0</span><span style="color:#F92672;"> /</span><span style="color:#AE81FF;"> 3.0</span><span style="color:#88846F;">  # 触发扩容的负载因子阈值</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.extend_ratio </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#88846F;">  # 扩容倍数</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets: list[Pair </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity  </span><span style="color:#88846F;"># 桶数组</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> Pair(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;-1&quot;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 删除标记</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> hash_func</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;哈希函数&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> load_factor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">float</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;负载因子&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">/</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find_bucket</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;搜索 key 对应的桶索引&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.hash_func(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">        first_tombstone </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#88846F;">        # 线性探测，当遇到空桶时跳出</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">            # 若遇到 key ，返回对应的桶索引</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index].key </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#88846F;">                # 若之前遇到了删除标记，则将键值对移动至该索引处</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> first_tombstone </span><span style="color:#F92672;">!=</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#FD971F;">                    self</span><span style="color:#F8F8F2;">.buckets[first_tombstone] </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index]</span></span>
<span class="line"><span style="color:#FD971F;">                    self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span></span>
<span class="line"><span style="color:#F92672;">                    return</span><span style="color:#F8F8F2;"> first_tombstone  </span><span style="color:#88846F;"># 返回移动后的桶索引</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;"> index  </span><span style="color:#88846F;"># 返回桶索引</span></span>
<span class="line"><span style="color:#88846F;">            # 记录遇到的首个删除标记</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> first_tombstone </span><span style="color:#F92672;">==</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> and</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">is</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                first_tombstone </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> index</span></span>
<span class="line"><span style="color:#88846F;">            # 计算桶索引，越过尾部则返回头部</span></span>
<span class="line"><span style="color:#F8F8F2;">            index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (index </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity</span></span>
<span class="line"><span style="color:#88846F;">        # 若 key 不存在，则返回添加点的索引</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> first_tombstone </span><span style="color:#F92672;">==</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> else</span><span style="color:#F8F8F2;"> first_tombstone</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;查询操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 搜索 key 对应的桶索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find_bucket(key)</span></span>
<span class="line"><span style="color:#88846F;">        # 若找到键值对，则返回对应 val</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index].val</span></span>
<span class="line"><span style="color:#88846F;">        # 若键值对不存在，则返回 None</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> put</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;添加操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 当负载因子超过阈值时，执行扩容</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.load_factor() </span><span style="color:#F92672;">&gt;</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.load_thres:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.extend()</span></span>
<span class="line"><span style="color:#88846F;">        # 搜索 key 对应的桶索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find_bucket(key)</span></span>
<span class="line"><span style="color:#88846F;">        # 若找到键值对，则覆盖 val 并返回</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.buckets[index].val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F92672;">            return</span></span>
<span class="line"><span style="color:#88846F;">        # 若键值对不存在，则添加该键值对</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Pair(key, val)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> remove</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;删除操作&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 搜索 key 对应的桶索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find_bucket(key)</span></span>
<span class="line"><span style="color:#88846F;">        # 若找到键值对，则用删除标记覆盖它</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.buckets[index] </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">-=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> extend</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;扩容哈希表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">        # 暂存原哈希表</span></span>
<span class="line"><span style="color:#F8F8F2;">        buckets_tmp </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets</span></span>
<span class="line"><span style="color:#88846F;">        # 初始化扩容后的新哈希表</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.capacity </span><span style="color:#F92672;">*=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.extend_ratio</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.buckets </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">*</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.capacity</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.size </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#88846F;">        # 将键值对从原哈希表搬运至新哈希表</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> buckets_tmp:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.put(pair.key, pair.val)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">        &quot;&quot;&quot;打印哈希表&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">in</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.buckets:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;None&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            elif</span><span style="color:#F8F8F2;"> pair </span><span style="color:#F92672;">is</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.</span><span style="color:#AE81FF;">TOMBSTONE</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;TOMBSTONE&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(pair.key, </span><span style="color:#E6DB74;">&quot;-&gt;&quot;</span><span style="color:#F8F8F2;">, pair.val)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h5 id="平方探测" tabindex="-1"><a class="header-anchor" href="#平方探测"><span><mark><strong>平方探测</strong></mark></span></a></h5>`,17)),s("p",null,[n[107]||(n[107]=l("平方探测与线性探测类似，都是开放寻址的常见策略之一。当发生冲突时，平方探测不是简单地跳过一个固定的步数，而是跳过“探测次数的平方”的步数，即 ")),s("mjx-container",gs,[(o(),e("svg",Ds,n[105]||(n[105]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(944.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(1444.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1889.3,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(2389.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2834,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g>',1)]))),n[106]||(n[106]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1"),s("mo",null,","),s("mn",null,"4"),s("mo",null,","),s("mn",null,"9"),s("mo",null,","),s("mo",null,"…")])],-1))]),n[108]||(n[108]=l(" 步。"))]),n[187]||(n[187]=s("p",null,"平方探测主要具有以下优势。",-1)),n[188]||(n[188]=s("ul",null,[s("li",null,"平方探测通过跳过探测次数平方的距离，试图缓解线性探测的聚集效应。"),s("li",null,"平方探测会跳过更大的距离来寻找空位置，有助于数据分布得更加均匀。")],-1)),n[189]||(n[189]=s("p",null,"然而，平方探测并不是完美的。",-1)),n[190]||(n[190]=s("ul",null,[s("li",null,"仍然存在聚集现象，即某些位置比其他位置更容易被占用。"),s("li",null,"由于平方的增长，平方探测可能不会探测整个哈希表，这意味着即使哈希表中有空桶，平方探测也可能无法访问到它。")],-1)),n[191]||(n[191]=s("p",null,[s("strong",null,"多次哈希")],-1)),s("p",null,[n[111]||(n[111]=l("顾名思义，多次哈希方法使用多个哈希函数 ")),s("mjx-container",Hs,[(o(),e("svg",xs,n[109]||(n[109]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1315.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1887.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(2276.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g><g data-mml-node="msub" transform="translate(3276.6,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4203.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4592.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5164.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(5553.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g><g data-mml-node="msub" transform="translate(6553.1,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(7479.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7868.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(8440.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8996.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g>',1)]))),n[110]||(n[110]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"f"),s("mn",null,"1")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")"),s("mtext",null,"、"),s("msub",null,[s("mi",null,"f"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")"),s("mtext",null,"、"),s("msub",null,[s("mi",null,"f"),s("mn",null,"3")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")"),s("mo",null,"…")])],-1))]),n[112]||(n[112]=l("进行探测。"))]),s("ul",null,[s("li",null,[n[117]||(n[117]=s("strong",null,"插入元素",-1)),n[118]||(n[118]=l("：若哈希函数 ")),s("mjx-container",As,[(o(),e("svg",Vs,n[113]||(n[113]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1315.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1887.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[114]||(n[114]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"f"),s("mn",null,"1")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")")])],-1))]),n[119]||(n[119]=l(" 出现冲突，则尝试 ")),s("mjx-container",Ls,[(o(),e("svg",Ms,n[115]||(n[115]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(926.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1315.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1887.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[116]||(n[116]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"f"),s("mn",null,"2")]),s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{stretchy:"false"},")")])],-1))]),n[120]||(n[120]=l(" ，以此类推，直到找到空位后插入元素。"))]),n[121]||(n[121]=s("li",null,[s("strong",null,"查找元素"),l("：在相同的哈希函数顺序下进行查找，直到找到目标元素时返回；若遇到空位或已尝试所有哈希函数，说明哈希表中不存在该元素，则返回 "),s("code",null,"None"),l(" 。")],-1))]),n[192]||(n[192]=s("p",null,"与线性探测相比，多次哈希方法不易产生聚集，但多个哈希函数会带来额外的计算量。",-1)),n[193]||(n[193]=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,"请注意，开放寻址（线性探测、平方探测和多次哈希）哈希表都存在“不能直接删除元素”的问题。")],-1)),n[194]||(n[194]=s("h3",{id:"_5-5-哈希算法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-5-哈希算法"},[s("span",null,"5.5 哈希算法")])],-1)),n[195]||(n[195]=s("p",null,[l("前两节介绍了哈希表的工作原理和哈希冲突的处理方法。然而无论是开放寻址还是链式地址，"),s("strong",null,"它们只能保证哈希表可以在发生冲突时正常工作，而无法减少哈希冲突的发生"),l("。")],-1)),s("p",null,[n[124]||(n[124]=l("如果哈希冲突过于频繁，哈希表的性能会急剧恶化，如下图所示，对于链式地址哈希表，理想情况下键对值均匀分布在各个桶中，达到最佳查询效率，最差情况下所有键对值到一个桶中，时间复杂度退化至 ")),s("mjx-container",ks,[(o(),e("svg",qs,n[122]||(n[122]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[123]||(n[123]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])]),n[196]||(n[196]=a('<img src="'+w+`" alt="e0fc5da377bae5ce13b430e5744eac1" style="zoom:50%;"><p>**键对值的分布的情况由哈希函数决定，**回忆哈希函数的计算步骤，先计算哈希值，再对数组长度取模。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">index </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(key) </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> capacity</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>观察以上公式，当哈希表容量 <code>capacity</code>固定时，哈希算法 <code>hash()</code>决定了输出值。进而决定了键值对在哈希表中的分布情况。</p><p>这意味着，为了降低哈希冲突的发生概率，我们应该把注意力转移到哈希算法 <code>hash()</code>的设计上。</p><h4 id="哈希算法的目标" tabindex="-1"><a class="header-anchor" href="#哈希算法的目标"><span>哈希算法的目标</span></a></h4><p>为了实现“既快又稳”的哈希表数据结构，哈希算法应具备以下特点。</p><ul><li><strong>确定性</strong>：对于相同的输入，哈希算法应始终产生相同的输出。这样才能确保哈希表是可靠的。</li><li><strong>效率高</strong>：计算哈希值的过程应该足够快。计算开销越小，哈希表的实用性越高。</li><li><strong>均匀分布</strong>：哈希算法应使得键值对均匀分布在哈希表中。分布越均匀，哈希冲突的概率就越低。</li></ul><p>实际上，哈希算法除了可以用于实现哈希表，还广泛应用于其他领域中。</p><ul><li><p><strong>密码存储</strong>：为了保护用户密码的安全，系统通常不会直接存储用户的明文密码，而是存储密码的哈希值。当用户输入密码时，系统会对输入的密码计算哈希值，然后与存储的哈希值进行比较。如果两者匹配，那么密码就被视为正确。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># pip install bcrypt</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> bcrypt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 注册用户时，存储密码哈希</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> hash_password</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">plain_password</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 生成盐并创建哈希</span></span>
<span class="line"><span style="color:#F8F8F2;">    salt </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bcrypt.gensalt()</span></span>
<span class="line"><span style="color:#F8F8F2;">    hashed_password </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bcrypt.hashpw(plain_password.encode(</span><span style="color:#E6DB74;">&#39;utf-8&#39;</span><span style="color:#F8F8F2;">), salt)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> hashed_password</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 登录用户时，验证密码</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> check_password</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">plain_password</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">hashed_password</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 对输入的密码进行哈希，并与存储的哈希值进行比较</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> bcrypt.checkpw(plain_password.encode(</span><span style="color:#E6DB74;">&#39;utf-8&#39;</span><span style="color:#F8F8F2;">), hashed_password)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例流程</span></span>
<span class="line"><span style="color:#88846F;"># 注册：用户输入密码 &quot;my_secure_password&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">plain_password </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;my_secure_password&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">hashed_password </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> hash_password(plain_password)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;存储的哈希值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">hashed_password</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 登录：用户再次输入密码 &quot;my_secure_password&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">login_password </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;my_secure_password&quot;</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> check_password(login_password, hashed_password):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码正确，登录成功！&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码错误，登录失败！&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li><li><p><strong>数据完整性检查</strong>：数据发送方可以计算数据的哈希值并将其一同发送；接收方可以重新计算接收到的数据的哈希值，并与接收到的哈希值进行比较。如果两者匹配，那么数据就被视为完整。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> hashlib</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 发送方：计算数据的哈希值</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> calculate_hash</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    sha256 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> hashlib.sha256()</span></span>
<span class="line"><span style="color:#F8F8F2;">    sha256.update(data.encode(</span><span style="color:#E6DB74;">&#39;utf-8&#39;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 将数据编码并更新哈希计算</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> sha256.hexdigest()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 接收方：验证数据完整性</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> verify_data_integrity</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">received_data</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">received_hash</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 计算接收到的数据的哈希值</span></span>
<span class="line"><span style="color:#F8F8F2;">    calculated_hash </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> calculate_hash(received_data)</span></span>
<span class="line"><span style="color:#88846F;">    # 比较计算出的哈希值与接收的哈希值</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> calculated_hash </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> received_hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例流程</span></span>
<span class="line"><span style="color:#F8F8F2;">data_to_send </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;This is the data to be sent securely.&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_to_send </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> calculate_hash(data_to_send)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;发送的数据哈希值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">hash_to_send</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 接收方接收到数据和哈希值</span></span>
<span class="line"><span style="color:#F8F8F2;">received_data </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;This is the data to be sent securely.&quot;</span><span style="color:#88846F;">  # 模拟接收到的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">received_hash </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> hash_to_send  </span><span style="color:#88846F;"># 模拟接收到的哈希值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 检查数据完整性</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> verify_data_integrity(received_data, received_hash):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数据完整，未被篡改！&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数据不完整或被篡改！&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li></ul><p>对于密码学的相关应用，为了防止从哈希值推导出原始密码等逆向工程，哈希算法需要具备更高等级的安全特性。</p><ul><li><strong>单向性</strong>：无法通过哈希值反推出关于输入数据的任何信息。</li><li><strong>抗碰撞性</strong>：应当极难找到两个不同的输入，使得它们的哈希值相同。</li><li><strong>雪崩效应</strong>：输入的微小变化应当导致输出的显著且不可预测的变化。</li></ul><p>请注意，<strong>“均匀分布”与“抗碰撞性”是两个独立的概念</strong>，满足均匀分布不一定满足抗碰撞性。例如，在随机输入 <code>key</code> 下，哈希函数 <code>key % 100</code> 可以产生均匀分布的输出。然而该哈希算法过于简单，所有后两位相等的 <code>key</code> 的输出都相同，因此我们可以很容易地从哈希值反推出可用的 <code>key</code> ，从而破解密码。</p><h4 id="哈希算法的设计" tabindex="-1"><a class="header-anchor" href="#哈希算法的设计"><span>哈希算法的设计</span></a></h4><p>哈希算法的设计是一个需要考虑许多因素的复杂问题。然而对于某些要求不高的场景，我们也能设计一些简单的哈希算法。</p><ul><li><strong>加法哈希</strong>：对输入的每个字符的 ASCII 码进行相加，将得到的总和作为哈希值。</li><li><strong>乘法哈希</strong>：利用乘法的不相关性，每轮乘以一个常数，将各个字符的 ASCII 码累积到哈希值中。</li><li><strong>异或哈希</strong>：将输入数据的每个元素通过异或操作累积到一个哈希值中。</li><li><strong>旋转哈希</strong>：将每个字符的 ASCII 码累积到一个哈希值中，每次累积之前都会对哈希值进行旋转操作。</li></ul>`,16)),r(i,{id:"756",data:[{id:""},{id:""}]},{title0:p(({value:t,isActive:F})=>n[125]||(n[125]=[])),title1:p(({value:t,isActive:F})=>n[126]||(n[126]=[])),tab0:p(({value:t,isActive:F})=>n[127]||(n[127]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," add_hash"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"str"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    modulus "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1000000007")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," c "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        hash"),s("span",{style:{color:"#F92672"}}," +="),s("span",{style:{color:"#66D9EF"}}," ord"),s("span",{style:{color:"#F8F8F2"}},"(c)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," modulus")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," mul_hash"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"str"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    modulus "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1000000007")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," c "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," 58"),s("span",{style:{color:"#F92672"}}," *"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F92672"}}," +"),s("span",{style:{color:"#66D9EF"}}," ord"),s("span",{style:{color:"#F8F8F2"}},"(c)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," modulus")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," xor_hash"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"str"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    modulus "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1000000007")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," c "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        hash"),s("span",{style:{color:"#F92672"}}," ^="),s("span",{style:{color:"#66D9EF"}}," ord"),s("span",{style:{color:"#F8F8F2"}},"(c)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," modulus")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," rotate_hash"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"key"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"str"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    modulus "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1000000007")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," c "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," key:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," ("),s("span",{style:{color:"#66D9EF"}},"hash"),s("span",{style:{color:"#F92672"}}," <<"),s("span",{style:{color:"#AE81FF"}}," 4"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"^"),s("span",{style:{color:"#F8F8F2"}}," ("),s("span",{style:{color:"#66D9EF"}},"hash"),s("span",{style:{color:"#F92672"}}," >>"),s("span",{style:{color:"#AE81FF"}}," 28"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"^"),s("span",{style:{color:"#66D9EF"}}," ord"),s("span",{style:{color:"#F8F8F2"}},"(c)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#66D9EF"}}," hash"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," modulus")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:p(({value:t,isActive:F})=>n[128]||(n[128]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F8F8F2"}}," __name__ "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#E6DB74"}}," '__main__'"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    key "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' "Hello 算法"')]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," add_hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"加法哈希值为'),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#66D9EF"}},"hash"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," mul_hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"乘法哈希值为'),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#66D9EF"}},"hash"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," xor_hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"抑或哈希值为'),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#66D9EF"}},"hash"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},")")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    hash"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," rotate_hash(key)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'旋转哈希值为"),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#66D9EF"}},"hash"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),s("p",null,[n[131]||(n[131]=l("观察发现，每种哈希算法的最后一步都是对大质数 ")),s("mjx-container",ws,[(o(),e("svg",Zs,n[129]||(n[129]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(3500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(4000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(4500,0)"></path></g></g></g>',1)]))),n[130]||(n[130]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1000000007")])],-1))]),n[132]||(n[132]=l(" 取模，以确保哈希值在合适的范围内。值得思考的是，为什么要强调对质数取模，或者说对合数取模的弊端是什么？这是一个有趣的问题。"))]),n[197]||(n[197]=s("p",null,[l("先抛出结论："),s("strong",null,"使用大质数作为模数，可以最大化地保证哈希值的均匀分布"),l("。因为质数不与其他数字存在公约数，可以减少因取模操作而产生的周期性模式，从而避免哈希冲突。")],-1)),s("p",null,[n[145]||(n[145]=l("举个例子，假设我们选择合数 ")),s("mjx-container",Bs,[(o(),e("svg",_s,n[133]||(n[133]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"39",d:"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"})])])],-1)]))),n[134]||(n[134]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"9")])],-1))]),n[146]||(n[146]=l(" 作为模数，它可以被 ")),s("mjx-container",js,[(o(),e("svg",Cs,n[135]||(n[135]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"})])])],-1)]))),n[136]||(n[136]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"3")])],-1))]),n[147]||(n[147]=l(" 整除，那么所有可以被 ")),s("mjx-container",Ns,[(o(),e("svg",Ss,n[137]||(n[137]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"})])])],-1)]))),n[138]||(n[138]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"3")])],-1))]),n[148]||(n[148]=l(" 整除的 ")),n[149]||(n[149]=s("code",null,"key",-1)),n[150]||(n[150]=l(" 都会被映射到 ")),s("mjx-container",zs,[(o(),e("svg",Os,n[139]||(n[139]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"30",d:"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"})])])],-1)]))),n[140]||(n[140]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"0")])],-1))]),n[151]||(n[151]=l("、")),s("mjx-container",Gs,[(o(),e("svg",Js,n[141]||(n[141]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"})])])],-1)]))),n[142]||(n[142]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"3")])],-1))]),n[152]||(n[152]=l("、")),s("mjx-container",Ps,[(o(),e("svg",Is,n[143]||(n[143]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"36",d:"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"})])])],-1)]))),n[144]||(n[144]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"6")])],-1))]),n[153]||(n[153]=l(" 这三个哈希值。"))]),s("mjx-container",Xs,[(o(),e("svg",Ys,n[154]||(n[154]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1300)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1889,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2445,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(2723,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3279,0)"></path></g></g><g data-mml-node="mtd" transform="translate(3673,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1333.6,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,0)"><g data-mml-node="mtd" transform="translate(2173,0)"><g data-mml-node="mtext"><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(528,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(972,0)"></path></g></g><g data-mml-node="mtd" transform="translate(3673,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1333.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2333.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2778.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(3278.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3722.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(4222.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4667.6,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(5167.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5612.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6612.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7056.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(8056.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8501.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(9501.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9946.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10946.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(11390.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(12390.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12835.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(13835.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(14280.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(15280.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15724.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(16724.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(17169.6,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(18341.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1300)"><g data-mml-node="mtd" transform="translate(1667,0)"><g data-mml-node="mtext"><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(556,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1056,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1450,0)"></path></g></g><g data-mml-node="mtd" transform="translate(3673,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1333.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2333.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2778.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(3278.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3722.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(4222.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4667.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(5167.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5612.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(6112.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6556.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7056.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7501.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8001.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8446.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(8946.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9390.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(9890.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(10335.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(10835.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(11280.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(11780.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12224.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(12724.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(13169.6,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(14341.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></g></g></g>',1)]))),n[155]||(n[155]=s("mjx-assistive-mml",{unselectable:"on",display:"block"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mtable",{displaystyle:"true",columnalign:"right left",columnspacing:"0em",rowspacing:"3pt"},[s("mtr",null,[s("mtd",null,[s("mtext",null,"modulus")]),s("mtd",null,[s("mi"),s("mo",null,"="),s("mn",null,"9")])]),s("mtr",null,[s("mtd",null,[s("mtext",null,"key")]),s("mtd",null,[s("mi"),s("mo",null,"="),s("mo",{fence:"false",stretchy:"false"},"{"),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mn",null,"9"),s("mo",null,","),s("mn",null,"12"),s("mo",null,","),s("mn",null,"15"),s("mo",null,","),s("mn",null,"18"),s("mo",null,","),s("mn",null,"21"),s("mo",null,","),s("mn",null,"24"),s("mo",null,","),s("mn",null,"27"),s("mo",null,","),s("mn",null,"30"),s("mo",null,","),s("mn",null,"33"),s("mo",null,","),s("mo",null,"…"),s("mo",{fence:"false",stretchy:"false"},"}")])]),s("mtr",null,[s("mtd",null,[s("mtext",null,"hash")]),s("mtd",null,[s("mi"),s("mo",null,"="),s("mo",{fence:"false",stretchy:"false"},"{"),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mo",null,"…"),s("mo",{fence:"false",stretchy:"false"},"}")])])])])],-1))]),s("p",null,[n[158]||(n[158]=l("如果输入 ")),n[159]||(n[159]=s("code",null,"key",-1)),n[160]||(n[160]=l(" 恰好满足这种等差数列的数据分布，那么哈希值就会出现聚堆，从而加重哈希冲突。现在，假设将 ")),n[161]||(n[161]=s("code",null,"modulus",-1)),n[162]||(n[162]=l(" 替换为质数 ")),s("mjx-container",Ks,[(o(),e("svg",Us,n[156]||(n[156]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g>',1)]))),n[157]||(n[157]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"13")])],-1))]),n[163]||(n[163]=l(" ，由于 ")),n[164]||(n[164]=s("code",null,"key",-1)),n[165]||(n[165]=l(" 和 ")),n[166]||(n[166]=s("code",null,"modulus",-1)),n[167]||(n[167]=l(" 之间不存在公约数，因此输出的哈希值的均匀性会明显提升。"))]),s("mjx-container",Ws,[(o(),e("svg",Rs,n[168]||(n[168]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,1300)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1889,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2445,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(2723,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3279,0)"></path></g></g><g data-mml-node="mtd" transform="translate(3673,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1333.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,0)"><g data-mml-node="mtd" transform="translate(2173,0)"><g data-mml-node="mtext"><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(528,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(972,0)"></path></g></g><g data-mml-node="mtd" transform="translate(3673,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1333.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2333.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2778.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(3278.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3722.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(4222.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4667.6,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(5167.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5612.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6612.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7056.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(8056.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8501.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(9501.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9946.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10946.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(11390.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(12390.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12835.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(13835.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(14280.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(15280.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15724.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(16724.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(17169.6,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(18341.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1300)"><g data-mml-node="mtd" transform="translate(1667,0)"><g data-mml-node="mtext"><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(556,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1056,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1450,0)"></path></g></g><g data-mml-node="mtd" transform="translate(3673,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1333.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2333.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2778.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(3278.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3722.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(4222.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4667.6,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(5167.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5612.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6612.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7056.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7556.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8001.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(8501.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8946.2,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(9446.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9890.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(10890.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(11335.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11835.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(12280.2,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(12780.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(13224.9,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(13724.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(14169.6,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(15341.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></g></g></g>',1)]))),n[169]||(n[169]=s("mjx-assistive-mml",{unselectable:"on",display:"block"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mtable",{displaystyle:"true",columnalign:"right left",columnspacing:"0em",rowspacing:"3pt"},[s("mtr",null,[s("mtd",null,[s("mtext",null,"modulus")]),s("mtd",null,[s("mi"),s("mo",null,"="),s("mn",null,"13")])]),s("mtr",null,[s("mtd",null,[s("mtext",null,"key")]),s("mtd",null,[s("mi"),s("mo",null,"="),s("mo",{fence:"false",stretchy:"false"},"{"),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mn",null,"9"),s("mo",null,","),s("mn",null,"12"),s("mo",null,","),s("mn",null,"15"),s("mo",null,","),s("mn",null,"18"),s("mo",null,","),s("mn",null,"21"),s("mo",null,","),s("mn",null,"24"),s("mo",null,","),s("mn",null,"27"),s("mo",null,","),s("mn",null,"30"),s("mo",null,","),s("mn",null,"33"),s("mo",null,","),s("mo",null,"…"),s("mo",{fence:"false",stretchy:"false"},"}")])]),s("mtr",null,[s("mtd",null,[s("mtext",null,"hash")]),s("mtd",null,[s("mi"),s("mo",null,"="),s("mo",{fence:"false",stretchy:"false"},"{"),s("mn",null,"0"),s("mo",null,","),s("mn",null,"3"),s("mo",null,","),s("mn",null,"6"),s("mo",null,","),s("mn",null,"9"),s("mo",null,","),s("mn",null,"12"),s("mo",null,","),s("mn",null,"2"),s("mo",null,","),s("mn",null,"5"),s("mo",null,","),s("mn",null,"8"),s("mo",null,","),s("mn",null,"11"),s("mo",null,","),s("mn",null,"1"),s("mo",null,","),s("mn",null,"4"),s("mo",null,","),s("mn",null,"7"),s("mo",null,","),s("mo",null,"…"),s("mo",{fence:"false",stretchy:"false"},"}")])])])])],-1))]),n[198]||(n[198]=a(`<p>值得说明的是，如果能够保证 <code>key</code> 是随机均匀分布的，那么选择质数或者合数作为模数都可以，它们都能输出均匀分布的哈希值。而当 <code>key</code> 的分布存在某种周期性时，对合数取模更容易出现聚集现象。</p><p>总而言之，我们通常选取质数作为模数，并且这个质数最好足够大，以尽可能消除周期性模式，提升哈希算法的稳健性。</p><h4 id="常见哈希算法" tabindex="-1"><a class="header-anchor" href="#常见哈希算法"><span>常见哈希算法</span></a></h4><p>不难发现，以上介绍的简单哈希算法都比较“脆弱”，远远没有达到哈希算法的设计目标。例如，由于加法和异或满足交换律，因此加法哈希和异或哈希无法区分内容相同但顺序不同的字符串，这可能会加剧哈希冲突，并引起一些安全问题。</p><p>在实际中，我们通常会用一些标准哈希算法，例如 MD5、SHA-1、SHA-2 和 SHA-3 等。它们可以将任意长度的输入数据映射到恒定长度的哈希值。</p><p>近一个世纪以来，哈希算法处在不断升级与优化的过程中。一部分研究人员努力提升哈希算法的性能，另一部分研究人员和黑客则致力于寻找哈希算法的安全性问题。下表展示了在实际应用中常见的哈希算法。</p><ul><li>MD5 和 SHA-1 已多次被成功攻击，因此它们被各类安全应用弃用。</li><li>SHA-2 系列中的 SHA-256 是最安全的哈希算法之一，仍未出现成功的攻击案例，因此常用在各类安全应用与协议中。</li><li>SHA-3 相较 SHA-2 的实现开销更低、计算效率更高，但目前使用覆盖度不如 SHA-2 系列。</li></ul><div style="text-align:center;"><p>表 6-2 常见的哈希算法</p></div><table><thead><tr><th></th><th>MD5</th><th>SHA-1</th><th>SHA-2</th><th>SHA-3</th></tr></thead><tbody><tr><td>推出时间</td><td>1992</td><td>1995</td><td>2002</td><td>2008</td></tr><tr><td>输出长度</td><td>128 bit</td><td>160 bit</td><td>256/512 bit</td><td>224/256/384/512 bit</td></tr><tr><td>哈希冲突</td><td>较多</td><td>较多</td><td>很少</td><td>很少</td></tr><tr><td>安全等级</td><td>低，已被成功攻击</td><td>低，已被成功攻击</td><td>高</td><td>高</td></tr><tr><td>应用</td><td>已被弃用，仍用于数据完整性检查</td><td>已被弃用</td><td>加密货币交易验证、数字签名等</td><td>可用于替代 SHA-2</td></tr></tbody></table><h4 id="数据结构的哈希值" tabindex="-1"><a class="header-anchor" href="#数据结构的哈希值"><span>数据结构的哈希值</span></a></h4><p>我们知道，哈希表的 <code>key</code> 可以是整数、小数或字符串等数据类型。编程语言通常会为这些数据类型提供内置的哈希算法，用于计算哈希表中的桶索引。以 Python 为例，我们可以调用 <code>hash()</code> 函数来计算各种数据类型的哈希值。</p><ul><li>整数和布尔量的哈希值就是其本身。</li><li>浮点数和字符串的哈希值计算较为复杂，有兴趣的读者请自行学习。</li><li>元组的哈希值是对其中每一个元素进行哈希，然后将这些哈希值组合起来，得到单一的哈希值。</li><li>对象的哈希值基于其内存地址生成。通过重写对象的哈希方法，可实现基于内容生成哈希值。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>请注意，不同编程语言的内置哈希值计算函数的定义和方法不同。</p></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">num </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 3</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_num </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(num)</span></span>
<span class="line"><span style="color:#88846F;"># 整数 3 的哈希值为 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">bol </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_bol </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(bol)</span></span>
<span class="line"><span style="color:#88846F;"># 布尔量 True 的哈希值为 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dec </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 3.14159</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_dec </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(dec)</span></span>
<span class="line"><span style="color:#88846F;"># 小数 3.14159 的哈希值为 326484311674566659</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &quot;Hello 算法&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_str </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;"># 字符串“Hello 算法”的哈希值为 4617003410720528961</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">12836</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;小哈&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_tup </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#88846F;"># 元组 (12836, &#39;小哈&#39;) 的哈希值为 1029005403108185979</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ListNode(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">hash_obj </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> hash</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"><span style="color:#88846F;"># 节点对象 &lt;ListNode object at 0x1058fd810&gt; 的哈希值为 274267521</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,14))])}const an=d(Z,[["render",$s]]),en=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week05.html","title":"高级算法——第5周ppt总结","lang":"zh-CN","frontmatter":{"title":"高级算法——第5周ppt总结","icon":"python","date":"2024-10-21T09:00:32.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1729564384000,"updatedTime":1731495153000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":8,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":44.6,"words":13381},"filePathRelative":"zh/Advanced_Algorithms/Week05.md","localizedDate":"2024年10月21日"}');export{an as comp,en as data};

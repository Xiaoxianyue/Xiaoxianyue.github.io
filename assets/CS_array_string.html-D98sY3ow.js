import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-DU3DxG77.js";const t="/assets/9ded97eec60bb3c601418f1044a4c7f-BnSBIZLW.png",p={},c=e(`<h2 id="_1-数组" tabindex="-1"><a class="header-anchor" href="#_1-数组"><span>1. 数组</span></a></h2><h3 id="_1-1-数组" tabindex="-1"><a class="header-anchor" href="#_1-1-数组"><span>1.1 数组</span></a></h3><p>C# 提供了许多内置的类来存储和操作数据。</p><p>数组(Array)就是其中的一种。</p><p>数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。</p><p>例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。</p><p>数组的声明格式如下：<code>数字类型[] 数组名称</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> myArray<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个语句声明了一个整型数组。由于数组是对象，我们需要用 new 关键字来实例化它们：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例化一个名为 myArray 的数组，其中 5 为数组的长度，可以存放 5 个整型的数值。</p><p>【填空题】实例化一个能存放 42 个 double 类型数值的数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">_double__ <span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> __new_ <span class="token keyword">double</span><span class="token punctuation">[</span>_42__<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>double ; new ; 42</p></blockquote><h3 id="_1-2-数组的索引" tabindex="-1"><a class="header-anchor" href="#_1-2-数组的索引"><span>1.2 数组的索引</span></a></h3><p>创建数组后，您可以使用索引的方式将值分配给数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这会将 23 分配给数组的第一个元素。</p><blockquote><p>C# 中数组的索引是从 0 开始的,即数组的第一个值索引号为 0，第二个值的索引号为 1，依此类推。</p></blockquote><p>【填空题】数组第三个值的索引号是？「2」</p><h3 id="_1-3-数组的初始值" tabindex="-1"><a class="header-anchor" href="#_1-3-数组的初始值"><span>1.3 数组的初始值</span></a></h3><p>使用大括号声明时，我们可以向数组提供初始值，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jessica&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">double</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">5.9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但其实，在有设置初始值的数值时，我们可以省略数组的大小，上面的数组定义，也可以写成：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jessica&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> <span class="token punctuation">{</span><span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">5.9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至，可以省略实例化的关键字：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jessica&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">double</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> prices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">5.9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>【填空题】实例化一个带初始值的数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> __<span class="token punctuation">{</span>_ <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> _<span class="token punctuation">}</span>__<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>int[ ] a = {1, 2, 3} ;</p></blockquote><h3 id="_1-4-通过索引访问数组" tabindex="-1"><a class="header-anchor" href="#_1-4-通过索引访问数组"><span>1.4 通过索引访问数组</span></a></h3><p>之前我们有提到过，数组中的每个元素都有一个索引号。</p><p>例如，我们来一下下面的数组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组 b 有如下索引：</p><figure><img src="`+t+`" alt="9ded97eec60bb3c601418f1044a4c7f" tabindex="0" loading="lazy"><figcaption>9ded97eec60bb3c601418f1044a4c7f</figcaption></figure><p>所以，当我们要访问 b 数组中的某个元素时，只要通过数组的索引号就能获取某个元素：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出62</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出70</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是，C# 的数组索引号是从 <strong>0</strong> 开始的。</p><p>【填空题】执行以下代码后 x 的值是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//x = 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-数组的遍历" tabindex="-1"><a class="header-anchor" href="#_2-数组的遍历"><span>2. 数组的遍历</span></a></h2><h3 id="_2-1-数组的遍历" tabindex="-1"><a class="header-anchor" href="#_2-1-数组的遍历"><span>2.1 数组的遍历</span></a></h3><p>有时候,我们会需要对数组进行遍历，为数组赋值。使用循环，可以很方便的对数组进行遍历。</p><p>例如，可以声明一个由 10 个整数组成的数组，并用下面的循环为每个元素赋一个偶数值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用循环来读取数组的值。</p><p>例如，我们可以显示刚刚创建的数组的内容：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 k 用于访问每个数组元素。数组中的最后一个索引是 9，所以 fo r循环条件是 <code>k &lt;10</code> 。</p><p>【填空题】使用 for 循环打印数组全部元素</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">__for_</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span> __7_<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>__arr_<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>for ； 7 ；arr</p></blockquote><p>题目·：编写一个 C# 程序，使用 for 循环遍历一个整数数组并计算该数组的所有元素的总和。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>int[] numbers = { 1, 2, 3, 4, 5 };
int total = 0;
for (int i = 0;i &lt; 5; i++)
{
    
    total+= numbers[i];   
}
Console.WriteLine(total);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-foreach-遍历" tabindex="-1"><a class="header-anchor" href="#_2-2-foreach-遍历"><span>2.2 foreach 遍历</span></a></h3><p>foreach 循环提供了一种更简单的方法来对数组进行遍历。</p><p>例如前面数组我们也可以使用 foreach 循环来遍历：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> k <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>foreach 循环遍历数组 a,并在循环的每次迭代中将当前元素的值赋给变量 k。因此，在第一次迭代中，<code>k = a [0]</code>，第二次 <code>k = a [1]</code>，以此类推。</p><blockquote><p>foreach 循环中，变量的数据类型应该匹配数组的类型。</p><p>关键字 var 也经常用作变量的类型，如：<code>foreach(var k in a)</code>。关于 var 关键词，我们会在后面的章节中进行阐述。</p></blockquote><p>【填空题】创建一个有效的 foreach 循环，显示数组中所有的偶数元素。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span></span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">_foreach__</span><span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token class-name">__in_</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>__n_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>foreach in n</p></blockquote><h3 id="_2-3-实践-使用循环计算数组总和" tabindex="-1"><a class="header-anchor" href="#_2-3-实践-使用循环计算数组总和"><span>2.3 实践：使用循环计算数组总和</span></a></h3><p>下面，让我们使用 foreach 循环来计算数组中所有元素的总和：</p><p>int[ ] arr = {11, 35, 62, 555, 989};</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>int[] arr = { 11, 35, 62, 555, 989 };
int total = 0;
foreach (int i in arr)
{
    total += i;
}
Console.WriteLine(total);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68),o=[c];function l(i,u){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","CS_array_string.html.vue"]]),m=JSON.parse(`{"path":"/zh/CS/CS_array_string.html","title":"C#->string & array","lang":"zh-CN","frontmatter":{"title":"C#->string & array","icon":"c","date":"2024-05-08T15:52:19.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 数组 1.1 数组 C# 提供了许多内置的类来存储和操作数据。 数组(Array)就是其中的一种。 数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。 例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。 数组的声明格式如下：数字类型[] 数组名称 这个语句声明...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/CS/CS_array_string.html"}],["meta",{"property":"og:site_name","content":"an istj's zone"}],["meta",{"property":"og:title","content":"C#->string & array"}],["meta",{"property":"og:description","content":"1. 数组 1.1 数组 C# 提供了许多内置的类来存储和操作数据。 数组(Array)就是其中的一种。 数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。 例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。 数组的声明格式如下：数字类型[] 数组名称 这个语句声明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T17:31:17.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-08T15:52:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T17:31:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#->string & array\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-08T15:52:19.000Z\\",\\"dateModified\\":\\"2024-05-08T17:31:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 数组","slug":"_1-数组","link":"#_1-数组","children":[{"level":3,"title":"1.1 数组","slug":"_1-1-数组","link":"#_1-1-数组","children":[]},{"level":3,"title":"1.2 数组的索引","slug":"_1-2-数组的索引","link":"#_1-2-数组的索引","children":[]},{"level":3,"title":"1.3 数组的初始值","slug":"_1-3-数组的初始值","link":"#_1-3-数组的初始值","children":[]},{"level":3,"title":"1.4 通过索引访问数组","slug":"_1-4-通过索引访问数组","link":"#_1-4-通过索引访问数组","children":[]}]},{"level":2,"title":"2. 数组的遍历","slug":"_2-数组的遍历","link":"#_2-数组的遍历","children":[{"level":3,"title":"2.1 数组的遍历","slug":"_2-1-数组的遍历","link":"#_2-1-数组的遍历","children":[]},{"level":3,"title":"2.2 foreach 遍历","slug":"_2-2-foreach-遍历","link":"#_2-2-foreach-遍历","children":[]},{"level":3,"title":"2.3 实践：使用循环计算数组总和","slug":"_2-3-实践-使用循环计算数组总和","link":"#_2-3-实践-使用循环计算数组总和","children":[]}]}],"git":{"createdTime":1701435902000,"updatedTime":1715189477000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":2}]},"readingTime":{"minutes":4.2,"words":1260},"filePathRelative":"zh/CS/CS_array_string.md","localizedDate":"2024年5月8日","excerpt":"<h2>1. 数组</h2>\\n<h3>1.1 数组</h3>\\n<p>C# 提供了许多内置的类来存储和操作数据。</p>\\n<p>数组(Array)就是其中的一种。</p>\\n<p>数组是一种用于存储数据集合的数据结构。你可以把它看作是一个同类型变量的集合。</p>\\n<p>例如，需要存储 100 个号码的情况，你可以考虑声明一个能存储 100 个元素的数组对象，而不是声明一百个变量。</p>\\n<p>数组的声明格式如下：<code>数字类型[] 数组名称</code></p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span> <span class=\\"token punctuation\\">]</span></span> myArray<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,m as data};

import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-B-t0e56n.js";const p={},t=e(`<h2 id="_1-方法介绍" tabindex="-1"><a class="header-anchor" href="#_1-方法介绍"><span>1. 方法介绍</span></a></h2><h3 id="_1-1-什么是方法" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是方法"><span>1.1 什么是方法？</span></a></h3><p>方法是执行特定需求的一组代码语句。</p><p>C# 内置了许多方法,当然,你也可以自定义方法。</p><p>方法有很多优点,包括:</p><ul><li>代码可以被重复使用。</li><li>方便测试。</li><li>方法相对独立,修改方法的时候不会影响其他已经调试好的程序。</li><li>一个方法可以有多种不同的参数输入。</li></ul><blockquote><p>每个 C# 程序都至少有一个方法: <code>Main()</code>。</p></blockquote><p>【单选题】C# 程序都是从哪个方法开始的 A.</p><p>A. Main</p><p>B. using</p><p>C. Start</p><p>D. Console</p><h3 id="_1-2-方法的声明" tabindex="-1"><a class="header-anchor" href="#_1-2-方法的声明"><span>1.2 方法的声明</span></a></h3><p>方法使用前必须先声明,您需要声明该方法，然后才能调用它。</p><p>方法的声明包括：</p><ul><li><p>方法的返回类型</p></li><li><p>方法的名称</p></li><li><p>一个可选的参数列表。</p></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token keyword">return</span> type<span class="token operator">&gt;</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">type1</span> par1<span class="token punctuation">,</span> <span class="token class-name">type2</span> par2<span class="token punctuation">,</span> … <span class="token punctuation">,</span> <span class="token class-name">typeN</span> parN<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    List of statements
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，下面的例子，声明了一个名字为 Sqr 的方法用于求出入参数的平方值，返回类型为 int，允许传入的参数类型为 int：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sqr</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> x<span class="token operator">*</span>x<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的返回类型在上面的例子中，返回类型是 int，表示该方法返回一个整数值。 当一个方法返回一个值时，它必须包含一个 return 语句。 在赋值语句中经常使用返回值的方法。</p><blockquote><p>有时候,我们会遇到一个方法只要执行一些操作，却不需要返回值，这时候，我们可以声明方法的返回类型为 void。当方法的返回值类型为 void 的时候，该方法不能作为赋值语句被使用。</p></blockquote><p>【填空题】如果你需要声明一个没有返回值的方法，则方法的返回值类型为？</p><h3 id="_1-3-方法的调用" tabindex="-1"><a class="header-anchor" href="#_1-3-方法的调用"><span>1.3 方法的调用</span></a></h3><p>参数其实是可选的,也就是说,你完全可以定义一个不需要参数的方法。</p><p>下面举个例子，我们定义一个没有参数，没有返回值的方法，该方法的作用是在屏幕上打印一行文本。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一个名称为 SayHi 的方法，不需要参数，也没有返回值。</p><p>要使用一个方法，只需要在语句中使用该方法的名称和该方法所需要的参数即可，如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出&quot;Hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 SayHi 方法不需要参数，所以在调用的时候不需要赋予相应的参数。</p><p>static 关键字将在后面讨论，它的主要作用是让该方法更便于 Main 函数调用。</p><p>【填空题】填空，声明一个没有返回值的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Welcome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的其中一个优点就是可复用性，比如下面的例子：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 输出:
Hello
Hello
Hello 
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 Main 方法中，多次调用 SayHi 方法，SayHi 执行了多次。</p><p>选择填空，声明一个有效的方法，并在 Main 中调用它：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-方法参数" tabindex="-1"><a class="header-anchor" href="#_2-方法参数"><span>2. 方法参数</span></a></h2><h3 id="_2-1-参数" tabindex="-1"><a class="header-anchor" href="#_2-1-参数"><span>2.1 参数</span></a></h3><p>方法声明的时候可以自定义要使用的参数。参数是在调用该方法时需要传入的变量。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子定义了一个名为 Prin t的方法,它可以接受一个 int 类型的值,并且打印该值。</p><blockquote><p>参数的变量跟局部变量有点类似，参数的变量在该方法被调用的时候创建，并且在方法结束以后被注销。</p></blockquote><p>【填空题】填空，创建一个方法,传入一个int类型的参数,显示该参数除以2以后的计算结果</p><p>【填空题】填空，创建一个方法，传入一个 int 类型的参数，显示该参数除以 2 以后的计算结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token class-name">___</span> x<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> x ___ <span class="token number">2</span><span class="token punctuation">;</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>___<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-调用带参数的方法" tabindex="-1"><a class="header-anchor" href="#_2-2-调用带参数的方法"><span>2.2 调用带参数的方法</span></a></h3><p>现在你可以在 Main 中调用带参数的方法，并传递参数：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>42 作为参数传递给方法，并分配给形式参数 x。</p><p>【填空题】创建一个带参数的方法，并在 Mian 函数中调用它，参数值为 88:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>___ <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">___</span><span class="token punctuation">(</span>___<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-参数类型" tabindex="-1"><a class="header-anchor" href="#_2-3-参数类型"><span>2.3 参数类型</span></a></h3><p>我们在声明方法的时候指定了相应的参数类型，所以只要是符合该类型的值，都可以作为参数传递给方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出10</span>
  
  <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出24</span>

  <span class="token function">Func</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出84</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【单选题】方法可以被不同的参数调用几次？ C.</p><p>A. 不可被调用</p><p>B. 一次</p><p>C. 任意次数</p><h2 id="_3-多个参数" tabindex="-1"><a class="header-anchor" href="#_3-多个参数"><span>3. 多个参数</span></a></h2><h3 id="_3-1-多个参数" tabindex="-1"><a class="header-anchor" href="#_3-1-多个参数"><span>3.1 多个参数</span></a></h3><p>通过逗号的分隔，你可以根据需要，为方法定义多个参数。</p><p>我们来创建一个返回两个参数之和的简单方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sum 方法接受两个 int 类型的参数，并返回这两个参数的和。</p><blockquote><p>因为该方法有返回值，所以定义该方法的时候，参数也不再是 void 类型，而是 int 类型。</p><p>方法使用 return 返回需要返回的值。</p></blockquote><p>【填空题】填空定义一个接受两个参数，并且返回值为 int 类型的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name">___</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a ___ <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
 <span class="token comment">// some code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-多参数方法的调用" tabindex="-1"><a class="header-anchor" href="#_3-2-多参数方法的调用"><span>3.2 多参数方法的调用</span></a></h3><p>多个参数在定义的时候使用逗号分隔参数，在调用仍然是使用逗号进行参数的分隔，例如：我们调用刚才创建的 Sum 方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 输出14</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的调用中，返回值直接显示在控制台窗口中。或者我们可以将返回值分配给一个变量，如下面的代码所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出53</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>你可以根据需要将任意数量的参数添加到方法中。 如果您有多个参数，请记住在声明它们和调用方法的时候，用逗号对它们进行分隔。</p></blockquote><p>【填空题】填空声明一个方法，它返回两个参数中较大的值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a ___ <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span>
      <span class="token class-name">___</span> a<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> ___<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-可选参数和命名参数" tabindex="-1"><a class="header-anchor" href="#_4-可选参数和命名参数"><span>4. 可选参数和命名参数</span></a></h2><h3 id="_4-1-可选参数" tabindex="-1"><a class="header-anchor" href="#_4-1-可选参数"><span>4.1 可选参数</span></a></h3><p>定义方法时，可以为可选参数指定一个默认值。需要注意的是，可选参数必须在需要的参数之后定义。</p><p>比如我们将参数 y 设为可选参数，并为它指定一个值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Pow</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    result <span class="token operator">*=</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pow 方法为 y 参数分配一个默认值 2。 如果我们调用方法时没有为 y 指定值，则 y 默认为 2。</p><p>下面使用一下 Pow 方法，看一下可选参数的调用以及对结果的影响：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出36</span>

  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出81</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的示例可以看出，使用可选参数可以在更复杂的情况下调用相同的方法而不需要为方法指定对应的参数。</p><p>值得注意的是,在定义可选参数的时候，必须放在需要的参数后面。</p><p>【填空题】运行该方法以后最终的输出结果是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Vol</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x<span class="token operator">*</span>y<span class="token operator">*</span>z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Vol</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-命名参数" tabindex="-1"><a class="header-anchor" href="#_4-2-命名参数"><span>4.2 命名参数</span></a></h3><p>有时候，太多的参数，我们在调用的时候，会忘记参数的具体顺序，命名参数的作用就是使你无需记住参数的具体顺序，每个参数都可以通过指定的参数名称来匹配，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> h<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> w<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> h <span class="token operator">*</span> w<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们调用上面的参数的时候，可以这样使用：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">Area</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">w</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">h</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出40</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>命名参数调用的时候,用冒号分隔参数名称和值。</p></blockquote><p>【填空题】填空调用一个命名参数，参数名称 from 的值为 5，to 的值为 99，step 的值为 2</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> from<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> to<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span>from<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>to<span class="token punctuation">;</span>i<span class="token operator">+=</span>step<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res <span class="token operator">+=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token function">___</span><span class="token punctuation">(</span>___2<span class="token punctuation">,</span> ___99<span class="token punctuation">,</span>___5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-参数的传递" tabindex="-1"><a class="header-anchor" href="#_5-参数的传递"><span>5. 参数的传递</span></a></h2><h3 id="_5-1-按值传递参数" tabindex="-1"><a class="header-anchor" href="#_5-1-按值传递参数"><span>5.1 按值传递参数</span></a></h3><p>当方法被调用时，有三种方法可以将参数传递给方法：按值，按引用和按输出。是不是很难理解？我们下面将会详细介绍三种参数传递方式的区别。</p><p>我们首先来说说按值传递，按值传递是通过形式参数将值传递到方法中，在方法中，我们可以对传递的值进行修改而不会影响原先变量的值，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sqr</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  x <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token function">Sqr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出后可以发现,a的值仍为3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a 是要传递给方法的一个变量，称为实际参数，a 的值为 3。在方法 Sqr 中，我们对 x 的值进行修改，x 称为形式参数，它的值是传递过来实际参数 a 的值，也为 3。我们在 Sqr 方法中对 x 的值进行任意修改，但是这并不会影响 a 的值，这就有区别于按引用传递了，按引用传递我们下一节讲。</p><blockquote><p>C# 默认的传递方式是按值传递。</p><p>正如你所看到的, Sqr 方法不会改变原先变量的值，这意味着它是对传递进来的值而不是对实际变量进行操作。</p></blockquote><p>【填空题】以下代码运行后的最终输出结果是？</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token function">Test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-按引用传递参数" tabindex="-1"><a class="header-anchor" href="#_5-2-按引用传递参数"><span>5.2 按引用传递参数</span></a></h3><p>按引用传递参数的时候，实际是把内存地址传递到方法中，在方法内部，对参数进行操作，会直接访问内存地址中的变量，这也意味着，在方法中对形式参数进行操作，会影响实际参数的值。</p><p>要按引用传递值，需要在调用和方法定义中都使用 ref 关键字：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sqr</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  x <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token function">Sqr</span><span class="token punctuation">(</span><span class="token keyword">ref</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出的结果为:9</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的例子和上一节的例子对比我们可以发现,按引用传递参数，在 Sqr 中对 x 进行操作，会直接影响实际参数。a 的值。</p><blockquote><p>ref 关键字将内存地址传递给方法，该参数允许方法对实际变量进行操作。</p></blockquote><blockquote><p>按引用传递参数，在定义方法和调用方法时都需要使用 ref 关键字。</p></blockquote><p>【填空题】填空创建一个按引用传递参数的方法，该方法交换两个参数的值：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Swap</span><span class="token punctuation">(</span>__ref_ <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> _ref__ <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> temp<span class="token punctuation">;</span>
  temp <span class="token operator">=</span> x<span class="token punctuation">;</span>
  x <span class="token operator">=</span> y<span class="token punctuation">;</span>
  y <span class="token operator">=</span> __temp_ <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ref ref temp</p></blockquote><h3 id="_5-3-按输出传递参数" tabindex="-1"><a class="header-anchor" href="#_5-3-按输出传递参数"><span>5.3 按输出传递参数</span></a></h3><p>按输出传递参数和按引用传递参数有点类似，都会直接修改实际参数的值,不同之处在于，按输出传递参数是从方法中输出参数，而不是接受参数传入。按输出传递参数需要使用 out 关键字,如下例子所示:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  y <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
  <span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">out</span> a<span class="token punctuation">,</span> <span class="token keyword">out</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//此时,a的值为5,b的值为42</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类似于 ref 关键字，需要使用按输出传递参数时，在定义方法和调用方法时都需要使用 out 关键字。</p></blockquote><p>【填空题】填空，构建一个使用按输出传递参数的方法来获取用户的输入值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Ask</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    __name_ <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name"><span class="token keyword">string</span></span> nm<span class="token punctuation">;</span>
  <span class="token function">Ask</span><span class="token punctuation">(</span><span class="token keyword">out</span> nm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-方法的重载" tabindex="-1"><a class="header-anchor" href="#_6-方法的重载"><span>6. 方法的重载</span></a></h2><h3 id="_6-1-方法的重载" tabindex="-1"><a class="header-anchor" href="#_6-1-方法的重载"><span>6.1 方法的重载</span></a></h3><p>方法重载是指多个方法具有相同的名称，但参数不同。</p><p>例如，你可能有一个将参数输出到控制台窗口的方法 Print：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Value: &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，&quot;+&quot;运算符用于连接值。如 a 等于 3，则最终控制台的输出文本为“Value:3”。</p><p>但是这个方法只接受一个整数参数，如果我们需要传入一个浮点型变量怎么办?</p><p>我们可以重载这个方法，使它允许传入一个浮点类型的参数:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Value: &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 Print 方法不但可以接受一个整形变量，也可以接受一个浮点型变量了。</p><p>【单选题】方法的重载意味着？C.</p><p>A. 打印参数</p><p>B. 相同的参数，不同的方法名称</p><p>C. 相同的方法名称，不同的参数</p><h3 id="_6-2-重载方法的调用" tabindex="-1"><a class="header-anchor" href="#_6-2-重载方法的调用"><span>6.2 重载方法的调用</span></a></h3><p>当定义重载方法时，方法的参数根据类型或者数量而不同。</p><p>当有重载的方法时，所调用的方法是基于参数的。 整型参数将调用接受整型参数的方法，浮点型参数将调用接受浮点型参数的方法，多个参数将调用接受相同数量参数的方法。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Value: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Value: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> label<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>label <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">4.13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Average: &quot;</span><span class="token punctuation">,</span> <span class="token number">7.57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重载必须是参数不同的方法,不能重载只有返回类型不同的方法声明。</p><p>以下声明导致错误。</p><p><code>int PrintName（int a）{}</code></p><p><code>float PrintName（int b）{}</code></p><p><code>double PrintName（int c）{}</code></p></blockquote><p>以下代码运行后最终输出的结果是:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>a<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//output 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-递归" tabindex="-1"><a class="header-anchor" href="#_7-递归"><span>7. 递归</span></a></h2><h3 id="_7-1-递归" tabindex="-1"><a class="header-anchor" href="#_7-1-递归"><span>7.1 递归</span></a></h3><p>递归方法是一种自我调用的方法。</p><p>通过递归很容易解决的一个经典任务就是计算一个数的阶乘。</p><p>在数学中，阶乘是指所有小于或等于特定的非负整数（n）的正整数的乘积。 n 的阶乘表示为 <code>n!</code></p><p>例如：</p><blockquote><p>4! = 4 * 3 * 2 * 1 = 24</p></blockquote><h3 id="_7-2-递归的算法" tabindex="-1"><a class="header-anchor" href="#_7-2-递归的算法"><span>7.2 递归的算法</span></a></h3><p>通过分析前面的示例跟习题我们可以发现，阶乘的算法可以归纳为重复 <code>num*num-1</code>，直到 <code>num=1</code>。</p><p>基于这个想法，我们实现阶乘的计算方法:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Fact</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">Fact</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Fact 递归方法中，if 语句定义了退出条件，这是因为 1 是一个不需要递归的情况。在这种情况下，当 num 等于 1 时，解决方案就是简单地返回 1（1的阶乘是1）。</p><p>递归调用放在退出条件之后，并返回乘以 n-1 阶乘的 num。</p><p>例如，如果您使用参数 4 调用 Fact 方法，它将执行如下：</p><p>返回 <code>4 *Fact(3)</code>，即 <code>4 * 3 *Fact(2)</code>，即 <code>4 * 3 * 2 *Fact(1)</code>，即 <code>4 * 3 * 2 * 1</code>。</p><p>如果在 Main 函数中调用 Fact 方法:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">Fact</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//输出720</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当参数 num 不为 1 的时候，Fact 不断的调用自己，直到 num 等于 1 的时候停止，这样我们得到了阶乘的最终计算结果了。当然，如果没有退出条件，Fact 会一直执行下去，即无线循环，也称为死循环。</p></blockquote><p>【单选题】如何阻止递归方法永远调用自己？B.</p><p>A. 静态关键字</p><p>B. 退出条件</p><p>C. Main 函数</p><h2 id="_8-实践-输出一个金字塔" tabindex="-1"><a class="header-anchor" href="#_8-实践-输出一个金字塔"><span>8. 实践：输出一个金字塔</span></a></h2><h3 id="_8-1-打印一个金字塔" tabindex="-1"><a class="header-anchor" href="#_8-1-打印一个金字塔"><span>8.1 打印一个金字塔</span></a></h3><p>现在，让我们创建一个方法，使用星号&quot;<code>*</code>&quot;将任何高度的金字塔显示到控制台窗口中。</p><p>基于这个需求，我们需要定义一个参数来控制金字塔的行数(即金字塔的高度)。</p><p>首先，让我们开始声明方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DrawPyramid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//循环控制*号的输出</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DrawPyramid 不需要返回值，但是需要一个参数来控制金字塔的高度：</p><p>在编程过程中，解决问题所需的逐步逻辑称为算法。 MakePyramid 的算法是：</p><ol><li><p>第一行应包含金字塔顶部中心的一颗星。中心是根据金字塔中的行数计算的。</p></li><li><p>第一行之后的每行应包含奇数个星号（1,3,5 等），直到达到行数。</p></li></ol><p>基于该算法，代码将使用 for 循环来显示每行的空格和星号：</p><p>第一排中心*：（n-1）/2</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>using System;

class Program
{
    // 定义一个方法来绘制金字塔
    // static void DrawPyramid(int n)
    // {
    //     // 循环每一层 i 从 1 到 n
    //     for (int i = 1; i &lt;= n; i++)
    //     {
    //         // 打印空格，为了金字塔形状向右对齐
    //         for (int j = i; j &lt;= n; j++)
    //         {
    //             Console.Write(&quot;  &quot;); // 每层前的空格数量与层数成反比
    //         }
    //         // 打印星号，当前层 i 的星号数量为 2 * i - 1
    //         for (int k = 1; k &lt;= 2 * i - 1; k++)
    //         {
    //             Console.Write(&quot;* &quot;); // 在星号后面加一个空格以形成更清晰的金字塔形状
    //         }
    //         // 每打印完一层后换行
    //         Console.WriteLine();
    //     }
    // }
    static void DrawPyramid(int n)
    {
        for (int i = 1; i &lt;= n; i++)
        {
            for (int j = i; j &lt;= n; j++)
            {
                Console.Write(&quot;  &quot;);
            }
            for (int k = 1; k &lt;= 2 * i - 1; k++)
            {
                Console.Write(&quot;*&quot; + &quot; &quot;);
            }
            Console.WriteLine();
        }
    }

    // 主函数
    static void Main()
    {
        // 提示用户输入金字塔的高度
        Console.Write(&quot;请输入金字塔的高度：&quot;);
        int n;

        // 读取用户输入并尝试转换为整数
        while (!int.TryParse(Console.ReadLine(), out n) || n &lt;= 0)
        {
            Console.WriteLine(&quot;输入无效，请输入一个正整数：&quot;);
        }

        // 调用 DrawPyramid 方法绘制金字塔
        DrawPyramid(n);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,177),c=[t];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","Method.html.vue"]]),k=JSON.parse(`{"path":"/zh/CS/Method.html","title":"C#->Method","lang":"zh-CN","frontmatter":{"title":"C#->Method","icon":"c","date":"2024-04-29T09:05:26.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 方法介绍 1.1 什么是方法？ 方法是执行特定需求的一组代码语句。 C# 内置了许多方法,当然,你也可以自定义方法。 方法有很多优点,包括: 代码可以被重复使用。 方便测试。 方法相对独立,修改方法的时候不会影响其他已经调试好的程序。 一个方法可以有多种不同的参数输入。 每个 C# 程序都至少有一个方法: Main()。 【单选题】C# 程序都是...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/CS/Method.html"}],["meta",{"property":"og:site_name","content":"an istj's zone"}],["meta",{"property":"og:title","content":"C#->Method"}],["meta",{"property":"og:description","content":"1. 方法介绍 1.1 什么是方法？ 方法是执行特定需求的一组代码语句。 C# 内置了许多方法,当然,你也可以自定义方法。 方法有很多优点,包括: 代码可以被重复使用。 方便测试。 方法相对独立,修改方法的时候不会影响其他已经调试好的程序。 一个方法可以有多种不同的参数输入。 每个 C# 程序都至少有一个方法: Main()。 【单选题】C# 程序都是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-07T14:30:54.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-04-29T09:05:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-07T14:30:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#->Method\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-29T09:05:26.000Z\\",\\"dateModified\\":\\"2024-05-07T14:30:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 方法介绍","slug":"_1-方法介绍","link":"#_1-方法介绍","children":[{"level":3,"title":"1.1 什么是方法？","slug":"_1-1-什么是方法","link":"#_1-1-什么是方法","children":[]},{"level":3,"title":"1.2 方法的声明","slug":"_1-2-方法的声明","link":"#_1-2-方法的声明","children":[]},{"level":3,"title":"1.3 方法的调用","slug":"_1-3-方法的调用","link":"#_1-3-方法的调用","children":[]}]},{"level":2,"title":"2. 方法参数","slug":"_2-方法参数","link":"#_2-方法参数","children":[{"level":3,"title":"2.1 参数","slug":"_2-1-参数","link":"#_2-1-参数","children":[]},{"level":3,"title":"2.2 调用带参数的方法","slug":"_2-2-调用带参数的方法","link":"#_2-2-调用带参数的方法","children":[]},{"level":3,"title":"2.3 参数类型","slug":"_2-3-参数类型","link":"#_2-3-参数类型","children":[]}]},{"level":2,"title":"3. 多个参数","slug":"_3-多个参数","link":"#_3-多个参数","children":[{"level":3,"title":"3.1 多个参数","slug":"_3-1-多个参数","link":"#_3-1-多个参数","children":[]},{"level":3,"title":"3.2 多参数方法的调用","slug":"_3-2-多参数方法的调用","link":"#_3-2-多参数方法的调用","children":[]}]},{"level":2,"title":"4. 可选参数和命名参数","slug":"_4-可选参数和命名参数","link":"#_4-可选参数和命名参数","children":[{"level":3,"title":"4.1 可选参数","slug":"_4-1-可选参数","link":"#_4-1-可选参数","children":[]},{"level":3,"title":"4.2 命名参数","slug":"_4-2-命名参数","link":"#_4-2-命名参数","children":[]}]},{"level":2,"title":"5. 参数的传递","slug":"_5-参数的传递","link":"#_5-参数的传递","children":[{"level":3,"title":"5.1 按值传递参数","slug":"_5-1-按值传递参数","link":"#_5-1-按值传递参数","children":[]},{"level":3,"title":"5.2 按引用传递参数","slug":"_5-2-按引用传递参数","link":"#_5-2-按引用传递参数","children":[]},{"level":3,"title":"5.3 按输出传递参数","slug":"_5-3-按输出传递参数","link":"#_5-3-按输出传递参数","children":[]}]},{"level":2,"title":"6. 方法的重载","slug":"_6-方法的重载","link":"#_6-方法的重载","children":[{"level":3,"title":"6.1 方法的重载","slug":"_6-1-方法的重载","link":"#_6-1-方法的重载","children":[]},{"level":3,"title":"6.2 重载方法的调用","slug":"_6-2-重载方法的调用","link":"#_6-2-重载方法的调用","children":[]}]},{"level":2,"title":"7. 递归","slug":"_7-递归","link":"#_7-递归","children":[{"level":3,"title":"7.1 递归","slug":"_7-1-递归","link":"#_7-1-递归","children":[]},{"level":3,"title":"7.2 递归的算法","slug":"_7-2-递归的算法","link":"#_7-2-递归的算法","children":[]}]},{"level":2,"title":"8. 实践：输出一个金字塔","slug":"_8-实践-输出一个金字塔","link":"#_8-实践-输出一个金字塔","children":[{"level":3,"title":"8.1 打印一个金字塔","slug":"_8-1-打印一个金字塔","link":"#_8-1-打印一个金字塔","children":[]}]}],"git":{"createdTime":1714401832000,"updatedTime":1715092254000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":2}]},"readingTime":{"minutes":14.99,"words":4497},"filePathRelative":"zh/CS/Method.md","localizedDate":"2024年4月29日","excerpt":"<h2>1. 方法介绍</h2>\\n<h3>1.1 什么是方法？</h3>\\n<p>方法是执行特定需求的一组代码语句。</p>\\n<p>C# 内置了许多方法,当然,你也可以自定义方法。</p>\\n<p>方法有很多优点,包括:</p>\\n<ul>\\n<li>代码可以被重复使用。</li>\\n<li>方便测试。</li>\\n<li>方法相对独立,修改方法的时候不会影响其他已经调试好的程序。</li>\\n<li>一个方法可以有多种不同的参数输入。</li>\\n</ul>\\n<blockquote>\\n<p>每个 C# 程序都至少有一个方法: <code>Main()</code>。</p>\\n</blockquote>\\n<p>【单选题】C# 程序都是从哪个方法开始的  A.</p>","autoDesc":true}`);export{r as comp,k as data};

import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as y,b as p,e as c,w as a,r as F,o as d,a as s,d as n}from"./app-Cc7WVUoo.js";const u="/assets/image-20241123133535855-DfcmQk2C.png",v={};function m(b,l){const t=F("CodeTabs"),i=F("Tabs");return d(),y("div",null,[l[10]||(l[10]=p(`<h2 id="lecture-09" tabindex="-1"><a class="header-anchor" href="#lecture-09"><span>Lecture 09</span></a></h2><h3 id="_1-什么是-multithreading-多线程问题" tabindex="-1"><a class="header-anchor" href="#_1-什么是-multithreading-多线程问题"><span>1. 什么是 Multithreading 多线程问题？</span></a></h3><ul><li>Multithreading allows us to run an application as separate processes which run ‘asynchronously’</li></ul><p>多进程允许我们 run a application as seperate process（多个进程），这叫异步。</p><ul><li>我们可以在相同的时间运行不同的进程。</li></ul><h4 id="chat-sever" tabindex="-1"><a class="header-anchor" href="#chat-sever"><span>Chat Sever</span></a></h4><ul><li>SEVER PART</li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 引入必要的模块</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> socket  </span><span style="color:#88846F;"># 用于创建和管理网络连接</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading  </span><span style="color:#88846F;"># 用于支持多线程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 创建一个套接字对象，指定使用 IPv4 地址 (AF_INET) 和 TCP 协议 (SOCK_STREAM)</span></span>
<span class="line"><span style="color:#F8F8F2;">sock </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> socket.socket(socket.</span><span style="color:#AE81FF;">AF_INET</span><span style="color:#F8F8F2;">, socket.</span><span style="color:#AE81FF;">SOCK_STREAM</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 绑定套接字到本地地址和端口</span></span>
<span class="line"><span style="color:#88846F;"># 这里绑定的是本地主机 127.0.0.1 和端口 12345</span></span>
<span class="line"><span style="color:#F8F8F2;">sock.bind((</span><span style="color:#E6DB74;">&#39;127.0.0.1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12345</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使服务器开始监听连接请求</span></span>
<span class="line"><span style="color:#88846F;"># 参数 1 表示允许队列中最多有 1 个待处理的连接请求</span></span>
<span class="line"><span style="color:#F8F8F2;">sock.listen(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 用于存储当前所有已连接的客户端</span></span>
<span class="line"><span style="color:#F8F8F2;">connections </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义一个函数，用于处理每个客户端连接的通信</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> handler</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    c: 客户端套接字对象</span></span>
<span class="line"><span style="color:#E6DB74;">    a: 客户端地址 (IP 和端口)</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">        # 接收客户端发送的数据，最大接收字节为 4098</span></span>
<span class="line"><span style="color:#F8F8F2;">        data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> c.recv(</span><span style="color:#AE81FF;">4098</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 将收到的数据广播给所有其他已连接的客户端</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> connection </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> connections:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> connection </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> c:  </span><span style="color:#88846F;"># 排除发送数据的客户端</span></span>
<span class="line"><span style="color:#F8F8F2;">                connection.send(data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 如果接收到空数据，说明客户端已断开，退出循环</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> data:</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 主线程用于不断接收新的客户端连接</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 接受一个新的客户端连接</span></span>
<span class="line"><span style="color:#88846F;">    # c 是新的客户端套接字对象，a 是客户端地址</span></span>
<span class="line"><span style="color:#F8F8F2;">    c, a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> sock.accept()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 创建一个新线程，用于处理该客户端的通信</span></span>
<span class="line"><span style="color:#F8F8F2;">    cThread </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">handler, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(c, a))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 将线程设置为守护线程，确保主线程退出时，子线程自动结束</span></span>
<span class="line"><span style="color:#F8F8F2;">    cThread.daemon </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 启动该线程</span></span>
<span class="line"><span style="color:#F8F8F2;">    cThread.start()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 将新连接的客户端加入到全局连接列表中</span></span>
<span class="line"><span style="color:#F8F8F2;">    connections.append(c)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 打印当前所有已连接的客户端套接字对象列表</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(connections)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li>CLIENT PART</li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">#client.py</span></span>
<span class="line"><span style="color:#88846F;">#run multiple instances of this after starting the server</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> socket</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">sock </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> socket.socket(socket.</span><span style="color:#AE81FF;">AF_INET</span><span style="color:#F8F8F2;">, socket.</span><span style="color:#AE81FF;">SOCK_STREAM</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">sock.connect((</span><span style="color:#E6DB74;">&#39;127.0.0.1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12345</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> sendMsg</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        msg </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">().encode()</span></span>
<span class="line"><span style="color:#F8F8F2;">        sock.send(msg)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">iThread </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">sendMsg)</span></span>
<span class="line"><span style="color:#F8F8F2;">iThread.daemon </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F8F8F2;">iThread.start()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    #this is data received back from the server</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> sock.recv(</span><span style="color:#AE81FF;">4098</span><span style="color:#F8F8F2;">).decode()</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> data:</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(data)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="news-scrapers" tabindex="-1"><a class="header-anchor" href="#news-scrapers"><span>NEWS SCRAPERS</span></a></h4><h5 id="non-concurrent-example" tabindex="-1"><a class="header-anchor" href="#non-concurrent-example"><span>Non-concurrent-example</span></a></h5><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 引入用于发送 HTTP 请求的 urllib.request 模块</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> urllib.request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义一个包含多个 URL 的列表，这些是我们要尝试访问的地址</span></span>
<span class="line"><span style="color:#AE81FF;">URLS</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://www.foxnews.com/&#39;</span><span style="color:#F8F8F2;">,         </span><span style="color:#88846F;"># Fox News 网站</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://www.cnn.com/&#39;</span><span style="color:#F8F8F2;">,             </span><span style="color:#88846F;"># CNN 网站</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://europe.wsj.com/&#39;</span><span style="color:#F8F8F2;">,          </span><span style="color:#88846F;"># 欧洲版华尔街日报</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://www.bbc.co.uk/&#39;</span><span style="color:#F8F8F2;">,           </span><span style="color:#88846F;"># 英国广播公司</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://some-made-up-domain.com/&#39;</span><span style="color:#88846F;">  # 一个不存在的域名（用于测试异常处理）</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义一个函数，用于加载指定的 URL</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> load_url</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">timeout</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    通过指定的 URL 加载数据</span></span>
<span class="line"><span style="color:#E6DB74;">    :param url: 要访问的 URL 地址</span></span>
<span class="line"><span style="color:#E6DB74;">    :param timeout: 超时时间，单位为秒</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 返回从 URL 读取的内容</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">    # 使用 urllib.request.urlopen 发送 GET 请求</span></span>
<span class="line"><span style="color:#88846F;">    # \`with\` 确保连接资源在使用完成后正确关闭</span></span>
<span class="line"><span style="color:#F92672;">    with</span><span style="color:#F8F8F2;"> urllib.request.urlopen(url, </span><span style="color:#FD971F;font-style:italic;">timeout</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">timeout) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> conn:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> conn.read()  </span><span style="color:#88846F;"># 从连接中读取返回的数据并返回</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义一个函数，按顺序加载 URL 并处理异常</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> non_concurrent_URLs_example</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    按顺序（非并发）加载 URL，并对每个请求处理可能出现的异常</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历 URL 列表</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">in</span><span style="color:#AE81FF;"> URLS</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">            # 尝试加载 URL，超时时间设为 60 秒</span></span>
<span class="line"><span style="color:#F8F8F2;">            data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> load_url(url, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> exc:</span></span>
<span class="line"><span style="color:#88846F;">            # 如果出现任何异常，打印异常信息</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">%r</span><span style="color:#E6DB74;"> generated an exception: </span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> (url, exc))</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">            # 如果成功加载 URL，打印页面大小（字节数）</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">%r</span><span style="color:#E6DB74;"> page is </span><span style="color:#AE81FF;">%d</span><span style="color:#E6DB74;"> bytes&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> (url, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(data)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用函数，运行非并发的 URL 加载示例</span></span>
<span class="line"><span style="color:#F8F8F2;">non_concurrent_URLs_example()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>从代码中可以明确看到，<strong>这是一个非并发（单线程）的程序</strong>。以下是原因的详细分析：</p><p><strong>为什么是单线程？</strong></p><ol><li><strong>代码设计：</strong><ul><li>在 <code>non_concurrent_URLs_example</code> 函数中，程序通过 <code>for url in URLS:</code> 循环依次加载每个 URL。</li><li>每次加载操作是顺序执行的，只有当前的 URL 加载完成后，程序才会继续处理下一个 URL。</li><li>这种方式不会并发或并行执行任何操作。</li></ul></li><li><strong>没有使用线程或进程相关的工具：</strong><ul><li>如果是多线程，代码中应该会引入线程相关的模块（如 <code>threading</code>）并启动多个线程。</li><li>如果是多进程，代码中会引入进程模块（如 <code>multiprocessing</code>）并启动多个进程。</li></ul></li><li><strong>单线程行为：</strong><ul><li>每次只处理一个 URL 请求，其他请求需要等待当前请求完成后才会开始</li></ul></li></ol><h5 id="concurrent-example" tabindex="-1"><a class="header-anchor" href="#concurrent-example"><span>concurrent-example</span></a></h5><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 导入必要的模块</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> concurrent.futures  </span><span style="color:#88846F;"># 用于并发执行任务的高层接口</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> urllib.request      </span><span style="color:#88846F;"># 用于发送 HTTP 请求</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> timeit              </span><span style="color:#88846F;"># 可用于计时（目前未用到）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义需要访问的 URL 列表</span></span>
<span class="line"><span style="color:#AE81FF;">URLS</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://www.foxnews.com/&#39;</span><span style="color:#F8F8F2;">,         </span><span style="color:#88846F;"># Fox News 网站</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://www.cnn.com/&#39;</span><span style="color:#F8F8F2;">,             </span><span style="color:#88846F;"># CNN 网站</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://europe.wsj.com/&#39;</span><span style="color:#F8F8F2;">,          </span><span style="color:#88846F;"># 欧洲版华尔街日报</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://www.bbc.co.uk/&#39;</span><span style="color:#F8F8F2;">,           </span><span style="color:#88846F;"># 英国广播公司</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;http://some-made-up-domain.com/&#39;</span><span style="color:#88846F;">  # 一个不存在的域名（用于测试异常处理）</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义一个函数，用于加载指定 URL 的数据</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> load_url</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">timeout</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    加载指定的 URL 数据</span></span>
<span class="line"><span style="color:#E6DB74;">    :param url: 要访问的 URL 地址</span></span>
<span class="line"><span style="color:#E6DB74;">    :param timeout: 超时时间（秒）</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 返回从 URL 读取的内容</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">    # 使用 urllib.request.urlopen 发送 GET 请求</span></span>
<span class="line"><span style="color:#88846F;">    # 使用 \`with\` 确保资源在操作完成后自动释放</span></span>
<span class="line"><span style="color:#F92672;">    with</span><span style="color:#F8F8F2;"> urllib.request.urlopen(url, </span><span style="color:#FD971F;font-style:italic;">timeout</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">timeout) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> conn:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> conn.read()  </span><span style="color:#88846F;"># 读取返回的数据并返回</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义并发加载 URL 的函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> concurrent_URLs_example</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    使用线程池并发加载 URL</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#88846F;">    # 创建一个线程池执行器，最多可以有 5 个线程并发执行任务</span></span>
<span class="line"><span style="color:#F92672;">    with</span><span style="color:#F8F8F2;"> concurrent.futures.ThreadPoolExecutor(</span><span style="color:#FD971F;font-style:italic;">max_workers</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> executor:</span></span>
<span class="line"><span style="color:#88846F;">        # 提交所有 URL 的加载任务到线程池，并将每个任务和其对应的 URL 关联</span></span>
<span class="line"><span style="color:#F8F8F2;">        future_to_url </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {executor.submit(load_url, url, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">): url </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> url </span><span style="color:#F92672;">in</span><span style="color:#AE81FF;"> URLS</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 处理线程池中的任务，\`as_completed\` 会返回一个迭代器，</span></span>
<span class="line"><span style="color:#88846F;">        # 按照任务完成的顺序依次处理</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> future </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> concurrent.futures.as_completed(future_to_url):</span></span>
<span class="line"><span style="color:#F8F8F2;">            url </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> future_to_url[future]  </span><span style="color:#88846F;"># 获取与当前 future 对应的 URL</span></span>
<span class="line"><span style="color:#F92672;">            try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">                # 如果任务执行成功，获取结果（即加载的页面数据）</span></span>
<span class="line"><span style="color:#F8F8F2;">                data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> future.result()</span></span>
<span class="line"><span style="color:#F92672;">            except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> exc:</span></span>
<span class="line"><span style="color:#88846F;">                # 如果任务抛出异常，打印异常信息</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">%r</span><span style="color:#E6DB74;"> generated an exception: </span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> (url, exc))</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">                # 如果任务成功完成，打印页面大小（字节数）</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">%r</span><span style="color:#E6DB74;"> page is </span><span style="color:#AE81FF;">%d</span><span style="color:#E6DB74;"> bytes&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> (url, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(data)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用并发 URL 加载函数</span></span>
<span class="line"><span style="color:#F8F8F2;">concurrent_URLs_example()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-data-sharing" tabindex="-1"><a class="header-anchor" href="#_2-data-sharing"><span>2. data sharing</span></a></h3><h4 id="单线程" tabindex="-1"><a class="header-anchor" href="#单线程"><span>单线程</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> threading </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Thread, Event</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> sleep</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">event </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Event()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> modify_variable</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">var</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(var)):</span></span>
<span class="line"><span style="color:#F8F8F2;">            var[i] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> event.is_set():</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Stop printing&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">my_var </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">t </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">modify_variable, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(my_var, ))</span></span>
<span class="line"><span style="color:#F8F8F2;">t.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">t0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time()</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> time()</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">t0 </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(my_var)</span></span>
<span class="line"><span style="color:#F8F8F2;">        sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#66D9EF;font-style:italic;"> KeyboardInterrupt</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        event.set()</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">event.set()</span></span>
<span class="line"><span style="color:#F8F8F2;">t.join()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(my_var)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">34528</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34529</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34530</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">2372171</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2372172</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2372173</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">4892276</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4892277</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4892277</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">7424244</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7424245</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7424246</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">9936838</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9936839</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9936840</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Stop printing</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">12475565</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12475566</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12475567</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unmanaged-data-access-two-threads" tabindex="-1"><a class="header-anchor" href="#unmanaged-data-access-two-threads"><span>unmanaged data access two threads</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> threading </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Thread, Event</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> sleep</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">event </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Event()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> modify_variable</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">var</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(var)):</span></span>
<span class="line"><span style="color:#F8F8F2;">            var[i] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> event.is_set():</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#88846F;">        #sleep(.5)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Stop printing&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">my_var </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">t </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">modify_variable, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(my_var, ))</span></span>
<span class="line"><span style="color:#F8F8F2;">t2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">modify_variable, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(my_var, ))</span></span>
<span class="line"><span style="color:#F8F8F2;">t.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">t2.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">t0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time()</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> time()</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">t0 </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(my_var)</span></span>
<span class="line"><span style="color:#F8F8F2;">        sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#66D9EF;font-style:italic;"> KeyboardInterrupt</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        event.set()</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">event.set()</span></span>
<span class="line"><span style="color:#F8F8F2;">t.join()</span></span>
<span class="line"><span style="color:#F8F8F2;">t2.join()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(my_var)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">99984</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">99984</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">99984</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1303222</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1303222</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1303223</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">2517014</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2517015</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2517016</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">3673527</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3673526</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3673527</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">4974842</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4974842</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4974843</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Stop printing</span></span>
<span class="line"><span style="color:#F8F8F2;">Stop printing</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">7138160</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7138161</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7138162</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lock" tabindex="-1"><a class="header-anchor" href="#lock"><span>Lock</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> threading </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Thread, Event</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> sleep</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> threading </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Lock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">event </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Event()</span></span>
<span class="line"><span style="color:#F8F8F2;">data_lock </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Lock()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> modify_variable</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">var</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(var)):</span></span>
<span class="line"><span style="color:#F92672;">            with</span><span style="color:#F8F8F2;"> data_lock:</span></span>
<span class="line"><span style="color:#F8F8F2;">                var[i] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> event.is_set():</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Stop printing&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">my_var </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">t </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">modify_variable, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(my_var, ))</span></span>
<span class="line"><span style="color:#F8F8F2;">t2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">modify_variable, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(my_var, ))</span></span>
<span class="line"><span style="color:#F8F8F2;">t.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">t2.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">t0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> time()</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">t0 </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">#while True:</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(my_var)           </span></span>
<span class="line"><span style="color:#F8F8F2;">        sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#66D9EF;font-style:italic;"> KeyboardInterrupt</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        event.set()</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">event.set()</span></span>
<span class="line"><span style="color:#F8F8F2;">t.join()</span></span>
<span class="line"><span style="color:#F8F8F2;">t2.join()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(my_var)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">30389</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30390</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30391</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">697200</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">697201</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">697202</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1320040</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1320041</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1320042</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1930139</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1930140</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1930141</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">2547447</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2547448</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2547449</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Stop printingStop printing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">3166926</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3166927</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3166928</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h4>`,29)),c(t,{id:"133",data:[{id:"2 queues"},{id:"1 queue"}]},{title0:a(({value:e,isActive:o})=>l[0]||(l[0]=[n("2 queues")])),title1:a(({value:e,isActive:o})=>l[1]||(l[1]=[n("1 queue")])),tab0:a(({value:e,isActive:o})=>l[2]||(l[2]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," threading "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," Thread, Event")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," time "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," time")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," time "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," sleep")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," queue "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," Queue")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"event "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Event()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," modify_variable"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"queue_in"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"queue_out"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," queue_in.empty():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            var "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," queue_in.get()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(var)):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                var[i] "),s("span",{style:{color:"#F92672"}},"+="),s("span",{style:{color:"#AE81FF"}}," 1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            queue_out.put(var)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," event.is_set():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            break")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Stop printing'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"my_var "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"queue1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Queue()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"queue2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Queue()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"queue1.put(my_var)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"modify_variable, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(queue1, queue2))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"modify_variable, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(queue2, queue1))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t.start()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t2.start()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t0 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," time()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"while"),s("span",{style:{color:"#F8F8F2"}}," time()"),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}},"t0 "),s("span",{style:{color:"#F92672"}},"<"),s("span",{style:{color:"#AE81FF"}}," 5"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(my_var)  ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        sleep("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," KeyboardInterrupt"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        event.set()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        break")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"event.set()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t.join()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t2.join()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," queue1.empty():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(queue1.get())")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," queue2.empty():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(queue2.get())")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[3]||(l[3]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," threading "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," Thread, Event")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," time "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," time")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," time "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," sleep")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"from"),s("span",{style:{color:"#F8F8F2"}}," queue "),s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," Queue")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"event "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Event()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," modify_variable"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"queue_in"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"queue_out"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," queue_in.empty():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            var "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," queue_in.get()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(var)):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                var[i] "),s("span",{style:{color:"#F92672"}},"+="),s("span",{style:{color:"#AE81FF"}}," 1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            queue_out.put(var)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," event.is_set():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            break")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Stop printing'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"my_var "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"queue1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Queue()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"queue1.put(my_var)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"modify_variable, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(queue1, queue1))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"modify_variable, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(queue1, queue1))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t.start()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t2.start()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t0 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," time()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"while"),s("span",{style:{color:"#F8F8F2"}}," time()"),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}},"t0 "),s("span",{style:{color:"#F92672"}},"<"),s("span",{style:{color:"#AE81FF"}}," 5"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(my_var)  ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        sleep("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," KeyboardInterrupt"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        event.set()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        break")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"event.set()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t.join()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"t2.join()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," queue1.empty():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(queue1.get())")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[11]||(l[11]=p('<h2 id="lecture-10" tabindex="-1"><a class="header-anchor" href="#lecture-10"><span>Lecture 10</span></a></h2><h3 id="_1-cpu-or-i-o-bound-tasks" tabindex="-1"><a class="header-anchor" href="#_1-cpu-or-i-o-bound-tasks"><span>1. CPU or I/O bound tasks</span></a></h3><ul><li>CPU-bound: task time depends on speed of processor</li><li>I/O-bound: CPU has to wait for data to be loaded into and out of memory</li></ul><h3 id="_2-asychronous-processing-vs-multithreading-and-multiprocessing" tabindex="-1"><a class="header-anchor" href="#_2-asychronous-processing-vs-multithreading-and-multiprocessing"><span>2. Asychronous processing vs multithreading and multiprocessing</span></a></h3><ul><li><p>异步处理将函数控制权让给其他函数，从而加快处理速度</p></li><li><p>与多线程不同，多线程通过将任务分配给线程来加快速度</p></li><li><p>与多进程不同，多进程通过使用多个 CPU/内核来加快速度</p></li><li><p>异步：</p><ul><li>只使用一个线程</li><li>只使用一个 CPU 内核</li><li>那么，异步处理究竟是如何加快速度的呢？</li></ul></li></ul><h3 id="_3-怎么做到异步的并发运行" tabindex="-1"><a class="header-anchor" href="#_3-怎么做到异步的并发运行"><span>3. 怎么做到异步的并发运行？</span></a></h3>',6)),c(i,{id:"206",data:[{id:"sync_march"},{id:"async_march"},{id:"一个复杂的例子。直观表现了 await 在事件循环中的作用"}]},{title0:a(({value:e,isActive:o})=>l[4]||(l[4]=[n("sync_march")])),title1:a(({value:e,isActive:o})=>l[5]||(l[5]=[n("async_march")])),title2:a(({value:e,isActive:o})=>l[6]||(l[6]=[n("一个复杂的例子。直观表现了 await 在事件循环中的作用")])),tab0:a(({value:e,isActive:o})=>l[7]||(l[7]=[s("p",null,"首先，设置一个异步函数 count ，使用 for 循环在 main 函数里调用三次。",-1),s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," time")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," count"),s("span",{style:{color:"#F8F8F2"}},"(): ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"One"'),s("span",{style:{color:"#F8F8F2"}},") ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    time.sleep("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},") ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Two"'),s("span",{style:{color:"#F8F8F2"}},") ")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"(): ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," _ "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},"): ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        count() ")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F8F8F2"}}," __name__ "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#E6DB74"}},' "__main__"'),s("span",{style:{color:"#F8F8F2"}},": ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    s "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," time.perf_counter()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    main()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    elapsed "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," time.perf_counter() "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," s ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"__file__"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}}," executed in "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"elapsed"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},":0.2f"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' seconds."'),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,"输出：",-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"One")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Two")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"One")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Two")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"One")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Two")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:e,isActive:o})=>l[8]||(l[8]=[s("p",null,"我们添加 await 和 gather.",-1),s("ul",null,[s("li",null,[s("p",null,[s("strong",null,[s("code",null,"await asyncio.sleep(1)"),n(" 的含义")])]),s("p",null,[n("这行代码的作用是 "),s("strong",null,"异步地暂停协程的执行 1 秒钟"),n("，同时释放控制权给事件循环（event loop）。"),s("br"),n(" 具体来说：")]),s("ul",null,[s("li",null,[s("code",null,"await"),n("： "),s("ul",null,[s("li",null,[n("用于暂停当前协程（coroutine）的执行，等待一个 "),s("strong",null,"异步操作"),n(" 完成。")]),s("li",null,[n("这里，"),s("code",null,"await"),n(" 等待的是 "),s("code",null,"asyncio.sleep(1)"),n(" 的完成。")])])]),s("li",null,[s("code",null,"asyncio.sleep(1)"),n("： "),s("ul",null,[s("li",null,"一个异步的非阻塞延时函数，会在 1 秒钟后完成。"),s("li",null,"在此期间，事件循环可以处理其他任务或协程，而不是阻塞程序等待 1 秒钟。")])])]),s("p",null,"::: tips"),s("p",null,"await相当于暂停当前协程，让 await 后面的代码执行完再开始协程。（将控制权交还给事件循环。 在暂停的这段时间内，事件循环会寻找其他待运行的协程任务，并切换去运行它们。）"),s("p",null,":::")])],-1),s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," asyncio")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," count"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"name"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"name"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},":One'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.sleep("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"name"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},":Two'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.gather(count("),s("span",{style:{color:"#E6DB74"}},"'Task1'"),s("span",{style:{color:"#F8F8F2"}},"), count("),s("span",{style:{color:"#E6DB74"}},"'Task2'"),s("span",{style:{color:"#F8F8F2"}},"), count("),s("span",{style:{color:"#E6DB74"}},"'Task3'"),s("span",{style:{color:"#F8F8F2"}},"))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F8F8F2"}}," __name__ "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#E6DB74"}}," '__main__'"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    import"),s("span",{style:{color:"#F8F8F2"}}," time")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    s "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," time.perf_counter()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    asyncio.run(main())")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    elasped_time "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," time.perf_counter() "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," s")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},"'Elapsed time: "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"elasped_time"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},":0.2f"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}}," seconds'"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,"输出：",-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task1:One")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task2:One")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task3:One")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task1:Two")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task2:Two")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task3:Two")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Elapsed time: "),s("span",{style:{color:"#AE81FF"}},"1.01"),s("span",{style:{color:"#F8F8F2"}}," seconds")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,"由此可见执行顺序：",-1),s("ul",null,[s("li",null,"Task1 开始执行，遇到 await 阻塞；"),s("li",null,"Task2 趁机执行，遇到 await 阻塞；"),s("li",null,"Task3 趁机执行，遇到 await 阻塞；"),s("li",null,"Task1最先开始，最早等待完阻塞它的 1 秒钟，结束；"),s("li",null,"Task2 结束"),s("li",null,"Task3 结束")],-1)])),tab2:a(({value:e,isActive:o})=>l[9]||(l[9]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," asyncio")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," random")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# ANSI colors")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"c "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," (")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    "'),s("span",{style:{color:"#AE81FF"}},"\\033"),s("span",{style:{color:"#E6DB74"}},'[0m"'),s("span",{style:{color:"#F8F8F2"}},",   "),s("span",{style:{color:"#88846F"}},"# End of color")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    "'),s("span",{style:{color:"#AE81FF"}},"\\033"),s("span",{style:{color:"#E6DB74"}},'[36m"'),s("span",{style:{color:"#F8F8F2"}},",  "),s("span",{style:{color:"#88846F"}},"# Cyan")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    "'),s("span",{style:{color:"#AE81FF"}},"\\033"),s("span",{style:{color:"#E6DB74"}},'[91m"'),s("span",{style:{color:"#F8F8F2"}},",  "),s("span",{style:{color:"#88846F"}},"# Red")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    "'),s("span",{style:{color:"#AE81FF"}},"\\033"),s("span",{style:{color:"#E6DB74"}},'[35m"'),s("span",{style:{color:"#F8F8F2"}},",  "),s("span",{style:{color:"#88846F"}},"# Magenta")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," makerandom"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"idx"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"int"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"threshold"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"int"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#AE81FF"}}," 6"),s("span",{style:{color:"#F8F8F2"}},") -> "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"int"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(c[idx "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," f"),s("span",{style:{color:"#E6DB74"}},'"Initiated makerandom('),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"idx"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},')."'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," random.randint("),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"<="),s("span",{style:{color:"#F8F8F2"}}," threshold:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(c[idx "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," f"),s("span",{style:{color:"#E6DB74"}},'"makerandom('),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"idx"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},") == "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"i"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' too low; retrying."'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.sleep(idx "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," random.randint("),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(c[idx "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},"] "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," f"),s("span",{style:{color:"#E6DB74"}},'"---> Finished: makerandom('),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"idx"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},") == "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"i"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F92672"}}," +"),s("span",{style:{color:"#F8F8F2"}}," c["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"])")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," i")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    res "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F92672"}}," await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.gather("),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}},"(makerandom(i, "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F92672"}}," -"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},")))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," res")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"if"),s("span",{style:{color:"#F8F8F2"}}," __name__ "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#E6DB74"}},' "__main__"'),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    random.seed("),s("span",{style:{color:"#AE81FF"}},"444"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    r1, r2, r3 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," asyncio.run(main())")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"r1: '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"r1"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},", r2: "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"r2"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},", r3: "),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"r3"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,"输出：",-1),s("img",{src:u,alt:"image-20241123133535855",style:{zoom:"25%"}},null,-1),s("p",null,"这个图就很直观的展示了 await 对协程的作用。绿色是第一个开始的协程，也是等待时间最短的协程，所以执行频率较高。红色是第二个开始的，紫色是第三个开始的。",-1)])),_:1}),l[12]||(l[12]=p(`<p>总结：</p><ul><li>多线程通过将任务（包括同一任务）分配给多个独立线程来加快处理速度</li><li>多处理通过使用多个处理器来加快处理速度</li><li>同步处理通过函数向其他函数释放控制来加快处理速度因此函数不必等待其他函数完成后才能执行任务</li></ul><h3 id="_4-chaining-coroutines" tabindex="-1"><a class="header-anchor" href="#_4-chaining-coroutines"><span>4. Chaining Coroutines</span></a></h3><h4 id="入门例子" tabindex="-1"><a class="header-anchor" href="#入门例子"><span>入门例子</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> part1</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;part1(</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">) sleeping for </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> f</span><span style="color:#E6DB74;">&quot;result</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">-1&quot;</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Returning part1(</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">) == </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">result</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> part2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">arg</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;part2</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n, arg</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> sleeping for </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> f</span><span style="color:#E6DB74;">&quot;result</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">-2 derived from </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">arg</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Returning part2</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n, arg</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> == </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">result</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> chain</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F8F8F2;">    p1 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> part1(n)</span></span>
<span class="line"><span style="color:#F8F8F2;">    p2 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> part2(n, p1)</span></span>
<span class="line"><span style="color:#F8F8F2;">    end </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;--&gt;Chained result</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">n</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> =&gt; </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">p2</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> (took </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">end</span><span style="color:#66D9EF;font-style:italic;">:0.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds).&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.gather(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">(chain(n) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> args))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    import</span><span style="color:#F8F8F2;"> sys</span></span>
<span class="line"><span style="color:#F8F8F2;">    random.seed(</span><span style="color:#AE81FF;">444</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    args </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">if</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(sys.argv) </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;"> else</span><span style="color:#66D9EF;"> map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, sys.argv[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:])</span></span>
<span class="line"><span style="color:#F8F8F2;">    start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">args))</span></span>
<span class="line"><span style="color:#F8F8F2;">    end </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Program finished in </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">end</span><span style="color:#66D9EF;font-style:italic;">:0.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li><p><strong>part1</strong></p><ul><li>这是一个 <strong>异步函数</strong>，会随机延时 <code>i</code> 秒，然后返回一个格式化字符串 <code>result{n}-1</code>。</li><li>示例：如果 <code>n=1</code>，可能返回 <code>result1-1</code>。</li></ul></li><li><p><strong>part2</strong></p><ul><li>这是第二步任务，会接收 <code>part1</code> 的输出作为输入参数 <code>arg</code>，随机延时后生成一个基于 <code>arg</code> 的结果字符串。</li><li>示例：如果 <code>n=1</code> 且 <code>arg=&quot;result1-1&quot;</code>，可能返回 <code>result1-2 derived from result1-1</code>。</li></ul></li><li><p><strong>chain</strong></p><ul><li>作用： <ul><li>将 <code>part1</code> 和 <code>part2</code> 串联起来依次执行。</li><li>打印最终结果及任务耗时。</li></ul></li><li>执行过程： <ol><li>调用 <code>part1</code> 并等待其完成。</li><li>用 <code>part1</code> 的输出作为参数调用 <code>part2</code>，并等待其完成。</li><li>打印两步任务的结果以及总耗时\\</li></ol></li></ul></li><li><p><code>main</code> 的作用：</p><ul><li><p>接收多个参数 <code>args</code>，并为每个参数 <code>n</code> 创建一个异步任务。</p></li><li><p>使用 <code>asyncio.gather</code> 并发执行所有任务。</p></li><li><p>示例：如果传入参数 <code>(1, 2, 3)</code>，则会同时启动 3 个 <code>chain</code> 任务，分别处理 <code>n=1</code>、<code>n=2</code> 和 <code>n=3</code>。</p></li></ul></li></ul><h4 id="async-march-chained" tabindex="-1"><a class="header-anchor" href="#async-march-chained"><span>async_march_chained</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> count</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;One&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Two&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> chain</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> count()</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> count()</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> count()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.gather(chain())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F8F8F2;">    s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span>
<span class="line"><span style="color:#F8F8F2;">    elapsed </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> s</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Program finished in </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">elapsed</span><span style="color:#66D9EF;font-style:italic;">:0.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">One</span></span>
<span class="line"><span style="color:#F8F8F2;">Two</span></span>
<span class="line"><span style="color:#F8F8F2;">One</span></span>
<span class="line"><span style="color:#F8F8F2;">Two</span></span>
<span class="line"><span style="color:#F8F8F2;">One</span></span>
<span class="line"><span style="color:#F8F8F2;">Two</span></span>
<span class="line"><span style="color:#F8F8F2;">Program finished </span><span style="color:#F92672;">in</span><span style="color:#AE81FF;"> 3.01</span><span style="color:#F8F8F2;"> seconds.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，链式方法只是用一种连锁触发的方式顺序执行了几个协程任务，它们是并行的；不是并发的。</p><h3 id="_5-queue" tabindex="-1"><a class="header-anchor" href="#_5-queue"><span>5. Queue</span></a></h3><ul><li>对于线程解决方案，必须对不同线程的数据访问进行管理。</li><li>同样，在异步处理中，不同函数访问或生成的数据也需要（而且可以）进行管理。</li><li>但异步通常用于其他类型的操作，在这些操作中，数据处理/返回的顺序并不那么重要，例如图形用户界面更新</li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> itertools </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> it</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> os</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> makeitem</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">size</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> os.urandom(size).hex()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> randsleep</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">caller</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> caller:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">caller</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> sleeping for </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(i)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> produce</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">q</span><span style="color:#F8F8F2;">: asyncio.Queue) -&gt; </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> it.repeat(</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, n):    </span><span style="color:#88846F;"># Synchronous loop for each single producer</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> randsleep(</span><span style="color:#FD971F;font-style:italic;">caller</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Producer </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> makeitem()</span></span>
<span class="line"><span style="color:#F8F8F2;">        t </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> q.put((i, t))</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Producer </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> added &lt;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&gt; to queue.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> consume</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">q</span><span style="color:#F8F8F2;">: asyncio.Queue) -&gt; </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> randsleep(</span><span style="color:#FD971F;font-style:italic;">caller</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Consumer </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        i, t </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> q.get()</span></span>
<span class="line"><span style="color:#F8F8F2;">        now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Consumer </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> got element &lt;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&gt;&quot;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">              f</span><span style="color:#E6DB74;">&quot; in </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">now</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">t</span><span style="color:#66D9EF;font-style:italic;">:0.5f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        q.task_done()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nprod</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ncon</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    q </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> asyncio.Queue()</span></span>
<span class="line"><span style="color:#F8F8F2;">    producers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [asyncio.create_task(produce(n, q)) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(nprod)]</span></span>
<span class="line"><span style="color:#F8F8F2;">    consumers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [asyncio.create_task(consume(n, q)) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(ncon)]</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.gather(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">producers)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> q.join()                  </span><span style="color:#88846F;"># Implicitly awaits consumers, too</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> c </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> consumers:</span></span>
<span class="line"><span style="color:#F8F8F2;">        c.cancel()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    import</span><span style="color:#F8F8F2;"> argparse</span></span>
<span class="line"><span style="color:#F8F8F2;">    random.seed(</span><span style="color:#AE81FF;">444</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    parser </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> argparse.ArgumentParser()</span></span>
<span class="line"><span style="color:#F8F8F2;">    parser.add_argument(</span><span style="color:#E6DB74;">&quot;-p&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;--nprod&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">default</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    parser.add_argument(</span><span style="color:#E6DB74;">&quot;-c&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;--ncon&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">default</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    ns </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> parser.parse_args()</span></span>
<span class="line"><span style="color:#F8F8F2;">    start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main(</span><span style="color:#F92672;">**</span><span style="color:#F8F8F2;">ns.__dict__))</span></span>
<span class="line"><span style="color:#F8F8F2;">    elapsed </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Program completed in </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">elapsed</span><span style="color:#66D9EF;font-style:italic;">:0.5f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> seconds.&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> logging</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> contextlib </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asynccontextmanager</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Interactor</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">agen</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.agen </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> agen</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> interact</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">*</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">**</span><span style="color:#FD971F;font-style:italic;">kwargs</span><span style="color:#F8F8F2;">, ):</span></span>
<span class="line"><span style="color:#F92672;">        try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            await</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.agen.asend((args, kwargs))</span></span>
<span class="line"><span style="color:#F92672;">        except</span><span style="color:#66D9EF;font-style:italic;"> StopAsyncIteration</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            logging.exception(</span><span style="color:#E6DB74;">&quot;The async generator is already exhausted!&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> wrap_in_asyngen</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">handler</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        args, kwargs </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> yield</span></span>
<span class="line"><span style="color:#F8F8F2;">        handler(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">args, </span><span style="color:#F92672;">**</span><span style="color:#F8F8F2;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">@asynccontextmanager</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> start</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">agen</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> agen.asend(</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        yield</span><span style="color:#F8F8F2;"> Interactor(agen)    </span></span>
<span class="line"><span style="color:#F92672;">    finally</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> agen.aclose()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    async</span><span style="color:#F92672;"> with</span><span style="color:#F8F8F2;"> start(wrap_in_asyngen(</span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">)) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> w:</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> w.interact(</span><span style="color:#E6DB74;">&quot;Put &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> w.interact(</span><span style="color:#E6DB74;">&quot;the &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> w.interact(</span><span style="color:#E6DB74;">&quot;worker &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> w.interact(</span><span style="color:#E6DB74;">&quot;to &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        await</span><span style="color:#F8F8F2;"> w.interact(</span><span style="color:#E6DB74;">&quot;work!&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,15))])}const f=r(v,[["render",m]]),D=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week0910.html","title":"高级算法——第9,10周查漏补缺","lang":"zh-CN","frontmatter":{"title":"高级算法——第9,10周查漏补缺","icon":"python","date":"2024-11-23T12:07:59.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1732526111000,"updatedTime":1733574622000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":3,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":13.33,"words":4000},"filePathRelative":"zh/Advanced_Algorithms/Week0910.md","localizedDate":"2024年11月23日"}');export{f as comp,D as data};

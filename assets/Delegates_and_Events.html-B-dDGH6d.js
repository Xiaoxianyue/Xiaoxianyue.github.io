import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as e}from"./app-COYsNQIt.js";const p="/assets/image-20240506204452879-CRdxgU1R.png",o="/assets/image-20240506222655870-O9hWta20.png",i="/assets/image-20240506223119885-D0dMNA-1.png",t={};function c(r,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="_1-delegate-简介" tabindex="-1"><a class="header-anchor" href="#_1-delegate-简介"><span>1. Delegate 简介</span></a></h2><ul><li><p>回调函数是程序指定并以某种方式 &quot;注册 &quot;的函数，然后被另一个程序调用 -</p></li><li><p>C/C++ 我们可以通过函数指针实现回调函数</p></li><li><p>C# -我们可以将方法引用封装在委托中</p></li><li><p>在 C# 中，委托被视为一种引用类型，与类类型类似</p></li><li><p>操作符 new 用于创建委托的新实例</p></li><li><p>委托是对类中方法的安全引用类型</p></li></ul><h3 id="_1-1-使用委托" tabindex="-1"><a class="header-anchor" href="#_1-1-使用委托"><span>1.1 使用委托</span></a></h3><ul><li>委托是 C# 程序中管理事件的重要部分</li><li>事件是指发生的、我们的程序可能需要响应的事情 - 例如：人们按下用户界面上的按钮、时钟滴答作响以及信息通过网络到达</li><li>在每种情况下，我们都需要告诉系统在事件发生时该怎么做</li></ul><h3 id="_1-2-类型安全的委托" tabindex="-1"><a class="header-anchor" href="#_1-2-类型安全的委托"><span>1.2 类型安全的委托</span></a></h3><ul><li><p>类型安全这一短语在这里的意思是，如果方法接受两个整数参数并返回一个字符串，那么该方法的委托将具有完全相同的外观，并且不能以任何其他方式使用。</p></li><li><p>使用这个词是为了将委托与指针之类的东西区分开来，指针在 C 语言等更原始的语言中使用。</p></li><li><p>C/C++ - 可以创建指向方法的指针，但 C 语言环境不知道方法的真实面貌</p></li></ul><h3 id="_1-3-声明委托" tabindex="-1"><a class="header-anchor" href="#_1-3-声明委托"><span>1.3 声明委托</span></a></h3><ul><li>在 C# 中，我们使用关键字 delegate 和封装方法的签名来声明委托</li><li>一些命名约定建议使用以 &quot;Callback &quot;结尾的委托名称 -</li><li>一些书籍没有使用这些约定</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> delegate</span><span style="color:#F92672;"> void</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">NotifyCallback</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">decimal</span><span style="color:#F8F8F2;"> balance);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-4-使用委托-在银行示例中" tabindex="-1"><a class="header-anchor" href="#_1-4-使用委托-在银行示例中"><span>1.4 使用委托（在银行示例中......）</span></a></h3><ul><li><p>考虑 &quot;银行 &quot;示例中的费用计算 - 银行将有许多不同的方法来进行计算，这取决于客户的类型和客户的状态</p></li><li><p>它可能希望有一种方法，可以让程序在运行时选择使用哪种费用计算方法</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> delegate</span><span style="color:#F92672;"> decimal</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">CalculateFee</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">decimal</span><span style="color:#F8F8F2;"> balance);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>这个委托可以代替接受一个十进制参数并返回一个十进制值的方法。</p></li></ul><h3 id="_1-5-合理使用委托" tabindex="-1"><a class="header-anchor" href="#_1-5-合理使用委托"><span>1.5 合理使用委托</span></a></h3><ul><li>让程序在运行过程中改变自己的操作是一件相当奇怪的事情 -</li><li>所介绍的示例演示了委托是如何让程序将方法引用作为对象来操作的，而不是一种编写程序的好方法 -</li><li>委托经常用于事件处理程序，也用于管理线程</li></ul><h3 id="_1-6-声明位置" tabindex="-1"><a class="header-anchor" href="#_1-6-声明位置"><span>1.6 声明位置</span></a></h3><ul><li><p>调用委托与调用方法类似。</p></li><li><p>-但是，委托并不一定只指向与委托变量定义在同一个类中的方法。 它也可以是其他类和结构中的方法</p></li><li><p>-如果我们在顶层程序（默认情况下在 Program.cs 中表示）中定义了委托，那么和其他类型一样，委托也是在代码末尾（或顶层之前）定义的。</p></li><li><p>但原则上，委托可以在一个类中定义</p></li></ul><h3 id="_1-7" tabindex="-1"><a class="header-anchor" href="#_1-7"><span>1.7</span></a></h3><p>-当你实例化一个委托时，你可以将它的实例与任何具有兼容签名和返回类型的方法关联起来</p><p>-委托用于将方法作为参数传递给其他方法</p><p>-委托类型是密封的-不能从它派生出来</p><h2 id="_2-实现一个委托" tabindex="-1"><a class="header-anchor" href="#_2-实现一个委托"><span>2. 实现一个委托</span></a></h2><h3 id="_2-1-代码" tabindex="-1"><a class="header-anchor" href="#_2-1-代码"><span>2.1 代码</span></a></h3><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span style="color:#F92672;"> int</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> x, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> y);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Progarm</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;"> operation </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Add;</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> operation</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        operation </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Multiple;</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> operation</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(y);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#A6E22E;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> x, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> y) </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#A6E22E;"> Multiple</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> x, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> y) </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>另一种方法是使用构造函数创建委托对象，并将所需的方法传递给该构造函数.</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span style="color:#F92672;"> int</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> x, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> y);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Progarm</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;"> operation1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Add;</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;"> operation2 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;">(Add);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#A6E22E;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> x, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> y) </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-将方法签名与委托相匹配" tabindex="-1"><a class="header-anchor" href="#_2-2-将方法签名与委托相匹配"><span>2.2. 将方法签名与委托相匹配</span></a></h3><ul><li><p>如果方法的返回类型和参数集相同，则方法与委托相匹配</p></li><li><p>请记住，ref、in 和 out 修饰符的作用与往常一样，例如：</p></li></ul><p>delegate void SomeDel(inta, double b);</p><p>Matching method:</p><p>void SomeMethod1(intg, double n) { }</p><p>Not matching :</p><p>double SomeMethod2(int g, double n) { return g + n; }</p><p>void SomeMethod3(double n, int g) { }</p><p>void SomeMethod4(ref int g, double n) { }</p><p>void SomeMethod5(out int g, double n) { g = 6; }</p><h3 id="_2-3-adding-methods-to-a-delegate" tabindex="-1"><a class="header-anchor" href="#_2-3-adding-methods-to-a-delegate"><span>2.3 Adding methods to a delegate</span></a></h3><p>-委托可以指向具有相同签名和返回类型的多个方法</p><p>-委托中的所有方法都属于一个特殊的列表，称为调用列表</p><p>-当委托被调用时，该列表中的所有方法都会被依次调用。</p><p>-我们可以在该列表中添加多个方法。</p><ul><li>To add methods to a delegate, use the += operation: message += HowAreYou;</li></ul><h3 id="_2-4-removing-methods-from-a-delegate" tabindex="-1"><a class="header-anchor" href="#_2-4-removing-methods-from-a-delegate"><span>2.4 Removing methods from a delegate</span></a></h3><p>•In a similar way, we can remove methods from the delegate using -= operations</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span style="color:#F92672;"> void</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Hello;</span></span>
<span class="line"><span style="color:#F8F8F2;">        message </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> HowAreYou;</span></span>
<span class="line"><span style="color:#A6E22E;">        message</span><span style="color:#F8F8F2;">();</span><span style="color:#88846F;">//call all methods from message</span></span>
<span class="line"><span style="color:#F8F8F2;">        message </span><span style="color:#F92672;">-=</span><span style="color:#F8F8F2;"> HowAreYou;</span><span style="color:#88846F;">//remove the HowAreYou</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (message </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">) </span><span style="color:#A6E22E;">message</span><span style="color:#F8F8F2;">();</span><span style="color:#88846F;">//call Hello</span></span>
<span class="line"><span style="color:#A6E22E;">        message</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> Hello</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Hello&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> HowAreYou</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;HowAreYou&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//output</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">HowAreYou</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-5-combine-delegates-multicast-delegates" tabindex="-1"><a class="header-anchor" href="#_2-5-combine-delegates-multicast-delegates"><span>2.5 Combine delegates (multicast delegates)</span></a></h3><p>Delegates can be combined:</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span style="color:#F92672;"> void</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Hello;</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> HowAreYou;</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> message1 </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> message2;</span></span>
<span class="line"><span style="color:#A6E22E;">        message3</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> Hello</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Hello&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> HowAreYou</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;HowAreYou&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//output</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">HowAreYou</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>或者：</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span style="color:#F92672;"> void</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">CustomCallback</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> s);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TestClass</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Hello</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> s)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">$&quot;  Hello, {</span><span style="color:#F8F8F2;">s</span><span style="color:#E6DB74;">}!&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Goodbye</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> s)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">$&quot;  Goodbye, {</span><span style="color:#F8F8F2;">s</span><span style="color:#E6DB74;">}!&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">CustomCallback</span><span style="color:#F8F8F2;"> hiDel, byeDel, multiDel, multiMinusHiDel;</span></span>
<span class="line"><span style="color:#F8F8F2;">        hiDel </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Hello;</span></span>
<span class="line"><span style="color:#F8F8F2;">        byeDel </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Goodbye;</span></span>
<span class="line"><span style="color:#F8F8F2;">        multiDel </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> hiDel </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> byeDel;</span></span>
<span class="line"><span style="color:#F8F8F2;">        multiMinusHiDel </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> multiDel </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> hiDel;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Invoking delegate hiDel:&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">        hiDel</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;A&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Invoking delegate byeDel:&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">        byeDel</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;B&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Invoking delegate multiDel:&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">        multiDel</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;C&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Invoking delegate multiMinusHiDel:&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">        multiMinusHiDel</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;D&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">/* Output:</span></span>
<span class="line"><span style="color:#88846F;">Invoking delegate hiDel:</span></span>
<span class="line"><span style="color:#88846F;">  Hello, A!</span></span>
<span class="line"><span style="color:#88846F;">Invoking delegate byeDel:</span></span>
<span class="line"><span style="color:#88846F;">  Goodbye, B!</span></span>
<span class="line"><span style="color:#88846F;">Invoking delegate multiDel:</span></span>
<span class="line"><span style="color:#88846F;">  Hello, C!</span></span>
<span class="line"><span style="color:#88846F;">  Goodbye, C!</span></span>
<span class="line"><span style="color:#88846F;">Invoking delegate multiMinusHiDel:</span></span>
<span class="line"><span style="color:#88846F;">  Goodbye, D!</span></span>
<span class="line"><span style="color:#88846F;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-6-method-invoke" tabindex="-1"><a class="header-anchor" href="#_2-6-method-invoke"><span>2.6 Method Invoke()</span></a></h3><p>Another way of calling a delegate is to use <strong>Invoke()</strong> :</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span style="color:#F92672;"> void</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Hello;</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> HowAreYou;</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Message</span><span style="color:#F8F8F2;"> message3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> message1 </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> message2;</span></span>
<span class="line"><span style="color:#F8F8F2;">        message3.</span><span style="color:#A6E22E;">Invoke</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> Hello</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Hello&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> HowAreYou</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;HowAreYou&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//same output</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Method Invoke() and operator null?</strong></p><figure><img src="`+p+`" alt="image-20240506204452879" tabindex="0" loading="lazy"><figcaption>image-20240506204452879</figcaption></figure><h3 id="_2-7-generic-delegates" tabindex="-1"><a class="header-anchor" href="#_2-7-generic-delegates"><span>2.7 Generic delegates</span></a></h3><p>•Delegates, like other types, can be generic</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">decimal</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; squareOperation </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Square;</span></span>
<span class="line"><span style="color:#F92672;">        decimal</span><span style="color:#F8F8F2;"> result1 </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> squareOperation</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(result1);</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; doubleOperation </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Double;</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> result2 </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> doubleOperation</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(result2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        decimal</span><span style="color:#A6E22E;"> Square</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> n) </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> n</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> n;</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#A6E22E;"> Double</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> n) </span><span style="color:#F92672;">=&gt;</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> n;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">delegate</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Operation</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#A6E22E;text-decoration:underline;">K</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#A6E22E;text-decoration:underline;">K</span><span style="color:#F8F8F2;"> val);</span><span style="color:#88846F;">//T是输入参数的类型，K是返回值类型！</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-8-异步回调" tabindex="-1"><a class="header-anchor" href="#_2-8-异步回调"><span>2.8 异步回调</span></a></h3><p>将委托作为参数</p><ul><li>由于实例化的委托是一个对象，因此可以将其作为参数传递，或分配给一个属性</li><li>这允许方法接受委托作为参数（并在需要时稍后调用）</li><li>这被称为异步回调： -当&lt;长&gt;进程完成时通知调用者的常用方法</li></ul><figure><img src="`+o+'" alt="image-20240506222655870" tabindex="0" loading="lazy"><figcaption>image-20240506222655870</figcaption></figure><h3 id="_2-9-return-delegates-from-a-method" tabindex="-1"><a class="header-anchor" href="#_2-9-return-delegates-from-a-method"><span>2.9 Return delegates from a method</span></a></h3><p>•the return type of the method is an Operation delegate</p><figure><img src="'+i+`" alt="image-20240506223119885" tabindex="0" loading="lazy"><figcaption>image-20240506223119885</figcaption></figure><h2 id="_3-event" tabindex="-1"><a class="header-anchor" href="#_3-event"><span>3. Event</span></a></h2><ul><li><p>事件使一个类或对象能够在感兴趣的事情发生时通知其他类或对象</p></li><li><p>The class that sends (or raises) the event is called the publisher and the classes that receive (or handle) the event are called subscribers</p></li></ul><p>•事件具有以下属性：<br> •发布者决定何时引发事件；订阅者确定针对事件采取的操作<br> •一个活动可以有多个订阅者。一个订阅者可以处理多个来自多个发布者的事件<br> •从不引发没有订阅者的事件<br> •事件通常用于指示用户操作，如按钮点击或菜单图形用户界面中的选择</p><h3 id="_3-1-实现代码" tabindex="-1"><a class="header-anchor" href="#_3-1-实现代码"><span>3.1 实现代码</span></a></h3><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 声明一个委托类型，可引用接受字符串参数并返回void的方法</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> delegate</span><span style="color:#F92672;"> void</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Notify</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 发布者类，负责声明并触发事件</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#88846F;">    // 使用 Notify 委托类型声明一个事件</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#66D9EF;font-style:italic;"> event</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Notify</span><span style="color:#F8F8F2;"> OnProcessCompleted;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // 模拟处理过程的方法</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Process</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Processing started...&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 模拟一些工作</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.Threading.Thread.</span><span style="color:#A6E22E;">Sleep</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 检查事件是否有订阅者并触发事件，将消息传递给订阅者</span></span>
<span class="line"><span style="color:#F8F8F2;">        OnProcessCompleted</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">Invoke</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Processing completed!&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 订阅者类，负责订阅事件并处理事件</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Subscriber</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#88846F;">    // 订阅事件，将事件与处理方法关联</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Subscribe</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span><span style="color:#F8F8F2;"> pub)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        pub.OnProcessCompleted </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> HandleProcessCompleted;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // 与 Notify 委托类型匹配的方法，当事件被触发时会调用这个方法</span></span>
<span class="line"><span style="color:#F92672;">    void</span><span style="color:#A6E22E;"> HandleProcessCompleted</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> message)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(message);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">EventExample</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#88846F;">        // 创建发布者和订阅者对象</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span><span style="color:#F8F8F2;"> pub </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Subscriber</span><span style="color:#F8F8F2;"> sub </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Subscriber</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 订阅发布者的事件</span></span>
<span class="line"><span style="color:#F8F8F2;">        sub.</span><span style="color:#A6E22E;">Subscribe</span><span style="color:#F8F8F2;">(pub);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 开始处理，触发事件</span></span>
<span class="line"><span style="color:#F8F8F2;">        pub.</span><span style="color:#A6E22E;">Process</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-2-更多例子" tabindex="-1"><a class="header-anchor" href="#_3-2-更多例子"><span>3.2 更多例子</span></a></h3><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">namespace</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">DotNetEvents</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#88846F;">    // Define a class to hold custom event info</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">CustomEventArgs</span><span style="color:#F8F8F2;"> : </span><span style="color:#A6E22E;text-decoration:underline;">EventArgs</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        public</span><span style="color:#A6E22E;"> CustomEventArgs</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> message)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Message </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> message;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> Message { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // Class that publishes an event</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#88846F;">        // Declare the event using EventHandler&lt;T&gt;</span></span>
<span class="line"><span style="color:#F92672;">        public</span><span style="color:#66D9EF;font-style:italic;"> event</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">EventHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">CustomEventArgs</span><span style="color:#F8F8F2;">&gt;? RaiseCustomEvent;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> DoSomething</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#88846F;">            // 在这里编写一些有用的代码</span><span style="color:#88846F;"> // 然后引发事件。您也可以在执行代码块之前引发事件。</span></span>
<span class="line"><span style="color:#A6E22E;">            OnRaiseCustomEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">CustomEventArgs</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Event triggered&quot;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 将事件调用包在受保护的虚拟方法中</span><span style="color:#88846F;"> // 以允许派生类覆盖事件调用行为</span></span>
<span class="line"><span style="color:#F92672;">        protected</span><span style="color:#F92672;"> virtual</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> OnRaiseCustomEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">CustomEventArgs</span><span style="color:#F8F8F2;"> e)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#88846F;">           // 为事件创建一个临时副本，以避免在空值检查之后、事件发生之前，最后一个订阅者立即取消订阅时，出现</span><span style="color:#88846F;"> // 竞争条件。</span></span>
<span class="line"><span>            </span><span style="color:#A6E22E;text-decoration:underline;">EventHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">CustomEventArgs</span><span style="color:#F8F8F2;">&gt;? raiseEvent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> RaiseCustomEvent;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            // 如果没有订阅者，事件将为空</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (raiseEvent </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#88846F;">                // Format the string to send inside the CustomEventArgs parameter</span></span>
<span class="line"><span style="color:#F8F8F2;">                e.Message </span><span style="color:#F92672;">+=</span><span style="color:#E6DB74;"> $&quot; at {</span><span style="color:#F8F8F2;">DateTime</span><span style="color:#E6DB74;">.</span><span style="color:#F8F8F2;">Now</span><span style="color:#E6DB74;">}&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">                // Call to raise the event.</span></span>
<span class="line"><span style="color:#A6E22E;">                raiseEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, e);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    //Class that subscribes to an event</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Subscriber</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        private</span><span style="color:#F92672;"> readonly</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> _id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        public</span><span style="color:#A6E22E;"> Subscriber</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> id, </span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span><span style="color:#F8F8F2;"> pub)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            _id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            // Subscribe to the event</span></span>
<span class="line"><span style="color:#F8F8F2;">            pub.RaiseCustomEvent </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> HandleCustomEvent;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // Define what actions to take when the event is raised.</span></span>
<span class="line"><span style="color:#F92672;">        void</span><span style="color:#A6E22E;"> HandleCustomEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">object</span><span style="color:#F8F8F2;">? sender, </span><span style="color:#A6E22E;text-decoration:underline;">CustomEventArgs</span><span style="color:#F8F8F2;"> e)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">$&quot;{</span><span style="color:#F8F8F2;">_id</span><span style="color:#E6DB74;">} received this message: {</span><span style="color:#F8F8F2;">e</span><span style="color:#E6DB74;">.</span><span style="color:#F8F8F2;">Message</span><span style="color:#E6DB74;">}&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">            var</span><span style="color:#F8F8F2;"> pub </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Publisher</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">            var</span><span style="color:#F8F8F2;"> sub1 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Subscriber</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;sub1&quot;</span><span style="color:#F8F8F2;">, pub);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">            var</span><span style="color:#F8F8F2;"> sub2 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Subscriber</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;sub2&quot;</span><span style="color:#F8F8F2;">, pub);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            // Call the method that raises the event.</span></span>
<span class="line"><span style="color:#F8F8F2;">            pub.</span><span style="color:#A6E22E;">DoSomething</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            // Keep the console window open</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Press any key to continue...&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,70)]))}const y=n(t,[["render",c]]),v=JSON.parse('{"path":"/zh/OOP/Delegates_and_Events.html","title":"Delegates and Event","lang":"zh-CN","frontmatter":{"title":"Delegates and Event","icon":"c","date":"2024-05-06T16:50:33.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. Delegate 简介 回调函数是程序指定并以某种方式 \\"注册 \\"的函数，然后被另一个程序调用 - C/C++ 我们可以通过函数指针实现回调函数 C# -我们可以将方法引用封装在委托中 在 C# 中，委托被视为一种引用类型，与类类型类似 操作符 new 用于创建委托的新实例 委托是对类中方法的安全引用类型 1.1 使用委托 委托是 C# 程序中管...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/OOP/Delegates_and_Events.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"Delegates and Event"}],["meta",{"property":"og:description","content":"1. Delegate 简介 回调函数是程序指定并以某种方式 \\"注册 \\"的函数，然后被另一个程序调用 - C/C++ 我们可以通过函数指针实现回调函数 C# -我们可以将方法引用封装在委托中 在 C# 中，委托被视为一种引用类型，与类类型类似 操作符 new 用于创建委托的新实例 委托是对类中方法的安全引用类型 1.1 使用委托 委托是 C# 程序中管..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-13T13:51:57.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-06T16:50:33.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-13T13:51:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Delegates and Event\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-06T16:50:33.000Z\\",\\"dateModified\\":\\"2024-05-13T13:51:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1714991289000,"updatedTime":1715608317000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":7,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":7.97,"words":2390},"filePathRelative":"zh/OOP/Delegates_and_Events.md","localizedDate":"2024年5月6日","excerpt":"<h2>1. Delegate 简介</h2>\\n<ul>\\n<li>\\n<p>回调函数是程序指定并以某种方式 \\"注册 \\"的函数，然后被另一个程序调用 -</p>\\n</li>\\n<li>\\n<p>C/C++ 我们可以通过函数指针实现回调函数</p>\\n</li>\\n<li>\\n<p>C# -我们可以将方法引用封装在委托中</p>\\n</li>\\n<li>\\n<p>在 C# 中，委托被视为一种引用类型，与类类型类似</p>\\n</li>\\n<li>\\n<p>操作符 new 用于创建委托的新实例</p>\\n</li>\\n<li>\\n<p>委托是对类中方法的安全引用类型</p>\\n</li>\\n</ul>\\n<h3>1.1 使用委托</h3>","autoDesc":true}');export{y as comp,v as data};

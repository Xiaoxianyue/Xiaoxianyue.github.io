import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as l}from"./app-84lBMjzT.js";const t={};function o(p,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="_1-模块化介绍" tabindex="-1"><a class="header-anchor" href="#_1-模块化介绍"><span>1. 模块化介绍</span></a></h2><div class="hint-container info"><p class="hint-container-title">推荐阅读顺序</p><table><thead><tr><th>阶段</th><th>文件</th><th>理解重点</th></tr></thead><tbody><tr><td>🌱 阶段一</td><td><code>main.py</code> → <code>SpImpl.py</code></td><td>启动流程、策略注册方式</td></tr><tr><td>🌱 阶段二</td><td><code>base_strategy.py</code> → <code>dual_moving_average_strategy.py</code></td><td>策略结构、继承方式</td></tr><tr><td>🌿 阶段三</td><td><code>quote_manager.py</code> → <code>data.py</code> → <code>snapshot.py</code></td><td>行情是如何流入策略的</td></tr><tr><td>🌿 阶段四</td><td><code>trade_executor.py</code> → <code>trade_manager.py</code></td><td>策略发单是如何执行与跟踪的</td></tr><tr><td>🌳 阶段五</td><td><code>callback.py</code> → <code>position_manager.py</code></td><td>成交、状态如何反向驱动系统更新</td></tr><tr><td>🌳 阶段六</td><td><code>ConfigRead.py</code>, <code>kmax.py</code>, <code>type.py</code>, <code>utils.py</code></td><td>配置与工具底层逻辑支持</td></tr></tbody></table></div><h3 id="_1-1-代码逻辑" tabindex="-1"><a class="header-anchor" href="#_1-1-代码逻辑"><span>1.1 代码逻辑</span></a></h3><div class="language-bash line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="bash" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">kmax_6.13/</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> configs/</span><span style="color:#88846F;">                         # 配置和底层动态库</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> HSNsqApi.dll</span><span style="color:#88846F;">                # Windows 下的底层接口 DLL</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> kmax.pyd</span><span style="color:#88846F;">                    # Python 封装接口，实际调用 C++ 库</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> sdk_config.ini</span><span style="color:#88846F;">              # SDK 启动配置项，如IP/账号</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> kmaxapi/</span><span style="color:#88846F;">                        # 封装行情+交易回调的接口层</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> callback.py</span><span style="color:#88846F;">                 # 行情/成交/状态等的回调事件处理</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> data.py</span><span style="color:#88846F;">                     # 封装行情订阅、处理</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> kmax.py</span><span style="color:#88846F;">                     # 核心 API 统一调用封装（连接底层接口）</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> model.py</span><span style="color:#88846F;">                    # 自定义数据结构类，如订单、行情等</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> test.py</span><span style="color:#88846F;">                     # 接口测试用例</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> type.py</span><span style="color:#88846F;">                     # 定义常量/枚举类型（交易方向、状态等）</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> util.py</span><span style="color:#88846F;">                     # 时间转换、结构体序列化等工具函数</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> libs/</span><span style="color:#88846F;">                           # 提供不同 Python 版本的封装库</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> py37/</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   │</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> kmax.pyd</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   │</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> kmax.so</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> py38/</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">       ├──</span><span style="color:#E6DB74;"> kmax.pyd</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">       └──</span><span style="color:#E6DB74;"> kmax.so</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> log/</span><span style="color:#88846F;">                            # 运行时日志</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#FD971F;"> *</span><span style="color:#E6DB74;">.log</span><span style="color:#88846F;">                       # 每次运行或日期生成的交易/系统日志</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> market_data_manager/</span><span style="color:#88846F;">           # 行情管理模块</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> quote_manager.py</span><span style="color:#88846F;">           # 处理订阅、缓存、分发实时行情（封装了 data.py）</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> models/</span><span style="color:#88846F;">                         # 数据结构定义</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> snapshot.py</span><span style="color:#88846F;">                # 定义快照结构，简化策略读取字段</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> position_data_manager/</span><span style="color:#88846F;">         # 仓位管理模块</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> position_manager.py</span><span style="color:#88846F;">        # 实时更新账户资产/仓位状态</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> strategy/</span><span style="color:#88846F;">                       # 策略实现模块</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> base_strategy.py</span><span style="color:#88846F;">           # 所有策略的抽象基类，统一接口（on_tick/on_bar等）</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> dual_moving_average_strategy.py</span><span style="color:#88846F;">  # 双均线策略示例</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> trade/</span><span style="color:#88846F;">                          # 下单执行与管理模块</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   ├──</span><span style="color:#E6DB74;"> trade_executor.py</span><span style="color:#88846F;">          # 封装交易动作的实际执行逻辑（发单、撤单）</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#E6DB74;">   └──</span><span style="color:#E6DB74;"> trade_manager.py</span><span style="color:#88846F;">           # 管理交易状态、跟踪委托/成交、处理回报</span></span>
<span class="line"><span style="color:#A6E22E;">│</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> ConfigRead.py</span><span style="color:#88846F;">                   # 读取配置文件 sdk_config.ini</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> main.py</span><span style="color:#88846F;">                         # 启动程序入口，初始化系统，加载策略等</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> SpImpl.py</span><span style="color:#88846F;">                       # 策略实例化与挂接逻辑（strategy 的封装者）</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#E6DB74;"> utils.py</span><span style="color:#88846F;">                        # 通用工具函数集合</span></span>
<span class="line"><span style="color:#A6E22E;">└──</span><span style="color:#E6DB74;"> update.txt</span><span style="color:#88846F;">                      # 项目更新日志说明</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-2-configs" tabindex="-1"><a class="header-anchor" href="#_1-2-configs"><span>1.2 <code>configs/</code></span></a></h3><ul><li><code>HSNsqApi.dll</code>：Windows 环境下调用的底层动态库（通常是第三方券商提供的 SDK，比如恒生、盛立、飞创）。</li><li><code>kmax.pyd</code>：是 Python 封装好的接口模块，用于调用 <code>dll</code> 中的方法（可通过 <code>import kmax</code> 直接用）。</li><li><code>sdk_config.ini</code>：配置文件，包含连接网关、认证信息、默认订阅等启动参数。</li></ul><h3 id="_1-3-main-spilmpl" tabindex="-1"><a class="header-anchor" href="#_1-3-main-spilmpl"><span>1.3 <code>main</code>-&gt;<code>spilmpl</code></span></a></h3><ul><li><p><code>main.py</code>：负责初始化交易与行情接口、注册回调类 <code>NsqSpiImpl</code> 并启动整个量化系统。</p></li><li><p><code>SpiImpl.py</code>（<code>NsqSpiImpl</code>）：负责登录行情系统、订阅市场数据，并在接收行情回调时驱动策略运行与交易执行。</p></li></ul><h3 id="_1-4-strategy" tabindex="-1"><a class="header-anchor" href="#_1-4-strategy"><span>1.4 Strategy</span></a></h3><h4 id="base-strategy" tabindex="-1"><a class="header-anchor" href="#base-strategy"><span>base_strategy</span></a></h4><ul><li>Base_strategy 是所有策略的父类，提供了统一的接口。要求所有策略必须实现 <code>on_new_ticks(...)</code> 方法，并返回 <code>TradeSignal</code>（<code>BUY/SELL/HOLD</code>）。</li></ul><h4 id="dual-moving-average-strategy" tabindex="-1"><a class="header-anchor" href="#dual-moving-average-strategy"><span>dual_moving_average_strategy</span></a></h4><p><strong>核心逻辑</strong></p><table><thead><tr><th>判断条件</th><th>操作建议</th></tr></thead><tbody><tr><td>当前短期均线（MA10）上穿长期均线（MA30）</td><td>如果持仓未超限 → <strong>BUY</strong></td></tr><tr><td>当前短期均线下穿长期均线</td><td>如果已有仓位 → <strong>SELL</strong></td></tr><tr><td>否则</td><td><strong>HOLD</strong>（不动）</td></tr></tbody></table><p><strong>两个文件体现的核心思想</strong></p><table><thead><tr><th>特点</th><th>描述</th></tr></thead><tbody><tr><td>✳️ 模板方法模式</td><td><code>BaseStrategy</code> 提供统一接口，子类实现具体策略</td></tr><tr><td>🔁 数据驱动执行</td><td>每次接收到行情 tick，就会调用 <code>on_new_ticks(...)</code> 进行策略判断</td></tr><tr><td>📦 可插拔式策略</td><td>新策略只需继承 <code>BaseStrategy</code>，实现核心判断即可接入系统</td></tr><tr><td>🔒 风控嵌入</td><td>策略内部嵌入了持仓判断，防止超买或误卖</td></tr></tbody></table>`,16)]))}const r=n(t,[["render",o]]),i=JSON.parse('{"path":"/zh/Wuhan_uni/stock.html","title":"武汉理工——股票","lang":"zh-CN","frontmatter":{"title":"武汉理工——股票","icon":"English","date":"2025-07-21T10:24:22.000Z","author":"XiaoXianYue","isOriginal":true,"category":["武汉理工项目"],"tag":["武汉理工项目"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 模块化介绍 推荐阅读顺序 1.1 代码逻辑 1.2 configs/ HSNsqApi.dll：Windows 环境下调用的底层动态库（通常是第三方券商提供的 SDK，比如恒生、盛立、飞创）。 kmax.pyd：是 Python 封装好的接口模块，用于调用 dll 中的方法（可通过 import kmax 直接用）。 sdk_config.ini...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Wuhan_uni/stock.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"武汉理工——股票"}],["meta",{"property":"og:description","content":"1. 模块化介绍 推荐阅读顺序 1.1 代码逻辑 1.2 configs/ HSNsqApi.dll：Windows 环境下调用的底层动态库（通常是第三方券商提供的 SDK，比如恒生、盛立、飞创）。 kmax.pyd：是 Python 封装好的接口模块，用于调用 dll 中的方法（可通过 import kmax 直接用）。 sdk_config.ini..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-24T08:16:59.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"武汉理工项目"}],["meta",{"property":"article:published_time","content":"2025-07-21T10:24:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-24T08:16:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"武汉理工——股票\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-21T10:24:22.000Z\\",\\"dateModified\\":\\"2025-07-24T08:16:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1753345019000,"updatedTime":1753345019000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":1,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":3.14,"words":943},"filePathRelative":"zh/Wuhan_uni/stock.md","localizedDate":"2025年7月21日","excerpt":"<h2>1. 模块化介绍</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">推荐阅读顺序</p>\\n<table>\\n<thead>\\n<tr>\\n<th>阶段</th>\\n<th>文件</th>\\n<th>理解重点</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>🌱 阶段一</td>\\n<td><code>main.py</code> → <code>SpImpl.py</code></td>\\n<td>启动流程、策略注册方式</td>\\n</tr>\\n<tr>\\n<td>🌱 阶段二</td>\\n<td><code>base_strategy.py</code> → <code>dual_moving_average_strategy.py</code></td>\\n<td>策略结构、继承方式</td>\\n</tr>\\n<tr>\\n<td>🌿 阶段三</td>\\n<td><code>quote_manager.py</code> → <code>data.py</code> → <code>snapshot.py</code></td>\\n<td>行情是如何流入策略的</td>\\n</tr>\\n<tr>\\n<td>🌿 阶段四</td>\\n<td><code>trade_executor.py</code> → <code>trade_manager.py</code></td>\\n<td>策略发单是如何执行与跟踪的</td>\\n</tr>\\n<tr>\\n<td>🌳 阶段五</td>\\n<td><code>callback.py</code> → <code>position_manager.py</code></td>\\n<td>成交、状态如何反向驱动系统更新</td>\\n</tr>\\n<tr>\\n<td>🌳 阶段六</td>\\n<td><code>ConfigRead.py</code>, <code>kmax.py</code>, <code>type.py</code>, <code>utils.py</code></td>\\n<td>配置与工具底层逻辑支持</td>\\n</tr>\\n</tbody>\\n</table>\\n</div>","autoDesc":true}');export{r as comp,i as data};

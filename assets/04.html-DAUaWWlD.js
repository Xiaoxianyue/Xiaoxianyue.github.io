import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as t,o as n}from"./app-BtkhU_-I.js";const s="/assets/image-20240521181043616-B2GprZkE.png",p="/assets/image-20240522001738768-BszVY8iN.png",l="/assets/image-20240522001845388-Wl0s9fit.png",r="/assets/image-20240522002108379-Du18C198.png",o="/assets/image-20240524123155839-DRTmfKps.png",c="/assets/image-20240524123132548-iH18ctTi.png",g="/assets/image-20240524123421981-DT4saLW6.png",m="/assets/image-20240524123506484-lwu9iNEC.png",d="/assets/image-20240522002950956-DK-2HN31.png",h="/assets/image-20240522003018866-BhsiPmkH.png",_="/assets/image-20240522004744367-B1JDtR6s.png",f="/assets/image-20240522005506638-CpV_nA1N.png",u="/assets/image-20240522010534774-BD3YaCO8.png",b="/assets/image-20240522010925191-d2U0n9kE.png",y="/assets/image-20240522012601991-jnGBPbIv.png",x="/assets/image-20240522012645661-DwFyQGag.png",k="/assets/image-20240522013104027-DgB-5k8Y.png",z="/assets/image-20240522014204866-mbU-63bc.png",v="/assets/image-20240522014225147-D4FAXpJW.png",D="/assets/image-20240522014433313--gcFx3Md.png",T="/assets/image-20240522020950538-CmNdYkeh.png",B={};function N(X,e){return n(),i("div",null,e[0]||(e[0]=[t('<h2 id="_1-树的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-树的基本概念"><span>1. 树的基本概念</span></a></h2><h3 id="_1-1-基本术语" tabindex="-1"><a class="header-anchor" href="#_1-1-基本术语"><span>1.1 基本术语</span></a></h3><p>度：某个结点的子树的个数。树中所有结点的度的最大值称为树的度。</p><p>分支结点和叶子结点</p><p>路径和路径长度</p><p>孩子结点，双亲结点和兄弟结点</p><p>结点层次和树的高度</p><p>有序树和无序树</p><p>森林</p><h3 id="_1-2-树的性质" tabindex="-1"><a class="header-anchor" href="#_1-2-树的性质"><span>1.2 树的性质</span></a></h3><ol><li>树中的结点数等于所有结点的度数和加一。</li></ol><p>假设度数为0,1,2,3…的结点有<code>n0,n1,n2,n3…</code>个</p><p>则：<code>n0+n1+n2+n3….=0 * n0 + 1 * n1 + 2 * n2 + 3 * n3….</code></p><ol start="2"><li>度为m的树上第i层上最多有<code>m^i-1</code>个结点。</li></ol><p>二叉树中，第i层最多有<code>2^i-1</code>个结点</p><ol start="3"><li>高度为h的m次树上最多有（m^h-1)/(m-1)个结点</li></ol><p>最多结点 = 每层最多结点数之和=<code>m^0+m^1+m^2+m^3+...+m^h-1</code></p><ol start="4"><li>具有n个结点的m次树最小高度为</li></ol><img src="'+s+'" alt="image-20240521181043616" style="zoom:67%;"><h3 id="_1-3-树的基本运算" tabindex="-1"><a class="header-anchor" href="#_1-3-树的基本运算"><span>1.3 树的基本运算</span></a></h3><ol><li><strong>先根遍历</strong>：根左右</li><li><strong>后根遍历</strong>：左右根</li></ol><h3 id="_1-4-树的存储结构" tabindex="-1"><a class="header-anchor" href="#_1-4-树的存储结构"><span>1.4 树的存储结构</span></a></h3><p>1.双亲存储结构</p><img src="'+p+'" alt="image-20240522001738768" style="zoom:33%;"><p>2.孩子链存储结构</p><img src="'+l+'" alt="image-20240522001845388" style="zoom:33%;"><p>3.孩子兄弟链存储结构</p><img src="'+r+'" alt="image-20240522002108379" style="zoom:33%;"><h3 id="_1-5-树的逻辑表示方法" tabindex="-1"><a class="header-anchor" href="#_1-5-树的逻辑表示方法"><span>1.5 树的逻辑表示方法</span></a></h3><p>1.树形表示法（就是咱们平常的方法）</p><img src="'+o+'" alt="image-20240524123155839" style="zoom:50%;"><p>2.文氏图表示法</p><img src="'+c+'" alt="image-20240524123132548" style="zoom:50%;"><p>3.凹入表示法</p><img src="'+g+'" alt="image-20240524123421981" style="zoom:50%;"><p>4.括号表示法</p><img src="'+m+'" alt="image-20240524123506484" style="zoom:50%;"><h2 id="_2-二叉树的概念和性质" tabindex="-1"><a class="header-anchor" href="#_2-二叉树的概念和性质"><span>2. 二叉树的概念和性质</span></a></h2><h3 id="_2-1-二叉树的性质" tabindex="-1"><a class="header-anchor" href="#_2-1-二叉树的性质"><span>2.1 二叉树的性质</span></a></h3><p>性质1：n1 + 2n2 = n0 + n1 + n2 -1</p><p>性质2： 第i层上最多有<code>2^i-1</code>个结点（i&gt;=1)</p><p>性质3：高度为h的二叉树最多有<code>2^h-1</code>个结点</p><p>性质4：</p><figure><img src="'+d+'" alt="image-20240522002950956" tabindex="0" loading="lazy"><figcaption>image-20240522002950956</figcaption></figure><p>性质5：<img src="'+h+'" alt="image-20240522003018866" loading="lazy"></p><h3 id="_2-2-二叉树与森林-树之间的转换" tabindex="-1"><a class="header-anchor" href="#_2-2-二叉树与森林-树之间的转换"><span>2.2 二叉树与森林，树之间的转换</span></a></h3><h4 id="_2-2-1-树转换为二叉树" tabindex="-1"><a class="header-anchor" href="#_2-2-1-树转换为二叉树"><span>2.2.1 树转换为二叉树</span></a></h4><p>过程：</p><p>1.树中所有相邻兄弟之间加一条连线</p><p>2.每个结点只保留第一个（最左边）的孩子</p><p>3.整棵树顺时针旋转45度</p><figure><img src="'+_+'" alt="image-20240522004744367" tabindex="0" loading="lazy"><figcaption>image-20240522004744367</figcaption></figure><h4 id="_2-2-2-森林转换为二叉树" tabindex="-1"><a class="header-anchor" href="#_2-2-2-森林转换为二叉树"><span>2.2.2 森林转换为二叉树</span></a></h4><p>1.将森林中的每棵树都转换为相应的二叉树</p><p>2.第一棵二叉树不动，第二棵二叉树开始，依次把后一棵树的根结点作为前一棵树的根结点的右孩子，这样就可以把所有二叉树连在一起。</p><figure><img src="'+f+'" alt="image-20240522005506638" tabindex="0" loading="lazy"><figcaption>image-20240522005506638</figcaption></figure><h4 id="_2-2-3-将二叉树还原为树" tabindex="-1"><a class="header-anchor" href="#_2-2-3-将二叉树还原为树"><span>2.2.3 将二叉树还原为树</span></a></h4><p>1.若某结点是其双亲的左孩子，则把该结点的右孩子和右孩子的右孩子等都与该结点的双亲节点用连线连起来。</p><p>2.删除原二叉树中所有双亲结点与右孩子结点之间的连线。</p><p>3.逆时针旋转45度。</p><figure><img src="'+u+'" alt="image-20240522010534774" tabindex="0" loading="lazy"><figcaption>image-20240522010534774</figcaption></figure><h4 id="_2-2-4-将二叉树还原成森林" tabindex="-1"><a class="header-anchor" href="#_2-2-4-将二叉树还原成森林"><span>2.2.4 将二叉树还原成森林</span></a></h4><p>1.删掉二叉树根结点右链上所有“双亲-右孩子”的连线，分割成一个个二叉树。</p><p>2.把一个二叉树还原成树。</p><figure><img src="'+b+'" alt="image-20240522010925191" tabindex="0" loading="lazy"><figcaption>image-20240522010925191</figcaption></figure><h2 id="_3-二叉树的存储结构" tabindex="-1"><a class="header-anchor" href="#_3-二叉树的存储结构"><span>3. 二叉树的存储结构</span></a></h2><h3 id="_3-1-二叉树的顺序存储结构" tabindex="-1"><a class="header-anchor" href="#_3-1-二叉树的顺序存储结构"><span>3.1 二叉树的顺序存储结构</span></a></h3><figure><img src="'+y+'" alt="image-20240522012601991" tabindex="0" loading="lazy"><figcaption>image-20240522012601991</figcaption></figure><p>这是完全二叉树的存储结构</p><figure><img src="'+x+'" alt="image-20240522012645661" tabindex="0" loading="lazy"><figcaption>image-20240522012645661</figcaption></figure><p>这是一般二叉树，6,8,9,12,13,15都是空的！！我们可以通过补空来使其一目了然。</p><img src="'+k+'" alt="image-20240522013104027" style="zoom:80%;"><h3 id="_3-2-二叉树的链式存储结构" tabindex="-1"><a class="header-anchor" href="#_3-2-二叉树的链式存储结构"><span>3.2 二叉树的链式存储结构</span></a></h3><p>每个结点：</p><figure><img src="'+z+'" alt="image-20240522014204866" tabindex="0" loading="lazy"><figcaption>image-20240522014204866</figcaption></figure><p>代码实现：</p><figure><img src="'+v+'" alt="image-20240522014225147" tabindex="0" loading="lazy"><figcaption>image-20240522014225147</figcaption></figure><p>示意图：</p><figure><img src="'+D+'" alt="image-20240522014433313" tabindex="0" loading="lazy"><figcaption>image-20240522014433313</figcaption></figure><h2 id="_4-二叉树的基本运算以及实现" tabindex="-1"><a class="header-anchor" href="#_4-二叉树的基本运算以及实现"><span>4. 二叉树的基本运算以及实现</span></a></h2><p>1.创建二叉树</p><p>2.销毁二叉树</p><p>3.查找结点</p><p>4.找孩子结点</p><p>5.求高度</p><p>6.输出二叉树</p><h2 id="_5-二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#_5-二叉树的遍历"><span>5. 二叉树的遍历</span></a></h2><p>1.先序遍历：根左右</p><p>2.中序遍历：左根右</p><p>3.后序遍历：左右根</p><h3 id="_5-1-遍历的递归算法" tabindex="-1"><a class="header-anchor" href="#_5-1-遍历的递归算法"><span>5.1 遍历的递归算法</span></a></h3><figure><img src="'+T+'" alt="image-20240522020950538" tabindex="0" loading="lazy"><figcaption>image-20240522020950538</figcaption></figure><h3 id="_5-2-非递归算法" tabindex="-1"><a class="header-anchor" href="#_5-2-非递归算法"><span>5.2 非递归算法</span></a></h3><p>看书了解不是重点</p><h2 id="_6-线索二叉树" tabindex="-1"><a class="header-anchor" href="#_6-线索二叉树"><span>6. 线索二叉树</span></a></h2>',95)]))}const Z=a(B,[["render",N],["__file","04.html.vue"]]),P=JSON.parse('{"path":"/zh/Data_Structure/04.html","title":"树","lang":"zh-CN","frontmatter":{"title":"树","icon":"c","date":"2024-05-21T13:23:17.000Z","author":"XiaoXianYue","isOriginal":true,"category":["数据结构","大二下"],"tag":["数据结构","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 树的基本概念 1.1 基本术语 度：某个结点的子树的个数。树中所有结点的度的最大值称为树的度。 分支结点和叶子结点 路径和路径长度 孩子结点，双亲结点和兄弟结点 结点层次和树的高度 有序树和无序树 森林 1.2 树的性质 树中的结点数等于所有结点的度数和加一。 假设度数为0,1,2,3…的结点有n0,n1,n2,n3…个 则：n0+n1+n2+n...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Data_Structure/04.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"树"}],["meta",{"property":"og:description","content":"1. 树的基本概念 1.1 基本术语 度：某个结点的子树的个数。树中所有结点的度的最大值称为树的度。 分支结点和叶子结点 路径和路径长度 孩子结点，双亲结点和兄弟结点 结点层次和树的高度 有序树和无序树 森林 1.2 树的性质 树中的结点数等于所有结点的度数和加一。 假设度数为0,1,2,3…的结点有n0,n1,n2,n3…个 则：n0+n1+n2+n..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-28T17:47:05.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-21T13:23:17.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-28T17:47:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-21T13:23:17.000Z\\",\\"dateModified\\":\\"2024-05-28T17:47:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 树的基本概念","slug":"_1-树的基本概念","link":"#_1-树的基本概念","children":[{"level":3,"title":"1.1 基本术语","slug":"_1-1-基本术语","link":"#_1-1-基本术语","children":[]},{"level":3,"title":"1.2 树的性质","slug":"_1-2-树的性质","link":"#_1-2-树的性质","children":[]},{"level":3,"title":"1.3 树的基本运算","slug":"_1-3-树的基本运算","link":"#_1-3-树的基本运算","children":[]},{"level":3,"title":"1.4 树的存储结构","slug":"_1-4-树的存储结构","link":"#_1-4-树的存储结构","children":[]},{"level":3,"title":"1.5 树的逻辑表示方法","slug":"_1-5-树的逻辑表示方法","link":"#_1-5-树的逻辑表示方法","children":[]}]},{"level":2,"title":"2. 二叉树的概念和性质","slug":"_2-二叉树的概念和性质","link":"#_2-二叉树的概念和性质","children":[{"level":3,"title":"2.1 二叉树的性质","slug":"_2-1-二叉树的性质","link":"#_2-1-二叉树的性质","children":[]},{"level":3,"title":"2.2 二叉树与森林，树之间的转换","slug":"_2-2-二叉树与森林-树之间的转换","link":"#_2-2-二叉树与森林-树之间的转换","children":[{"level":4,"title":"2.2.1 树转换为二叉树","slug":"_2-2-1-树转换为二叉树","link":"#_2-2-1-树转换为二叉树","children":[]},{"level":4,"title":"2.2.2 森林转换为二叉树","slug":"_2-2-2-森林转换为二叉树","link":"#_2-2-2-森林转换为二叉树","children":[]},{"level":4,"title":"2.2.3 将二叉树还原为树","slug":"_2-2-3-将二叉树还原为树","link":"#_2-2-3-将二叉树还原为树","children":[]},{"level":4,"title":"2.2.4 将二叉树还原成森林","slug":"_2-2-4-将二叉树还原成森林","link":"#_2-2-4-将二叉树还原成森林","children":[]}]}]},{"level":2,"title":"3.  二叉树的存储结构","slug":"_3-二叉树的存储结构","link":"#_3-二叉树的存储结构","children":[{"level":3,"title":"3.1 二叉树的顺序存储结构","slug":"_3-1-二叉树的顺序存储结构","link":"#_3-1-二叉树的顺序存储结构","children":[]},{"level":3,"title":"3.2 二叉树的链式存储结构","slug":"_3-2-二叉树的链式存储结构","link":"#_3-2-二叉树的链式存储结构","children":[]}]},{"level":2,"title":"4. 二叉树的基本运算以及实现","slug":"_4-二叉树的基本运算以及实现","link":"#_4-二叉树的基本运算以及实现","children":[]},{"level":2,"title":"5. 二叉树的遍历","slug":"_5-二叉树的遍历","link":"#_5-二叉树的遍历","children":[{"level":3,"title":"5.1 遍历的递归算法","slug":"_5-1-遍历的递归算法","link":"#_5-1-遍历的递归算法","children":[]},{"level":3,"title":"5.2 非递归算法","slug":"_5-2-非递归算法","link":"#_5-2-非递归算法","children":[]}]},{"level":2,"title":"6. 线索二叉树","slug":"_6-线索二叉树","link":"#_6-线索二叉树","children":[]}],"git":{"createdTime":1716310621000,"updatedTime":1716918425000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":3}]},"readingTime":{"minutes":3.66,"words":1097},"filePathRelative":"zh/Data_Structure/04.md","localizedDate":"2024年5月21日","excerpt":"<h2>1. 树的基本概念</h2>\\n<h3>1.1 基本术语</h3>\\n<p>度：某个结点的子树的个数。树中所有结点的度的最大值称为树的度。</p>\\n<p>分支结点和叶子结点</p>\\n<p>路径和路径长度</p>\\n<p>孩子结点，双亲结点和兄弟结点</p>\\n<p>结点层次和树的高度</p>\\n<p>有序树和无序树</p>\\n<p>森林</p>\\n<h3>1.2 树的性质</h3>\\n<ol>\\n<li>树中的结点数等于所有结点的度数和加一。</li>\\n</ol>\\n<p>假设度数为0,1,2,3…的结点有<code>n0,n1,n2,n3…</code>个</p>\\n<p>则：<code>n0+n1+n2+n3….=0 * n0 + 1 * n1 + 2 * n2 + 3 * n3….</code></p>","autoDesc":true}');export{Z as comp,P as data};

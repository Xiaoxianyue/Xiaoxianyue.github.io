import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as i,o as n}from"./app-Kp9COSwt.js";const s="/assets/image-20240430225102059-Djw2A5A7.png",o="/assets/image-20240430225352145-DILtrFbq.png",l="/assets/a9877a9b-d306-4e9b-8274-18810c1faecb-7lzBysIG.png",r="/assets/image-20240430231255337-DhJ3iufS.png",p="/assets/image-20240430231335489-CSgE3-b-.png",c="/assets/image-20240430231410044-BJgeaead.png",d="/assets/image-20240430231457326-CUqMMz-U.png",g="/assets/image-20240430231619456-BFsNtzjv.png",m="/assets/image-20240430231643048-CaNjutGS.png",h="/assets/image-20240430231812710-Cx3oEBia.png",u="/assets/image-20240430231913876-B5Y992Ut.png",f="/assets/image-20240430232123478-Dqb7t1Fc.png",b="/assets/image-20240430232214779-idJibhVR.png",y="/assets/image-20240430232321649-CDA8Q3ZG.png",_="/assets/image-20240430232416476-CeXRsNHW.png",v="/assets/image-20240430232831867-mrMKei5T.png",k="/assets/image-20240430233308425-DuyWeqNp.png",D="/assets/image-20240430234152727-Bw2uwfR4.png",x="/assets/image-20240430234358979-DTkZJRkp.png",w="/assets/image-20240430234650896-By8i4hzO.png",E="/assets/image-20240430234846241-QnZFrrbH.png",z="/assets/image-20240430234913810-ENXp_6mg.png",R="/assets/image-20240430235056534-DIyGdHoq.png",S="/assets/image-20240430235935824-CMm7O4bE.png",q="/assets/image-20240501000124973-jdqMCzBy.png",C="/assets/image-20240501000326614-DsJp3Cvr.png",M="/assets/image-20240501000504149-DDrVY-b2.png",B="/assets/image-20240501000531938-Dlguqm2Q.png",A={};function T(N,e){return n(),t("div",null,e[0]||(e[0]=[i('<h2 id="_1-overview-database-dbms" tabindex="-1"><a class="header-anchor" href="#_1-overview-database-dbms"><span>1. Overview：Database &amp; DBMS</span></a></h2><p>−a collection of related data (i.e. facts and figures) that can be processed to produce information.</p><p>相关数据（即事实和数字）的集合，可通过处理产生信息。</p><ul><li><p>Example: the average marks can be produced from data about marks of all students</p><p>例如：平均分可以从所有学生的分数数据中得出</p></li></ul><p>−A database management system (DBMS) stores data which can be retrieved, manipulated to produce information.</p><p>数据库管理系统（DBMS）存储的数据可用于检索和操作，以生成信息。</p><blockquote><p>database首先存储数据，再由Database management system来操作数据。</p></blockquote><h2 id="_2-dbms-database-management-system" tabindex="-1"><a class="header-anchor" href="#_2-dbms-database-management-system"><span>2. DBMS -&gt;database management system</span></a></h2><h3 id="_2-1-types" tabindex="-1"><a class="header-anchor" href="#_2-1-types"><span>2.1 Types：</span></a></h3><p>−Relational DBMS: holds tables of data</p><p>−Object DBMS: holds objects (containing attributes)</p><p>−Object-Relational DBMS: combines relational databases (simplicity and efficiency) and ability of object databases to store complex objects</p><p>−NoSQL: (Not Only SQL) non-relational, distributed, open source and horizontally scalable with characteristics such as: schema-free, easy replication support, simple API, eventually consistent, capable of storing a huge amount of data etc.</p><p>-Relational DBMS：保存数据表</p><p>-Object DBMS：保存对象（包含属性）</p><p>-Object-Relational DBMS：结合了关系数据库（简单高效）和对象数据库存储复杂对象的能力</p><p>-NoSQL：（不仅是 SQL）非关系型、分布式、开源、可水平扩展，具有无模式、易于支持复制、API 简单、最终一致、可存储海量数据等特点。</p><h3 id="_2-2-relational-dbms" tabindex="-1"><a class="header-anchor" href="#_2-2-relational-dbms"><span>2.2 Relational DBMS</span></a></h3><p>uses the relational data model for data storage and processing. Data is stored in tables called relations, e.g. the Student table. Relations can be normalized. Each row in a relation contains a unique value, e.g. SID Each column in a relation contains values from a same domain, e.g. student id, name.</p><p>该系统使用关系数据模型进行数据存储和处理。数据存储在称为关系的表中，例如学生表。关系可以规范化。关系中的每一行都包含一个唯一值，如 SID 关系中的每一列都包含同一域中的值，如学生 ID、姓名。</p><h4 id="_2-2-1-concepts" tabindex="-1"><a class="header-anchor" href="#_2-2-1-concepts"><span>2.2.1 Concepts</span></a></h4><p>−Relation: also known as a table or file.</p><p>−Tables: in a relation database, relations are saved in the format of tables. A table has rows and columns, where rows represents records and columns represent the attributes.</p><p>−Tuple:A single row of a table, which contains a single record for that relation.</p><p>−Domain: a set of acceptable values that a column is allowed to contain, based on various properties and the data type for the column. 应该是每个属性值的范围？</p><p>−Degree (of a relation): is the number of attributes in a table.</p><p>−structured query language (SQL) is used as the standard database access language</p><figure><img src="'+s+'" alt="image-20240430225102059" tabindex="0" loading="lazy"><figcaption>image-20240430225102059</figcaption></figure><h3 id="_2-3-acid-properties" tabindex="-1"><a class="header-anchor" href="#_2-3-acid-properties"><span>2.3 ACID Properties</span></a></h3><figure><img src="'+o+'" alt="image-20240430225352145" tabindex="0" loading="lazy"><figcaption>image-20240430225352145</figcaption></figure><ol><li><p>Atomicity: this ensures either all of the transaction succeeds or none of it does. No part of it should succeed only. If one part of the transaction fails, the whole transaction fails.</p></li><li><p>Consistency: this ensures that all data will be consistent according to all defined rules, including constraints applied on the database.</p></li><li><p>Isolation: this ensures that all transactions will occur in isolation with no transaction to be affected by any other transaction. For example, a transaction cannot read data from any other transaction that has not yet completed.</p></li><li><p>Durability: this ensures that once a transaction is committed, it will remain in the system. Any changes from the transaction must be stored permanently.</p></li></ol><blockquote><p>原子性：部分出错，整体都不能运行</p></blockquote><blockquote><p>一致性：一样的数据在系统内保持一致</p></blockquote><blockquote><p>隔离性：数据不受其他数据的影响</p></blockquote><blockquote><p>持久性：这确保了事务一旦提交，就会保留在系统中。 事务的任何更改都必须永久保存。</p></blockquote><h2 id="_3-entity-relationship-model-er" tabindex="-1"><a class="header-anchor" href="#_3-entity-relationship-model-er"><span>3. Entity Relationship Model (ER)</span></a></h2><p>also called an ER schema.</p><h3 id="_3-1-concepts" tabindex="-1"><a class="header-anchor" href="#_3-1-concepts"><span>3.1 Concepts</span></a></h3><ol><li><p>Entities: hold specific information (data). An entity can be a real-world object, e.g. student, course, tutor</p></li><li><p>Attributes: represents the properties(属性) of an entity. Each attribute has a value, e.g., a student entity may have a name as an attribute with a value, John.</p></li><li><p>Relationship: refers to the association or interactions among entities, e.g. a student enrolls on a course, enrolls is the relationship between a student and a course</p></li><li><p>Cardinality(基数): defines the number of entities, which can be associated with the number of other entities via a relationship as below: One-to-one One-to-many Many-to-one Many-to-many</p></li><li><p>Degree of Relationship: the number of participating entities in a relationship</p><p>Unary (= degree 1): a relationship exists between occurrences of the same entity set, representing two entities withdifferent roles with the same primary and foreign keys</p><p>同一实体集的出现之间存在关系，代表具有相同主键和外键的两个实体的不同角色</p><p>Binary (= degree 2): a relationship type that involves between two tables</p><p>Ternary (= degree 3): a relationship type that involves <strong>many to many relationships between three tables</strong></p><p> n-ary = degree n</p></li></ol><blockquote><p>区别cardinality和degree of relationship:</p><p>前者是指两个实体交互时，这两个实体中的对象的数量；</p><p>后者是指有几个实体参与了交互。</p></blockquote><h3 id="_3-2-notation-−chen-s-notation-符号" tabindex="-1"><a class="header-anchor" href="#_3-2-notation-−chen-s-notation-符号"><span>3.2 Notation-&gt;<strong>−Chen’s notation</strong> （符号）</span></a></h3><p><strong>−Crow’s Foot notation</strong></p><p><strong>−Chen’s notation</strong></p><p>​ Note: This module will introduce <strong>Chen’s notation.</strong></p><img src="'+l+'" alt="Crow&#39;s Foot Erd Examples | ERModelExample.com" style="zoom:50%;"><h4 id="_3-2-1-entity" tabindex="-1"><a class="header-anchor" href="#_3-2-1-entity"><span>3.2.1 Entity</span></a></h4><figure><img src="'+r+'" alt="image-20240430231255337" tabindex="0" loading="lazy"><figcaption>image-20240430231255337</figcaption></figure><ol><li><p>Entity:</p><figure><img src="'+p+'" alt="image-20240430231335489" tabindex="0" loading="lazy"><figcaption>image-20240430231335489</figcaption></figure></li><li><p>Weak Entity: an entity’s existence depends on the existence of other entity type.</p><figure><img src="'+c+'" alt="image-20240430231410044" tabindex="0" loading="lazy"><figcaption>image-20240430231410044</figcaption></figure></li><li><p>Associative entity – used to create <strong>many-to-many</strong> relationship between different entities.</p></li></ol><figure><img src="'+d+'" alt="image-20240430231457326" tabindex="0" loading="lazy"><figcaption>image-20240430231457326</figcaption></figure><h4 id="_3-2-2-attribute" tabindex="-1"><a class="header-anchor" href="#_3-2-2-attribute"><span>3.2.2 Attribute</span></a></h4><figure><img src="'+g+'" alt="image-20240430231619456" tabindex="0" loading="lazy"><figcaption>image-20240430231619456</figcaption></figure><figure><img src="'+m+'" alt="image-20240430231643048" tabindex="0" loading="lazy"><figcaption>image-20240430231643048</figcaption></figure><ol><li>attribute</li></ol><figure><img src="'+h+'" alt="image-20240430231812710" tabindex="0" loading="lazy"><figcaption>image-20240430231812710</figcaption></figure><ol start="2"><li>Composite attribute 复合属性: 属性可以进一步被细分为更多属性。</li></ol><figure><img src="'+u+'" alt="image-20240430231913876" tabindex="0" loading="lazy"><figcaption>image-20240430231913876</figcaption></figure><ol start="3"><li><p>foreign key 就是别的实体中拿过来给这个实体的属性。</p><img src="'+f+'" alt="image-20240430232123478" style="zoom:50%;"></li><li><p>Key attribute: used for the primary key that is underlined, e.g. EID 就是有下划线的属性</p></li></ol><img src="'+b+'" alt="image-20240430232214779" style="zoom:80%;"><ol start="5"><li>Derived attribute: calculated from other attributes, indicated as dashed outline, e.g. Age calculated from Birthdate</li></ol><p>可以从别的属性中计算而来的属性。</p><figure><img src="'+y+'" alt="image-20240430232321649" tabindex="0" loading="lazy"><figcaption>image-20240430232321649</figcaption></figure><ol start="6"><li>Multi-valued attributes: attributes that have a set of values for each entity. <ul><li>Example: the degrees of an employee, which may include BSc, MSc etc.</li></ul></li></ol><figure><img src="'+_+'" alt="image-20240430232416476" tabindex="0" loading="lazy"><figcaption>image-20240430232416476</figcaption></figure><p>一个属性里有很多值，比如雇员的学位，包括理学士、硕士等。</p><h4 id="_3-2-3-relation" tabindex="-1"><a class="header-anchor" href="#_3-2-3-relation"><span>3.2.3 Relation</span></a></h4><figure><img src="'+v+'" alt="image-20240430232831867" tabindex="0" loading="lazy"><figcaption>image-20240430232831867</figcaption></figure><blockquote><p>这里是说，weak relationship连接的两个实体，有一方是不能独立于另一方存在的。比如下图交易就不能独立于ATM存在。</p><p>而strong relation连接的两个实体，两方都是独立的个体。</p></blockquote><figure><img src="'+k+'" alt="image-20240430233308425" tabindex="0" loading="lazy"><figcaption>image-20240430233308425</figcaption></figure><h4 id="_3-2-4-degree-of-relationship" tabindex="-1"><a class="header-anchor" href="#_3-2-4-degree-of-relationship"><span>3.2.4 Degree of relationship</span></a></h4><ol><li></li></ol><figure><img src="'+D+'" alt="image-20240430234152727" tabindex="0" loading="lazy"><figcaption>image-20240430234152727</figcaption></figure><blockquote><p>一元关系：一个实体和它的特殊类型（<strong>子类</strong>）直接的关系，如上图的雇员里有监管层，雇员里也有监管和被监管的关系。</p></blockquote><ol start="2"><li></li></ol><figure><img src="'+x+'" alt="image-20240430234358979" tabindex="0" loading="lazy"><figcaption>image-20240430234358979</figcaption></figure><blockquote><p>二元关系是一对多的关系哦。</p></blockquote><ol start="3"><li></li></ol><figure><img src="'+w+'" alt="image-20240430234650896" tabindex="0" loading="lazy"><figcaption>image-20240430234650896</figcaption></figure><blockquote><p>三元关系是多对多。</p></blockquote><h4 id="_3-2-5-cardinality" tabindex="-1"><a class="header-anchor" href="#_3-2-5-cardinality"><span>3.2 5 Cardinality</span></a></h4><figure><img src="'+E+'" alt="image-20240430234846241" tabindex="0" loading="lazy"><figcaption>image-20240430234846241</figcaption></figure><figure><img src="'+z+'" alt="image-20240430234913810" tabindex="0" loading="lazy"><figcaption>image-20240430234913810</figcaption></figure><h4 id="_3-2-6-participation" tabindex="-1"><a class="header-anchor" href="#_3-2-6-participation"><span>3.2.6 Participation</span></a></h4><p>−Total participation: every entity in the set is involved in the relationship, e.g., each student must be guided by a professor (no students who are not guided by any professor). This is represented by a double line.</p><p>− Partial participation: not all entities in the set are involved in the relationship, e.g., not every professor guides a student. This is represented by a single line.</p><p>完全参与：集合中的每个实体都参与到关系中，例如，每个学生都必须接受一名教授 的指导（没有不受任何教授指导的学生）。用双线表示。</p><p>部分参与：并非集合中的所有实体都参与到关系中，例如，并非每个教授都指导学生。用单线表示。</p><img src="'+R+'" alt="image-20240430235056534" style="zoom:50%;"><h2 id="_4-entity-relationship-diagram-erd" tabindex="-1"><a class="header-anchor" href="#_4-entity-relationship-diagram-erd"><span>4. Entity Relationship Diagram（ERD）</span></a></h2><p>for modeling data in a domain in three ways, including: conceptual, logical and physical ERD.</p><p>用于以概念、逻辑和物理 ERD 三种方式对域中的数据建模。</p><ul><li>conceptual and logical ERD used by business analyst to model the data required.</li><li>physical ERD used by database designer to refine (提炼) the design and produce the for presenting physical database structure ready for database construction.</li></ul><h3 id="_4-1-conceptual-erd" tabindex="-1"><a class="header-anchor" href="#_4-1-conceptual-erd"><span>4.1 Conceptual ERD</span></a></h3><p>models information gathered from business requirements, including entities and its relationships at high level, without about the detailed structure such as columns or data types. 从业务需求中收集的信息模型，包括高层次的实体及其关系，而不涉及列或数据类型等详细结构。created by data architect from discussion with business analysts, product owners and other take holders. 由数据架构师与业务分析师、产品负责人和其他负责人讨论后创建。</p><p>−Conceptual ERD: Example –no columns or data types for entities.</p><img src="'+S+'" alt="image-20240430235935824" style="zoom:50%;"><h3 id="_4-2-logical-erd" tabindex="-1"><a class="header-anchor" href="#_4-2-logical-erd"><span>4.2 Logical ERD</span></a></h3><p>−also models information gathered from business requirements, but more complex than conceptual model with setting of column types</p><p>−defines the detailed structure of the entities and its relationships</p><p>−forms the basis for the physical model</p><p>−the types are platform independent. For example, the actual table name and column names are not necessarily matching the entity name and attributes in the logical model.</p><p>−Types: refer to the type of data in the corresponding field in a table. They are optional (to aid business analysis only).</p><p>-也对从业务需求中收集的信息进行建模，但比概念模型更复杂，需要设置列类型</p><p>-定义实体的详细结构及其关系</p><p>-构成物理模型的基础</p><p>-类型与平台无关。例如，实际表名和列名不一定与逻辑模型中的实体名称和属性相匹配。</p><p>-类型：指表格中相应字段的数据类型。它们是可选的（仅用于辅助业务分析）。</p><img src="'+q+'" alt="image-20240501000124973" style="zoom:50%;"><h3 id="_4-3-physical-erd" tabindex="-1"><a class="header-anchor" href="#_4-3-physical-erd"><span>4.3 Physical ERD</span></a></h3><p>−visually represents the actual database schema and it is platform specific. For example, if a physical model is designed for SQL Server then it cannot be implemented into ORACLE simply because the data structures are database specific and its columns&#39; data types will work working only on the targeted DB.</p><p>−considers the convention and restriction, ensuring primary keys, foreign keys and constraints to the design</p><p>-直观地表示实际的数据库模式，并且是特定于平台的。例如，如果一个物理模型是为 SQL Server 设计的，那么它就不能在 ORACLE 中实现，原因很简单，数据结构是特定于数据库的，其列的数据类型只能在目标数据库中使用。</p><p>-考虑约定和限制，确保主键、外键和约束与设计一致</p><figure><img src="'+C+`" alt="image-20240501000326614" tabindex="0" loading="lazy"><figcaption>image-20240501000326614</figcaption></figure><h4 id="_4-3-1-key" tabindex="-1"><a class="header-anchor" href="#_4-3-1-key"><span>4.3.1 KEY</span></a></h4><p>−Keys: used to link various tables in a database</p><p>−Super keys: superset of a key, a set of one or more attributes that are taken collectively to identify all other attributes uniquely</p><p>−Composite key: is composed of two or more attributes, but it must be minimal</p><p>−Candidate key: a simple or composite key that is unique and minimal. It is minimal because every column is necessary in order to attain uniqueness.</p><p>−Primary Keys: an attribute or combination of attributes that uniquely identifies one and only one instance of an entity.</p><p>−Foreign Keys: created to enable an attribute to relate to another entity in a one-to-one or one-to-many relationship.</p><p><strong>考后回溯：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1.Composite key里的每一个子集都不是唯一的实体的标注，组合在一起也可能不是唯一的标注，就是用组合键可能会查找出来几个实体。composite key的意义就在于查找（或消除）相似的实体。</span></span>
<span class="line"><span>2.super key要识别出唯一的实体！！！但是子集可以是冗余的。</span></span>
<span class="line"><span>3.candidate key里每个子集也不能是唯一标注，不然就不是最小的super key了！但是组合在一起后查找的实体必须要有唯一性！！</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+M+'" alt="image-20240501000504149" tabindex="0" loading="lazy"><figcaption>image-20240501000504149</figcaption></figure><h4 id="_4-3-2-null" tabindex="-1"><a class="header-anchor" href="#_4-3-2-null"><span>4.3.2 Null</span></a></h4><figure><img src="'+B+'" alt="image-20240501000531938" tabindex="0" loading="lazy"><figcaption>image-20240501000531938</figcaption></figure>',125)]))}const I=a(A,[["render",T],["__file","Data_modelling.html.vue"]]),j=JSON.parse('{"path":"/zh/Software_Design/Data_modelling.html","title":"Database->Data Modelling","lang":"zh-CN","frontmatter":{"title":"Database->Data Modelling","icon":"c","date":"2024-04-30T22:30:15.000Z","author":"XiaoXianYue","isOriginal":true,"category":["Python","大二下"],"tag":["Python","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. Overview：Database & DBMS −a collection of related data (i.e. facts and figures) that can be processed to produce information. 相关数据（即事实和数字）的集合，可通过处理产生信息。 Example: the average ...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Software_Design/Data_modelling.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"Database->Data Modelling"}],["meta",{"property":"og:description","content":"1. Overview：Database & DBMS −a collection of related data (i.e. facts and figures) that can be processed to produce information. 相关数据（即事实和数字）的集合，可通过处理产生信息。 Example: the average ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T17:31:17.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-04-30T22:30:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T17:31:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Database->Data Modelling\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-30T22:30:15.000Z\\",\\"dateModified\\":\\"2024-05-08T17:31:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. Overview：Database & DBMS","slug":"_1-overview-database-dbms","link":"#_1-overview-database-dbms","children":[]},{"level":2,"title":"2. DBMS ->database management system","slug":"_2-dbms-database-management-system","link":"#_2-dbms-database-management-system","children":[{"level":3,"title":"2.1 Types：","slug":"_2-1-types","link":"#_2-1-types","children":[]},{"level":3,"title":"2.2 Relational DBMS","slug":"_2-2-relational-dbms","link":"#_2-2-relational-dbms","children":[{"level":4,"title":"2.2.1 Concepts","slug":"_2-2-1-concepts","link":"#_2-2-1-concepts","children":[]}]},{"level":3,"title":"2.3  ACID Properties","slug":"_2-3-acid-properties","link":"#_2-3-acid-properties","children":[]}]},{"level":2,"title":"3. Entity Relationship Model (ER)","slug":"_3-entity-relationship-model-er","link":"#_3-entity-relationship-model-er","children":[{"level":3,"title":"3.1 Concepts","slug":"_3-1-concepts","link":"#_3-1-concepts","children":[]},{"level":3,"title":"3.2 Notation->−Chen’s notation （符号）","slug":"_3-2-notation-−chen-s-notation-符号","link":"#_3-2-notation-−chen-s-notation-符号","children":[{"level":4,"title":"3.2.1 Entity","slug":"_3-2-1-entity","link":"#_3-2-1-entity","children":[]},{"level":4,"title":"3.2.2 Attribute","slug":"_3-2-2-attribute","link":"#_3-2-2-attribute","children":[]},{"level":4,"title":"3.2.3 Relation","slug":"_3-2-3-relation","link":"#_3-2-3-relation","children":[]},{"level":4,"title":"3.2.4 Degree of relationship","slug":"_3-2-4-degree-of-relationship","link":"#_3-2-4-degree-of-relationship","children":[]},{"level":4,"title":"3.2 5 Cardinality","slug":"_3-2-5-cardinality","link":"#_3-2-5-cardinality","children":[]},{"level":4,"title":"3.2.6  Participation","slug":"_3-2-6-participation","link":"#_3-2-6-participation","children":[]}]}]},{"level":2,"title":"4. Entity Relationship Diagram（ERD）","slug":"_4-entity-relationship-diagram-erd","link":"#_4-entity-relationship-diagram-erd","children":[{"level":3,"title":"4.1 Conceptual ERD","slug":"_4-1-conceptual-erd","link":"#_4-1-conceptual-erd","children":[]},{"level":3,"title":"4.2 Logical ERD","slug":"_4-2-logical-erd","link":"#_4-2-logical-erd","children":[]},{"level":3,"title":"4.3 Physical ERD","slug":"_4-3-physical-erd","link":"#_4-3-physical-erd","children":[{"level":4,"title":"4.3.1 KEY","slug":"_4-3-1-key","link":"#_4-3-1-key","children":[]},{"level":4,"title":"4.3.2 Null","slug":"_4-3-2-null","link":"#_4-3-2-null","children":[]}]}]}],"git":{"createdTime":1714493169000,"updatedTime":1715189477000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":5}]},"readingTime":{"minutes":8.58,"words":2575},"filePathRelative":"zh/Software_Design/Data_modelling.md","localizedDate":"2024年4月30日","excerpt":"<h2>1. Overview：Database &amp; DBMS</h2>\\n<p>−a collection of related data (i.e. facts and figures) that  can be processed to produce information.</p>\\n<p>相关数据（即事实和数字）的集合，可通过处理产生信息。</p>\\n<ul>\\n<li>\\n<p>Example: the average marks can be produced from  data about marks of all students</p>\\n<p>例如：平均分可以从所有学生的分数数据中得出</p>\\n</li>\\n</ul>","autoDesc":true}');export{I as comp,j as data};

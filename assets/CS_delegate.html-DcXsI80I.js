import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,b as s}from"./app-CdaYlwL3.js";const t={},l=s(`<p>你好，我是悦创。</p><p>在 C# 中，**委托（Delegate）<strong>和</strong>事件（Event）**是两个密切相关的概念。它们通常用于实现事件驱动编程。以下是它们的定义和区别：</p><h2 id="_1-委托" tabindex="-1"><a class="header-anchor" href="#_1-委托"><span>1. 委托</span></a></h2><p>委托是一个数据结构，它定义了一种类型，可以存储一个或多个方法的引用。委托类似于 C++ 中的函数指针，但更安全。它允许你将方法作为参数传递，并且可以动态调用这些方法。使用委托的主要步骤如下：</p><ol><li><p>定义委托类型：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建委托实例：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">MyDelegate</span> del <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDelegate</span><span class="token punctuation">(</span>SomeMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调用委托：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_2-事件" tabindex="-1"><a class="header-anchor" href="#_2-事件"><span>2. 事件</span></a></h2><p>事件是基于委托的更高级别的抽象。它用于在一个对象中发布消息，而另一个对象中订阅该消息。当事件被触发时，所有订阅者都会被通知。事件通常有三个主要组成部分：</p><ol><li><p>**事件声明：**通常以 <code>event</code> 关键字和委托类型声明一个事件。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">MyDelegate</span> MyEvent<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>**事件订阅：**订阅事件以添加一个或多个事件处理程序。事件处理程序是与事件关联的方法，当事件发生时，这些方法会被调用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>myObject<span class="token punctuation">.</span>MyEvent <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyDelegate</span><span class="token punctuation">(</span>EventHandlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>**触发事件：**通过调用事件，触发所有已订阅的处理程序。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>MyEvent<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token string">&quot;Event triggered!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="_3-区别" tabindex="-1"><a class="header-anchor" href="#_3-区别"><span>3. 区别</span></a></h2><ul><li>**语法和使用：**委托可以直接被实例化和调用，而事件通常在类中声明，并且只能在类的内部进行触发。</li><li>**访问权限：**委托可以被任何人调用，但事件只能在它们所声明的类中被触发。</li><li>**目的：**委托通常用于传递函数引用或作为回调，而事件用于在对象之间进行异步通知。</li></ul><p>通过了解委托和事件，你可以在 C# 中实现灵活的事件驱动编程模式。</p><p>在 C# 中，委托和事件是非常重要的功能，它们在应用程序开发中扮演着关键角色。下面是它们的主要作用：</p><h3 id="委托的作用" tabindex="-1"><a class="header-anchor" href="#委托的作用"><span>委托的作用</span></a></h3><ol><li>**方法引用：**委托允许将方法作为参数传递给其他方法。通过使用委托，你可以将不同的方法绑定到同一委托变量中，使它们可以被动态调用。</li><li>**回调机制：**在异步编程中，委托经常用于定义回调函数。一个方法可以在执行结束后通过委托调用另一个方法，实现异步编程。</li><li>**可插拔性：**委托使代码更加灵活和模块化。通过允许外部设置方法，委托使得组件之间的耦合度降低。</li><li>**多播能力：**委托允许将多个方法绑定到一个委托实例中，以实现多播。当调用多播委托时，会依次调用所有绑定的方法。</li></ol><h3 id="事件的作用" tabindex="-1"><a class="header-anchor" href="#事件的作用"><span>事件的作用</span></a></h3><ol><li>**事件驱动编程：**事件是实现事件驱动编程的重要机制。它使得对象之间可以在某个事件发生时进行通信。通过事件，组件之间可以发布和订阅事件，实现松耦合。</li><li>**封装逻辑：**事件将发布和订阅逻辑封装在一起，使得订阅者只需关注事件的结果，而不必关心事件的触发细节。</li><li>**通知机制：**事件提供了一种标准化的方式，将状态变化通知给多个订阅者。当某个事件触发时，所有订阅者都会收到通知。</li><li>**降低耦合：**事件提供了发布者和订阅者之间的松散耦合。这使得代码更加模块化，便于维护和扩展。</li></ol><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><ol><li>**触发权限：**委托可以由任何代码调用，而事件只能由它们的声明者触发。</li><li>**使用目的：**委托主要用于传递方法引用和实现回调，而事件用于实现事件驱动的通知机制。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>委托和事件在 C# 中用于实现灵活的事件驱动编程模式。它们在异步编程、组件之间的通信、通知机制等方面具有重要作用。</p>`,20),p=[l];function c(i,o){return e(),n("div",null,p)}const u=a(t,[["render",c],["__file","CS_delegate.html.vue"]]),h=JSON.parse(`{"path":"/zh/CS/CS_delegate.html","title":"C#->委托和事件","lang":"zh-CN","frontmatter":{"title":"C#->委托和事件","icon":"c","date":"2024-04-29T09:05:26.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"你好，我是悦创。 在 C# 中，**委托（Delegate）和事件（Event）**是两个密切相关的概念。它们通常用于实现事件驱动编程。以下是它们的定义和区别： 1. 委托 委托是一个数据结构，它定义了一种类型，可以存储一个或多个方法的引用。委托类似于 C++ 中的函数指针，但更安全。它允许你将方法作为参数传递，并且可以动态调用这些方法。使用委托的主要...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/CS/CS_delegate.html"}],["meta",{"property":"og:site_name","content":"an istj's zone"}],["meta",{"property":"og:title","content":"C#->委托和事件"}],["meta",{"property":"og:description","content":"你好，我是悦创。 在 C# 中，**委托（Delegate）和事件（Event）**是两个密切相关的概念。它们通常用于实现事件驱动编程。以下是它们的定义和区别： 1. 委托 委托是一个数据结构，它定义了一种类型，可以存储一个或多个方法的引用。委托类似于 C++ 中的函数指针，但更安全。它允许你将方法作为参数传递，并且可以动态调用这些方法。使用委托的主要..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-08T07:50:19.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-04-29T09:05:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-08T07:50:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#->委托和事件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-29T09:05:26.000Z\\",\\"dateModified\\":\\"2024-05-08T07:50:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. 委托","slug":"_1-委托","link":"#_1-委托","children":[]},{"level":2,"title":"2. 事件","slug":"_2-事件","link":"#_2-事件","children":[]},{"level":2,"title":"3. 区别","slug":"_3-区别","link":"#_3-区别","children":[{"level":3,"title":"委托的作用","slug":"委托的作用","link":"#委托的作用","children":[]},{"level":3,"title":"事件的作用","slug":"事件的作用","link":"#事件的作用","children":[]},{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1715099956000,"updatedTime":1715154619000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":2}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"zh/CS/CS_delegate.md","localizedDate":"2024年4月29日","excerpt":"<p>你好，我是悦创。</p>\\n<p>在 C# 中，**委托（Delegate）<strong>和</strong>事件（Event）**是两个密切相关的概念。它们通常用于实现事件驱动编程。以下是它们的定义和区别：</p>\\n<h2>1. 委托</h2>\\n<p>委托是一个数据结构，它定义了一种类型，可以存储一个或多个方法的引用。委托类似于 C++ 中的函数指针，但更安全。它允许你将方法作为参数传递，并且可以动态调用这些方法。使用委托的主要步骤如下：</p>\\n<ol>\\n<li>\\n<p>定义委托类型：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">delegate</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">MyDelegate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> message<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>创建委托实例：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\">MyDelegate</span> del <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">MyDelegate</span><span class=\\"token punctuation\\">(</span>SomeMethod<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n<li>\\n<p>调用委托：</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token function\\">del</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello, World!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n</ol>","autoDesc":true}`);export{u as comp,h as data};

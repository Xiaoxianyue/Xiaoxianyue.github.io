import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,b as o}from"./app-Mk3ClvjK.js";const i="/assets/image-20240501175031951-CjxOBZKW.png",s="/assets/image-20240501175541597-748nwSj9.png",n="/assets/image-20240501175711909-BjNIlqVd.png",r="/assets/image-20240501184622729-yL2dCZ0Z.png",p="/assets/image-20240501184811149-Bby88Gp1.png",l="/assets/image-20240501184847920-CDk6foph.png",c="/assets/image-20240501185032988-L4TmqQWN.png",d="/assets/image-20240501201628378-BDH_P6mj.png",h={},m=o('<h2 id="_1-the-beginning-of-software-development" tabindex="-1"><a class="header-anchor" href="#_1-the-beginning-of-software-development"><span>1. The Beginning of Software Development</span></a></h2><h3 id="_1-1-bad-practices" tabindex="-1"><a class="header-anchor" href="#_1-1-bad-practices"><span>1.1 Bad Practices</span></a></h3><p>• Presence of typos in the code 错字</p><p>• No proper structure and formatting of the code 没有正确的代码结构和格式</p><p>• No use of comments in the code 注释</p><p>• No accurate declaration of values 对值的声明要准确</p><p>• Use of magic numbers 魔术数字不能用</p><p>• Logic errors in the code 逻辑错误</p><p>• Complex and lengthy code 冗余复杂的代码</p><p>• Non-modular code 代码没有模块化</p><h3 id="_1-2-key-development-practices" tabindex="-1"><a class="header-anchor" href="#_1-2-key-development-practices"><span>1.2 key DEVELOPMENT practices</span></a></h3><p>• Validation of input</p><p>• Error Handling and Logging</p><p>• Database security</p><p>• Memory management</p><p>• Data protection</p><p>• Types verification</p><h3 id="_1-3-life-cycle" tabindex="-1"><a class="header-anchor" href="#_1-3-life-cycle"><span>1.3 Life Cycle</span></a></h3><p>• Planning: Provides a project management plan that works as the basis for acquiring the resources needed to develop the considered system. 获取并规整资源</p><p>• Requirements/Analysis: Specifies user requirements describing the detailed functioning of the intended system. 了解用户对于软件的功能需求。</p><p>• Design: System features and operations are described in detail(i.e. system requirements) through the use of prototype models like process diagrams,pseudo codes,etc. 通过使用流程图、伪代码等原型模型，详细描述系统功能和操作（即系统需求）。</p><p>• Development: the system is constructed involving the actual programming process. 写代码</p><p>• Testing: Demonstrates that the system conforms to requirements by applying testing techniques.</p><p>• Maintenance: the system is assessed/evaluated to ensure it does not become obsolete. This is also where changes are made to initial system functioning. 确保系统功能不过时。也包括维护和检修？</p><h3 id="_1-4-一些其他software-design-approach" tabindex="-1"><a class="header-anchor" href="#_1-4-一些其他software-design-approach"><span>1.4 一些其他software design Approach</span></a></h3><h4 id="_1-4-1-waterfall" tabindex="-1"><a class="header-anchor" href="#_1-4-1-waterfall"><span>1.4.1 Waterfall</span></a></h4><figure><img src="'+i+'" alt="image-20240501175031951" tabindex="0" loading="lazy"><figcaption>image-20240501175031951</figcaption></figure><p>Problems associated with Waterfall model:</p><p>−Allows a sequential flow of activities from completion of a phase to the next</p><p>−Unable to accommodate the nature of uncertainty of project’s requirements. It is difficult for customers to identify detailed criteria at the beginning of the project. Revision of requirements is difficult.</p><p>−Software development can be a long process which does not produce a working version of the system until late in the process.</p><p>−product usually is not available for customer’s feedback until the end of the development, thus high risk</p><p>瀑布模型的相关问题：</p><p>-允许从一个阶段完成到下一个阶段的活动顺序流</p><p>-无法适应项目要求的不确定性。客户很难在项目开始时确定详细的标准。需求修订困难。</p><p>-软件开发可能是一个漫长的过程，直到后期才会产生系统的工作版本。</p><p>-产品通常要到开发后期才能得到客户的反馈，因此风险很高。</p><h4 id="_1-4-2-iterative-approach" tabindex="-1"><a class="header-anchor" href="#_1-4-2-iterative-approach"><span>1.4.2 Iterative Approach</span></a></h4><figure><img src="'+s+'" alt="image-20240501175541597" tabindex="0" loading="lazy"><figcaption>image-20240501175541597</figcaption></figure><h4 id="_1-4-3-v-model-approach" tabindex="-1"><a class="header-anchor" href="#_1-4-3-v-model-approach"><span>1.4.3 V-model Approach</span></a></h4><figure><img src="'+n+'" alt="image-20240501175711909" tabindex="0" loading="lazy"><figcaption>image-20240501175711909</figcaption></figure><h2 id="_2-agile" tabindex="-1"><a class="header-anchor" href="#_2-agile"><span>2. Agile</span></a></h2><h3 id="_2-1-some-of-the-features" tabindex="-1"><a class="header-anchor" href="#_2-1-some-of-the-features"><span>2.1 some of the features</span></a></h3><p> Proposes incremental and iterative approach to software design</p><p> Gives less priority on documentation than software development</p><p> Allows self-organizing teams to respond to change</p><p> Enables errors to be fixed in the middle of the project.</p><p> Enables the customer to have early and frequent opportunities to give feedback on the product and make decision and changes to the project</p><p> Requires close communication with developers and together analyse requirements and planning</p><p> Delivers shippable features of the product to the customer at the end of an iteration.</p><p> Implements small projects very quickly</p><p> Allows iterative development process to execute a project in short (2-4) weeks iterations.</p><p> Allows implementing regression testing every time new functions or logic are released in each iteration.</p><p>核心特点：</p><p> 提出软件设计的增量和迭代方法</p><p> 对文档的重视程度低于软件开发</p><p>团队应对需求变化简单：</p><p> 允许自组织团队应对变化</p><p> 可在项目中期修复错误</p><p>客户（提出的需求实现）：</p><p> 让客户有机会尽早、频繁地对产品提出反馈意见，并对项目做出决策和修改</p><p> 需要与开发人员密切沟通，共同分析需求和规划</p><p> 在迭代结束时向客户交付可交付的产品功能。</p><p>实施项目快速：</p><p> 快速实施小型项目</p><p> 允许迭代开发流程在短期内（2-4 周）迭代执行项目。</p><p>测试性：</p><p> 允许在每次迭代中发布新功能或逻辑时实施回归测试。</p><h3 id="_2-2-scrum" tabindex="-1"><a class="header-anchor" href="#_2-2-scrum"><span>2.2 Scrum</span></a></h3><h4 id="_2-2-1-roles" tabindex="-1"><a class="header-anchor" href="#_2-2-1-roles"><span>2.2.1 Roles</span></a></h4><p><strong>• product owner</strong>:</p><p>✓ knows what the customer wants and can then translate the customer&#39;s needs back to the Scrum team</p><p>与客户沟通需求。</p><p>✓ must have the authority to make all decisions necessary to complete the project</p><p>有权作出完成项目所需的所有决定</p><p>✓ is responsible for identifying product features, translating them into a prioritised list (i.e. Product Backlog), prioritising the list for the next Sprint (i.e. Sprint Backlog), and continually re-prioritising and refining the list</p><p>负责确定产品功能，将其转化为优先级列表（即 Product Backlog），为下一个 Sprint 确定列表的优先级（即 Sprint Backlog），并不断重新确定和完善列表的优先级</p><p>✓ works with customers and stakeholders as well as working with the Team implementing the Product Backlog.</p><p>与用户和股东和开发人员协商</p><p><strong>• scrum master</strong>: A person who works closely with the team, sometimes as a member: e.g.</p><p>✓ to guide the team in Scrum practices</p><p>✓ to ensure the team understands and adhere to best Scrum practices</p><p>✓ to facilitate the Scrum ceremonies</p><p>✓ to coach the team to self-organise and self-manage</p><p>✓ to make sure the team is cross-functional</p><p>✓ to keep the team focused on a transcendent goal</p><p>✓ to assist the Product Owner to refine a ready backlog</p><p>✓ to keep team in high morale</p><p><strong>• development team</strong>: a team of software developers plus, other scrum roles, stakeholders and users of software products</p><h4 id="_2-2-2-scrum-events" tabindex="-1"><a class="header-anchor" href="#_2-2-2-scrum-events"><span>2.2.2 Scrum events:</span></a></h4><p>• Sprint planning meeting • Daily scrum meeting • Sprint review meeting • Sprint retrospect meeting</p><h4 id="_2-2-3-artifacts" tabindex="-1"><a class="header-anchor" href="#_2-2-3-artifacts"><span>2.2.3 Artifacts:</span></a></h4><p>• Product backlog • Sprint backlog • Increment (i.e., working features)</p><img src="'+r+'" alt="image-20240501184622729" style="zoom:67%;"><figure><img src="'+p+'" alt="image-20240501184811149" tabindex="0" loading="lazy"><figcaption>image-20240501184811149</figcaption></figure><img src="'+l+'" alt="image-20240501184847920" style="zoom:67%;"><img src="'+c+'" alt="image-20240501185032988" style="zoom:67%;"><h3 id="_2-3-kanban" tabindex="-1"><a class="header-anchor" href="#_2-3-kanban"><span>2.3 Kanban</span></a></h3><p>−define and visualize policies (process rules or guidelines) explicit and visualises the flow of work on a Kanban board that contains the process steps to deliver work</p><p>可视化的工作流程，包含交付工作的流程。</p><p>−Applies Limiting <strong>work-in-progress (WIP)</strong>, which to ensure the work currently in progress to be completed before taking up new work</p><p>在完成当前工作前不可以进行新工作</p><p>−continuous development and delivery, tackling a small number of tasks concurrently -持续开发和交付，同时处理少量任务</p><p>−Suitable for the software team with a continuous stream of work requests -适用于工作请求源源不断的软件团队</p><h3 id="_2-4-extreme-programming-xp" tabindex="-1"><a class="header-anchor" href="#_2-4-extreme-programming-xp"><span>2.4 Extreme programming (XP)</span></a></h3><ol><li><strong>−Pair-wise programming:</strong> demands that each and every line of code is developed by a pair of programmers. The work in these pairs involves a division of labour in which one person is actively involved in the actual generation of code, while the other takes a supporting and reviewing role.</li></ol><p>分工合作工作，一个写代码，一个辅助加审查。</p><ol start="2"><li>−Relies on <strong>constant code improvement</strong>, <strong>user involvement in the development team</strong> and <strong>pair wise programming.</strong></li></ol><p>“三大特色”</p><ol start="3"><li><strong>Feature：</strong></li></ol><p>−Supports change through small, frequent system releases</p><p>−full-time customer engagement with the team. 用户全程参与</p><p>−maintaining simplicity through constant refactoring of code 不断重构代码</p><p>−emphasizes final product</p><p>−test based approach to requirements and quality</p><p>−lightweight methods suit small-medium size projects 适合小型企业</p><h3 id="_2-5-test-driven-development-tdd" tabindex="-1"><a class="header-anchor" href="#_2-5-test-driven-development-tdd"><span>2.5 Test Driven Development (TDD):</span></a></h3><p><strong>a specific engineering practice from XP</strong></p><ol><li>Life Cycle：</li></ol><ul><li>Write the test for a new feature (function or requirement through user stories)</li><li>Run the test and see if the new test fails</li><li>Write the code that pass the test that fails</li><li>Refactor code: improve code</li><li>Repeat the above process</li></ul><ol start="2"><li><p>TDD vs. Agile:</p><p>TDD and agile both adopt an interactive and incremental process </p><p>Differences:</p><p>​ -TDD focuses on how code is written and tested, whereas agile focuses on the overall development process</p><p>​ -TDD focuses on how code is written and tested by a given developer, whereas agile focuses on groups of developers</p></li></ol><h3 id="_2-6-kanban-board" tabindex="-1"><a class="header-anchor" href="#_2-6-kanban-board"><span>2.6 Kanban Board</span></a></h3><p><strong>concepts: consisting of notes for tasks on the physical or electronic board as follows</strong>:</p><p>就是说像Kanban Approach一样把工作写在人人可见的看板上</p><p>e.g. −To Do: lists the tasks that are not yet started. (i.e., backlog) −Doing: the tasks that are in progress −Done: the tasks that are completed</p><figure><img src="'+d+'" alt="image-20240501201628378" tabindex="0" loading="lazy"><figcaption>image-20240501201628378</figcaption></figure><ul><li>Scrum Board: Many Scrum teams also adopt select principles of Kanbanas a visual process tool</li></ul><p>​ −To track work in Sprints (i.e., short, consistent and repetitive periods of time). A set of tasks need to be completed in each sprint in which no new activities are allowed to be added)</p><h2 id="_3-user-story" tabindex="-1"><a class="header-anchor" href="#_3-user-story"><span>3. User Story</span></a></h2><ol><li><strong>as a &lt; Type of user &gt;, I want to &lt; perform some Tasks &gt;, so that &lt; achieve some goal &gt;</strong></li></ol><p>​ Examples :</p><p>​ As an administrator I want to be able to create a new user to the team when needed. As a user I want the ability to restore my password.</p><p>​ As a cashier I want to see total amount in cash register displayed.</p><p>​ As a credit card user I want to be warned if spent more than a set amount.</p><p>​ As a ticket booker I want to be notified as soon as a ticket gets available on a full flight.</p><ol start="2"><li><p>User Story: As a University student, I want to see my modules for a semester, so that I know what to study.</p><p>• Acceptance Criteria: e.g.  The modules for each semester is displayed. A different semester can be selected.  The module are not displayed if the student fails to login.</p></li></ol>',136),g=[m];function u(f,v){return a(),t("div",null,g)}const b=e(h,[["render",u],["__file","Agile_01.html.vue"]]),w=JSON.parse('{"path":"/zh/Software_Design/Agile_01.html","title":"Agile 01","lang":"zh-CN","frontmatter":{"title":"Agile 01","icon":"c","date":"2024-05-01T15:14:52.000Z","author":"XiaoXianYue","isOriginal":true,"category":["Python","大二下"],"tag":["Python","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. The Beginning of Software Development 1.1 Bad Practices • Presence of typos in the code 错字 • No proper structure and formatting of the code 没有正确的代码结构和格式 • No use of comments ...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Software_Design/Agile_01.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"Agile 01"}],["meta",{"property":"og:description","content":"1. The Beginning of Software Development 1.1 Bad Practices • Presence of typos in the code 错字 • No proper structure and formatting of the code 没有正确的代码结构和格式 • No use of comments ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-09T08:33:10.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-01T15:14:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-09T08:33:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Agile 01\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-01T15:14:52.000Z\\",\\"dateModified\\":\\"2024-05-09T08:33:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. The Beginning of Software Development","slug":"_1-the-beginning-of-software-development","link":"#_1-the-beginning-of-software-development","children":[{"level":3,"title":"1.1 Bad Practices","slug":"_1-1-bad-practices","link":"#_1-1-bad-practices","children":[]},{"level":3,"title":"1.2  key DEVELOPMENT practices","slug":"_1-2-key-development-practices","link":"#_1-2-key-development-practices","children":[]},{"level":3,"title":"1.3  Life Cycle","slug":"_1-3-life-cycle","link":"#_1-3-life-cycle","children":[]},{"level":3,"title":"1.4 一些其他software design Approach","slug":"_1-4-一些其他software-design-approach","link":"#_1-4-一些其他software-design-approach","children":[{"level":4,"title":"1.4.1 Waterfall","slug":"_1-4-1-waterfall","link":"#_1-4-1-waterfall","children":[]},{"level":4,"title":"1.4.2 Iterative Approach","slug":"_1-4-2-iterative-approach","link":"#_1-4-2-iterative-approach","children":[]},{"level":4,"title":"1.4.3 V-model Approach","slug":"_1-4-3-v-model-approach","link":"#_1-4-3-v-model-approach","children":[]}]}]},{"level":2,"title":"2. Agile","slug":"_2-agile","link":"#_2-agile","children":[{"level":3,"title":"2.1 some of the features","slug":"_2-1-some-of-the-features","link":"#_2-1-some-of-the-features","children":[]},{"level":3,"title":"2.2 Scrum","slug":"_2-2-scrum","link":"#_2-2-scrum","children":[{"level":4,"title":"2.2.1 Roles","slug":"_2-2-1-roles","link":"#_2-2-1-roles","children":[]},{"level":4,"title":"2.2.2 Scrum events:","slug":"_2-2-2-scrum-events","link":"#_2-2-2-scrum-events","children":[]},{"level":4,"title":"2.2.3 Artifacts:","slug":"_2-2-3-artifacts","link":"#_2-2-3-artifacts","children":[]}]},{"level":3,"title":"2.3 Kanban","slug":"_2-3-kanban","link":"#_2-3-kanban","children":[]},{"level":3,"title":"2.4 Extreme programming (XP)","slug":"_2-4-extreme-programming-xp","link":"#_2-4-extreme-programming-xp","children":[]},{"level":3,"title":"2.5 Test Driven Development (TDD):","slug":"_2-5-test-driven-development-tdd","link":"#_2-5-test-driven-development-tdd","children":[]},{"level":3,"title":"2.6 Kanban Board","slug":"_2-6-kanban-board","link":"#_2-6-kanban-board","children":[]}]},{"level":2,"title":"3. User Story","slug":"_3-user-story","link":"#_3-user-story","children":[]}],"git":{"createdTime":1714559748000,"updatedTime":1715243590000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":4}]},"readingTime":{"minutes":6.36,"words":1909},"filePathRelative":"zh/Software_Design/Agile_01.md","localizedDate":"2024年5月1日","excerpt":"<h2>1. The Beginning of Software Development</h2>\\n<h3>1.1 Bad Practices</h3>\\n<p>• Presence of typos in the code 错字</p>\\n<p>• No proper structure and formatting of the code 没有正确的代码结构和格式</p>\\n<p>• No use of comments in the code 注释</p>\\n<p>• No accurate declaration of values 对值的声明要准确</p>\\n<p>• Use of magic numbers 魔术数字不能用</p>","autoDesc":true}');export{b as comp,w as data};

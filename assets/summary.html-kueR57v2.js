import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as e,a as s,d as n,o as l}from"./app-CQgJ7OV3.js";const r="/assets/image-20241220225358789-UviZJwq5.png",i="/assets/image-20241220225333437-Bo1S4U0r.png",p="/assets/image-20241220223247925-DNRQBbO9.png",Q="/assets/image-20241220224351426-B5-_fL7O.png",d="/assets/image-20241220224612501-B8ugZNN8.png",m="/assets/image-20241220225229046-q6SEYpr7.png",T="/assets/image-20241208104713189-C_oXrsO8.png",c="/assets/image-20241220231055898-BbOVnqg6.png",g="/assets/image-20241220232025017-B5ihDQHA.png",h="/assets/image-20241220232152196-DdP9B1Rc.png",u="/assets/image-20241220232649999-Z8oREo9l.png",F="/assets/image-20241220233311637-BysvG7Lg.png",y="/assets/image-20241220233637894-D__8tVp0.png",v="/assets/image-20241220233808213-D88ClAwh.png",b="/assets/image-20241220234604339-DFUtI-Y4.png",f="/assets/image-20241220234638444-Bslvn4wL.png",w="/assets/image-20241220235232194-VLevQxww.png",x="/assets/image-20241221000027019-Cs1d7B68.png",H="/assets/image-20241221000140398-6-98CZla.png",k="/assets/image-20241221000616158-BCxOkpYQ.png",L="/assets/image-20241221001035478-BD1Q_3fX.png",M="/assets/image-20241221001311439-vzDyWgj4.png",O="/assets/image-20241221001702012-CQbPuNuv.png",D="/assets/image-20241221002307969-7biHnd5O.png",Z="/assets/image-20241221002339503-CTs3idfp.png",V="/assets/image-20241208202340538-CRr3bjD0.png",q="/assets/image-20241208203819847-DwXgG9ET.png",E="/assets/image-20241221005413170-v5A8LgaG.png",_="/assets/image-20241221005530198-DGqbulBt.png",B="/assets/image-20241221005607779-vEnSFMDV.png",z="/assets/image-20241221005828978-CPHHU-e_.png",C="/assets/image-20241221010052426-4ptmXISr.png",j="/assets/image-20241221010119874-DxMTlATM.png",S="/assets/image-20241221010206570-tnuCGF4S.png",A="/assets/image-20241221010518077-efYks7EN.png",P="/assets/image-20241221011046902-CgB7f7XQ.png",G="/assets/image-20241221011233049-D_IOLCPY.png",I="/assets/image-20241221012121498-Dmybj8dV.png",J="/assets/image-20241221012543758-pV_gP-7a.png",N="/assets/image-20241221012651049-C_h80jyB.png",U={},X={class:"MathJax",jax:"SVG",style:{position:"relative"}},K={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.695ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3401 1000","aria-hidden":"true"},R={class:"MathJax",jax:"SVG",style:{position:"relative"}},Y={style:{"vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.208ex",height:"2.034ex",role:"img",focusable:"false",viewBox:"0 -694 1860 899","aria-hidden":"true"},W={class:"MathJax",jax:"SVG",style:{position:"relative"}},$={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.695ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3401 1000","aria-hidden":"true"},s2={class:"MathJax",jax:"SVG",style:{position:"relative"}},a2={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.842ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 4792.3 1083.9","aria-hidden":"true"},n2={class:"MathJax",jax:"SVG",style:{position:"relative"}},e2={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.226ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2310 1000","aria-hidden":"true"},t2={class:"MathJax",jax:"SVG",style:{position:"relative"}},l2={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"6.348ex",height:"2.452ex",role:"img",focusable:"false",viewBox:"0 -833.9 2805.9 1083.9","aria-hidden":"true"},o2={class:"MathJax",jax:"SVG",style:{position:"relative"}},r2={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"16.071ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 7103.4 1000","aria-hidden":"true"},i2={class:"MathJax",jax:"SVG",style:{position:"relative"}},p2={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.794ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 4329 1000","aria-hidden":"true"},Q2={class:"MathJax",jax:"SVG",style:{position:"relative"}},d2={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.72ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 4296.4 1000","aria-hidden":"true"},m2={class:"MathJax",jax:"SVG",style:{position:"relative"}},T2={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.862ex",height:"1.937ex",role:"img",focusable:"false",viewBox:"0 -833.9 1264.9 855.9","aria-hidden":"true"},c2={class:"MathJax",jax:"SVG",style:{position:"relative"}},g2={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.74ex",height:"1.595ex",role:"img",focusable:"false",viewBox:"0 -683 769 705","aria-hidden":"true"};function h2(u2,a){return l(),t("div",null,[a[47]||(a[47]=e('<h2 id="week-02" tabindex="-1"><a class="header-anchor" href="#week-02"><span>week 02</span></a></h2><h3 id="bogosort" tabindex="-1"><a class="header-anchor" href="#bogosort"><span>Bogosort</span></a></h3><p><strong>时间复杂度</strong>：最坏情况是 <strong>O(n! * n)</strong>，预期情况是 <strong>O(n!)</strong>。</p><blockquote><p>【平均情况下，需要尝试 n! 次打乱才能生成一个正确排序。每次尝试包括：调用 <code>is_sorted</code>：复杂度为 O(n)。调用 <code>shuffle</code>：复杂度为 O(n)。每次尝试的复杂度为 O(n+n)=O(n)】</p></blockquote><p><strong>空间复杂度</strong>：<strong>O(1)</strong>，因为该算法是原地排序。代码见课件</p><h3 id="insertion-sort" tabindex="-1"><a class="header-anchor" href="#insertion-sort"><span>Insertion Sort</span></a></h3><p><strong>时间复杂度</strong>：最优情况：O(n) 最坏情况：O(n²) 平均情况：O(n²) <strong>空间复杂度</strong>：O(1) <strong>对于小数据算法友好。</strong> 代码见课件</p><h3 id="bubble-sort" tabindex="-1"><a class="header-anchor" href="#bubble-sort"><span>bubble sort</span></a></h3><p><strong>时间复杂度</strong>：最优情况：O(n) 最坏情况：O(n²) 平均情况：O(n²)</p><p><strong>空间复杂度</strong>：O(1) <strong>不太高效的一个排序方法。实现简单，但一般实际不会选择。</strong></p><img src="'+r+'" alt="image-20241220225358789" style="zoom:25%;"><h3 id="quick-sort" tabindex="-1"><a class="header-anchor" href="#quick-sort"><span>Quick Sort</span></a></h3><p><strong>时间复杂度</strong>： 最优情况：O(n log n) 最坏情况：O(n²) 平均情况：O(n log n)</p><blockquote><p>最差情况发生在列表本身已经有序（升序或降序），选定的基准值总是列表中的最小值或最大值。此时，每次分区都会导致一个子列表为空，另一个子列表包含剩余的所有元素。递归深度为 n，每层分区的时间复杂度为 O(n)</p></blockquote><p><strong>空间复杂度</strong>：O(log n)（递归栈深度）最差情况下，是 O(n)</p><p><strong>适合大规模数据排序。实际中基本是首选。虽然在最坏情况下时间复杂度可能退化为 <strong>O(n²)</strong>，但通过选择合适的基准元素，可以避免最坏情况，通常其表现会非常优秀。</strong></p><p>**pivot 值的选择：**如果数组数据完全随机并且数据较少，选择第一个或最后一个元素作为基准元素是简单且足够的。如果数组已经有部分排序并且数据较多，选择中值（最大值加最小值除以2）作为基准元素可以提高效率，避免最坏情况。中间值策略能更有效地分割数组，减少递归的深度，因此在大多数情况下，它能提升快速排序的性能</p><h3 id="merge-sort" tabindex="-1"><a class="header-anchor" href="#merge-sort"><span>Merge sort</span></a></h3><p><strong>时间复杂度</strong>：最优情况：O(n log n) 最坏情况：O(n log n) 平均情况：O(n log n) <strong>空间复杂度</strong>：O(n)</p><img src="'+i+'" alt="image-20241220225333437" style="zoom:25%;"><p>归并排序是一种 <strong>稳定</strong> 排序算法，它的时间复杂度稳定在 <strong>O(n log n)</strong>，在处理大规模数据时效率较高。然而，由于它需要额外的空间来存储临时数组，因此它的空间复杂度为 <strong>O(n)</strong>，这在某些内存有限的环境中可能是一个缺点。尽管如此，归并排序仍然是一个非常可靠和常用的排序算法，尤其在数据量大或数据需要稳定排序的场合。</p><blockquote><ul><li><p>每次合并时，需要遍历两个子数组的所有元素。对于大小为 n 的数组，合并每一层的总时间为 O(n)（因为每个元素只会被访问一次）。由于合并操作在每一层都进行，总共有 log⁡2(n) 层，因此合并过程的时间复杂度为： O(n⋅log⁡n)</p></li><li><p>分解的总复杂度为 <strong>O(log⁡n)</strong>（递归树的高度）。合并的总复杂度为 <strong>O(n⋅log⁡n)</strong>。因此，合并排序的总时间复杂度是： O(n⋅log⁡n)</p></li></ul></blockquote><h2 id="week-03" tabindex="-1"><a class="header-anchor" href="#week-03"><span>week 03</span></a></h2><h3 id="binary-search" tabindex="-1"><a class="header-anchor" href="#binary-search"><span>Binary Search</span></a></h3><p><strong>只能在排序好[sorted]的数据里查询。</strong></p><p><strong>时间复杂度</strong>：最优情况：O(1) 最坏情况：O(log n) 平均情况：O(log n) <strong>空间复杂度</strong>：O(1)：迭代版本 O(n）：递归版本</p><img src="'+p+'" alt="image-20241220223247925" style="zoom:25%;"><h3 id="interpolation-search" tabindex="-1"><a class="header-anchor" href="#interpolation-search"><span>Interpolation search</span></a></h3><p><strong>查找的数据是排序[sorted]好的，（均匀[uniform distribution]地，就是元素之间的间隔相同）</strong></p><p><strong>最优时间复杂度</strong>：O(log log n)（数据均匀分布时，一次查找就过滤掉了 n 个元素，找到了给定元素）</p><p><strong>最坏时间复杂度</strong>：O(n)（数据分布不均匀时，搜索了 n 次才找到）</p><p><strong>平均时间复杂度</strong>：O(log n)（数据分布均匀时， 有点类似于二分查找了） <strong>空间复杂度</strong>：O(1)</p><img src="'+Q+'" alt="image-20241220224351426" style="zoom:25%;"><h3 id="heap-sort" tabindex="-1"><a class="header-anchor" href="#heap-sort"><span>Heap sort</span></a></h3><p>Arrangement of data as trees speeds up search by reducing the number of operations necessary to find a target</p><blockquote><p><strong>构建堆</strong>：构建最大堆或最小堆需要遍历堆的每一个节点，且调整每个节点的操作时间复杂度是O(log n)。因此，构建堆的时间复杂度是 O(n)。</p></blockquote>',36)),s("blockquote",null,[s("p",null,[a[4]||(a[4]=s("strong",null,"堆排序",-1)),a[5]||(a[5]=n("：每次将根节点（最大值或最小值）与最后一个元素交换，然后调整堆的结构。每次调整的时间复杂度是 O(log n)，共需要进行 n 次交换，因此堆排序的时间复杂度是 O(n log n)。一次 sift-down 的时间复杂度是 ")),s("mjx-container",X,[(l(),t("svg",K,a[0]||(a[0]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[1]||(a[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))]),a[6]||(a[6]=n("，因为树的深度是 ")),s("mjx-container",R,[(l(),t("svg",Y,a[2]||(a[2]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(783,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1260,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g>',1)]))),a[3]||(a[3]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n")])],-1))]),a[7]||(a[7]=n("，最坏的情况一个节点要向下交换树的深度的次数。"))])]),a[48]||(a[48]=e('<p>综合起来，堆排序的总<strong>时间复杂度</strong>是 <strong>O(n log n)</strong>。 <strong>空间复杂度</strong>是 <strong>O(1)</strong>[迭代] <strong>O(logn)</strong>[递归]。</p><p>堆化后并不是排序好的列表，但是满足父节点永远大于其子节点，树扁平化的列表也遵循这个规则。Heapify 完了我们还需要 Sort。Sort完了是一个递增的列表。</p><p>Use recursive heap sort for small datasets. Use iterative heap sort for large datasets to avoid stack overflow.</p><img src="'+d+'" alt="image-20241220224612501" style="zoom:25%;"><img src="'+m+'" alt="image-20241220225229046" style="zoom:25%;"><img src="'+T+'" alt="image-20241208104713189" style="zoom:33%;"><p><strong>Heap Sort</strong>的主要优点是<strong>时间复杂度稳定</strong>为 O(n log n)，即使在最坏情况下也是如此，适合处理大规模数据。缺点是其<strong>不稳定</strong>，并且在实际中比快速排序稍慢。在实际应用中，如果<strong>需要保证最坏情况的时间复杂度</strong>，堆排序是一个不错的选择；但如果<strong>数据规模适中且关注平均性能</strong>，<strong>快速排序</strong>通常会表现得更好因为快速排序只需要少量额外空间。<strong>快速排序</strong> 是较为高效的选择，特别是当数据集较小或数据接近随机分布时。但在处理非常大的数据集、要求稳定排序或对最坏情况性能要求较高时，<strong>合并排序</strong> 是一个更好的选择。</p><h2 id="week-04" tabindex="-1"><a class="header-anchor" href="#week-04"><span>week 04</span></a></h2>',8)),s("p",null,[s("strong",null,[a[10]||(a[10]=n("BSTs allow powerful, efficient search ")),s("mjx-container",W,[(l(),t("svg",$,a[8]||(a[8]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[9]||(a[9]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])]),a[11]||(a[11]=n(". 详解请戳："))]),a[49]||(a[49]=e('<p>在一个完全平衡的二叉树中，树的高度是 <strong>log n</strong>（n 是节点的数量），因此我们每向下遍历一层，就进行一次比较。所以在每一层都只需要做一次比较，而比较的层数和树的高度成正比。树的高度不受节点数量的影响，而是与树的结构（平衡）直接相关。 随着树越来越大，搜索所需要的比较次数相对于树的总节点数的比例越来越小。</p><h3 id="traversal" tabindex="-1"><a class="header-anchor" href="#traversal"><span>Traversal</span></a></h3><h4 id="dfs-——-search-for-unbalanced-trees" tabindex="-1"><a class="header-anchor" href="#dfs-——-search-for-unbalanced-trees"><span>DFS —— search for unbalanced trees</span></a></h4><h4 id="bfs-——-search-for-balanced-trees" tabindex="-1"><a class="header-anchor" href="#bfs-——-search-for-balanced-trees"><span>BFS —— search for balanced trees</span></a></h4><img src="'+c+'" alt="image-20241220231055898" style="zoom:25%;"><h3 id="avl" tabindex="-1"><a class="header-anchor" href="#avl"><span>AVL</span></a></h3><h4 id="insert-标红" tabindex="-1"><a class="header-anchor" href="#insert-标红"><span>Insert （标红！！！）</span></a></h4><img src="'+g+'" alt="image-20241220232025017" style="zoom:33%;"><img src="'+h+'" alt="image-20241220232152196" style="zoom:50%;"><h4 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>delete</span></a></h4><img src="'+u+'" alt="image-20241220232649999" style="zoom:25%;"><img src="'+F+'" alt="image-20241220233311637" style="zoom:25%;"><h2 id="week-05" tabindex="-1"><a class="header-anchor" href="#week-05"><span>week 05</span></a></h2><h3 id="hashing" tabindex="-1"><a class="header-anchor" href="#hashing"><span>Hashing</span></a></h3><img src="'+y+'" alt="image-20241220233637894" style="zoom:67%;"><img src="'+v+'" alt="image-20241220233808213" style="zoom:67%;"><img src="'+b+'" alt="image-20241220234604339" style="zoom:33%;"><img src="'+f+'" alt="image-20241220234638444" style="zoom:33%;"><h3 id="link-list" tabindex="-1"><a class="header-anchor" href="#link-list"><span>Link list</span></a></h3><img src="'+w+'" alt="image-20241220235232194" style="zoom:33%;"><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h3><img src="'+x+'" alt="image-20241221000027019" style="zoom:33%;"><h3 id="graph" tabindex="-1"><a class="header-anchor" href="#graph"><span>Graph</span></a></h3><p><strong>DFS</strong> : <strong>时间复杂度</strong>：O(V + E) <strong>空间复杂度</strong>：O(V)</p><img src="'+H+'" alt="image-20241221000140398" style="zoom:67%;"><p><strong>BFS</strong> : <strong>时间复杂度</strong>：O(V + E) <strong>空间复杂度</strong>：O(V)</p><img src="'+k+'" alt="image-20241221000616158" style="zoom:33%;"><h2 id="week-06" tabindex="-1"><a class="header-anchor" href="#week-06"><span>week 06</span></a></h2>',28)),s("p",null,[a[16]||(a[16]=s("strong",null,"Dijkstra’s algorithm",-1)),a[17]||(a[17]=n(" : 时间复杂度：")),s("mjx-container",s2,[(l(),t("svg",a2,a[12]||(a[12]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2639.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3639.3,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(4403.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[13]||(a[13]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"V"),s("mn",null,"2")]),s("mo",null,"+"),s("mi",null,"E"),s("mo",{stretchy:"false"},")")])],-1))]),a[18]||(a[18]=n(" 空间复杂度：")),s("mjx-container",n2,[(l(),t("svg",e2,a[14]||(a[14]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(1921,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[15]||(a[15]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"V"),s("mo",{stretchy:"false"},")")])],-1))])]),s("blockquote",null,[s("p",null,[s("strong",null,[a[21]||(a[21]=n("寻找距离最小的节点：")),s("mjx-container",t2,[(l(),t("svg",l2,a[19]||(a[19]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2416.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[20]||(a[20]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"V"),s("mn",null,"2")]),s("mo",{stretchy:"false"},")")])],-1))])])]),a[22]||(a[22]=s("ul",null,[s("li",null,[s("code",null,"min()"),n(" 函数的复杂度是 "),s("strong",null,"O(V)"),n("，因为需要遍历所有未处理的节点 "),s("code",null,"Q"),n("。最多需要执行 "),s("strong",null,"V 次"),n("，因为每个节点都会被处理一次。")])],-1))]),a[50]||(a[50]=s("blockquote",null,[s("p",null,[s("strong",null,"更新邻居的距离：O(E)")]),s("ul",null,[s("li",null,[n("遍历每个节点的邻居对应图中的所有边，因此所有边的更新操作总计为 "),s("strong",null,"O(E)"),n("。每一次遍历一个节点都只遍历与它相连的边，而非所有边。遍历完所有节点后，所有边才被遍历了一遍。")])])],-1)),a[51]||(a[51]=s("img",{src:L,alt:"image-20241221001035478",style:{zoom:"50%"}},null,-1)),s("p",null,[a[25]||(a[25]=n("如果用最小堆实现，时间复杂度：")),s("mjx-container",o2,[(l(),t("svg",r2,a[23]||(a[23]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(1152,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1541,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(2532.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3532.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(4296.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(4685.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4983.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5468.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(5945.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5945.4,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(6714.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[24]||(a[24]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mo",{stretchy:"false"},"("),s("mi",null,"V"),s("mo",null,"+"),s("mi",null,"E"),s("mo",{stretchy:"false"},")"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mo",null,"⁡"),s("mi",null,"V"),s("mo",{stretchy:"false"},")")])],-1))]),a[26]||(a[26]=n(". 空间复杂度是 ")),a[27]||(a[27]=s("strong",null,"O(V)",-1)),a[28]||(a[28]=n("，因为 ")),a[29]||(a[29]=s("code",null,"distances",-1)),a[30]||(a[30]=n(" 字典和优先队列都占用 ")),a[31]||(a[31]=s("strong",null,"O(V)",-1)),a[32]||(a[32]=n(" 的空间。"))]),a[52]||(a[52]=e('<blockquote><p><strong>弹出最小元素的操作</strong>：每个节点最多被弹出一次，时间复杂度是 <strong>O(V log V)</strong>。<strong>更新邻接节点的操作</strong>：每条边都会被遍历并插入到优先队列中，时间复杂度是 <strong>O(E log V)</strong>，其中 <code>E</code> 是图中的边数。</p></blockquote><img src="'+M+'" alt="image-20241221001311439" style="zoom:33%;"><p><strong>Prim’s algorithm</strong> : <strong>时间复杂度</strong>：O(V * E)</p><blockquote><p>外层循环执行 <strong>V-1</strong> 次，每次执行时内层循环遍历所有邻接边，最坏情况下每条边都会被遍历一次</p></blockquote><p><strong>空间复杂度</strong>：O(V + E)</p><blockquote><p>图 <code>graph</code> 存储了所有节点及其邻接边，空间复杂度为 <strong>O(V + E)</strong>。</p></blockquote><img src="'+O+'" alt="image-20241221001702012" style="zoom:33%;">',7)),s("p",null,[a[35]||(a[35]=s("strong",null,"kruskal’s algorithm",-1)),a[36]||(a[36]=n(": 时间复杂度： ")),s("mjx-container",i2,[(l(),t("svg",p2,a[33]||(a[33]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(1916,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2214,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2699,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3176,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(3940,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[34]||(a[34]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"E"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"E"),s("mo",{stretchy:"false"},")")])],-1))])]),a[53]||(a[53]=s("blockquote",null,[s("p",null,[n("在 Kruskal 算法中，首先需要将所有边按权重升序排列。这一操作的时间复杂度是 "),s("strong",null,"O(E log E)"),n("，其中 "),s("strong",null,"E"),n(" 是图中的边数")])],-1)),s("p",null,[a[39]||(a[39]=n("空间复杂度：")),s("mjx-container",Q2,[(l(),t("svg",d2,a[37]||(a[37]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(2143.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3143.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(3907.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[38]||(a[38]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"V"),s("mo",null,"+"),s("mi",null,"E"),s("mo",{stretchy:"false"},")")])],-1))])]),a[54]||(a[54]=e('<img src="'+D+'" alt="image-20241221002307969" style="zoom:33%;"><img src="'+Z+'" alt="image-20241221002339503" style="zoom:33%;"><ul><li><p><strong>Dijkstra’s algorithm:</strong> Single Source Shortest Path Problem</p><blockquote><p>Given: directed graph G = (V, E) in which each edge has a <mark>non negative label</mark> and one vertex is specified as the source.Determine the cost of the shortest path from the source to every other vertex in V</p></blockquote></li></ul><blockquote></blockquote><ul><li><p><strong>Prim’s algorithm:</strong> An MST aims to connect ALL the nodes in a graph at minimum cost.</p><blockquote><p><strong>MST 是否包含所有可能的最短路径？</strong> <strong>不包含</strong>。MST 的目标是覆盖所有节点，且总权重最小，但它不能保证任意两个节点之间的路径是最短的。</p><p><strong>Prim 是否让 Dijkstra 算法多余？</strong> <strong>不会</strong>。Prim 算法的目标是生成 MST，而 Dijkstra 的目标是找到单源最短路径。两者解决的问题完全不同，互不替代</p><img src="'+V+'" alt="image-20241208202340538" style="zoom:33%;"></blockquote></li><li><p><strong>Kruskal’s algorithm:</strong></p><blockquote><p>Kruskal’s obviously avoids cycles. But how does Prim’s avoid cycles? : Prim avoids loops by connecting only new nodes and is naturally loop-free by design. Because it just chooses the lowest value unreached node; does not need to check for cycles. Cycles cannot happen in Prim’s as cycles involve already visited nodes…… and Prim’s will only consider unvisited nodes</p></blockquote></li></ul><img src="'+q+'" alt="image-20241208203819847" style="zoom:33%;">',6)),s("blockquote",null,[s("p",null,[a[44]||(a[44]=n("Kruskal 算法通过对所有边进行排序，直接从排序后的边列表中按顺序选取最小的边，这避免了像 Prim 那样需要在当前的节点集合中搜索最小权值边。在稠密图中，边的数量接近 ")),s("mjx-container",m2,[(l(),t("svg",T2,a[40]||(a[40]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g>',1)]))),a[41]||(a[41]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msup",null,[s("mi",null,"V"),s("mn",null,"2")])])],-1))]),a[45]||(a[45]=n("（")),s("mjx-container",c2,[(l(),t("svg",g2,a[42]||(a[42]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D449",d:"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"})])])],-1)]))),a[43]||(a[43]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"V")])],-1))]),a[46]||(a[46]=n(" 是节点数），排序所有边需要较高的时间成本。此外，Kruskal 算法还需要使用并查集频繁检测环路，稠密图中这一过程的开销会更大，降低效率。"))])]),a[55]||(a[55]=e('<h2 id="week-07" tabindex="-1"><a class="header-anchor" href="#week-07"><span>week 07</span></a></h2><h3 id="when-a-greedy-algorithm-gives-us-an-optimal-solution-and-why" tabindex="-1"><a class="header-anchor" href="#when-a-greedy-algorithm-gives-us-an-optimal-solution-and-why"><span>When a greedy algorithm gives us an optimal solution, and why</span></a></h3><blockquote><p><strong>最优子结构（Optimal Substructure）: 定义</strong>：一个问题的解可以通过子问题的最优解合成，即每个子问题的最优解一定是整体问题的最优解的一部分。</p><p><strong>无后效性（Greedy Choice Property）: 定义</strong>：当前的贪婪选择不会影响后续的选择，也不会影响全局最优解的达成。</p></blockquote><h3 id="greedy-algorithms-can-be-optimal-this-applies-to-dijkstra-what-about-prim-kruskal" tabindex="-1"><a class="header-anchor" href="#greedy-algorithms-can-be-optimal-this-applies-to-dijkstra-what-about-prim-kruskal"><span>greedy algorithms can be optimal: this applies to Dijkstra. What about Prim / Kruskal?</span></a></h3><p>都是最优的。前提是边是非负的。后俩需要图示联通的</p><h3 id="when-a-greedy-algorithm-does-not-give-us-an-optimal-solution-and-why" tabindex="-1"><a class="header-anchor" href="#when-a-greedy-algorithm-does-not-give-us-an-optimal-solution-and-why"><span>When a greedy algorithm does not give us an optimal solution, and why</span></a></h3><blockquote><p>A greedy algorithm fails when the problem does <strong>not satisfy the &quot;greedy-choice property&quot;</strong> or the <strong>&quot;optimal substructure&quot;</strong>. Specifically, the greedy algorithm&#39;s local optimal choices at each step may prevent it from achieving the global optimal solution.</p></blockquote><h3 id="为啥回溯对于最优解是必要的" tabindex="-1"><a class="header-anchor" href="#为啥回溯对于最优解是必要的"><span>为啥回溯对于最优解是必要的？</span></a></h3><p>Backtracking explores all possibilities systematically, ensuring the optimal solution.But takes time to run.</p><h2 id="week-08" tabindex="-1"><a class="header-anchor" href="#week-08"><span>week 08</span></a></h2><p>NP-hard problems can exhibit different behaviours on different runs for the same input variables.</p><h4 id="heuristics" tabindex="-1"><a class="header-anchor" href="#heuristics"><span>Heuristics</span></a></h4><img src="'+E+'" alt="image-20241221005413170" style="zoom:25%;"><img src="'+_+'" alt="image-20241221005530198" style="zoom:33%;"><h4 id="local-search" tabindex="-1"><a class="header-anchor" href="#local-search"><span>Local search</span></a></h4><img src="'+B+'" alt="image-20241221005607779" style="zoom:50%;"><h4 id="simulated-annealing" tabindex="-1"><a class="header-anchor" href="#simulated-annealing"><span>Simulated Annealing</span></a></h4><p><strong>退火算法的优点</strong>：能跳出局部最优。在温度较高时接受较差解，鼓励探索；在温度较低时专注于局部优化。</p><p>**怎么跳出局部最优解？**虽然初始解固定，但算法通过邻域搜索和随机接受较差解，可以有效探索更大范围的状态空间。</p><img src="'+z+'" alt="image-20241221005828978" style="zoom:25%;"><h4 id="grasp" tabindex="-1"><a class="header-anchor" href="#grasp"><span>GRASP</span></a></h4><blockquote><p><strong>GRASP 对退火算法的优化作用</strong> ：<strong>改进初始解的质量</strong> <strong>增强解的多样性</strong> <strong>减少退火算法的参数依赖性</strong> <strong>提高全局最优解的搜索效率</strong></p></blockquote><img src="'+C+'" alt="image-20241221010052426" style="zoom:33%;"><img src="'+j+'" alt="image-20241221010119874" style="zoom:33%;"><img src="'+S+'" alt="image-20241221010206570" style="zoom:50%;"><h2 id="week-09" tabindex="-1"><a class="header-anchor" href="#week-09"><span>week 09</span></a></h2><h3 id="chat-sever" tabindex="-1"><a class="header-anchor" href="#chat-sever"><span>chat sever</span></a></h3><img src="'+A+`" alt="image-20241221010518077" style="zoom:50%;"><h3 id="data-race" tabindex="-1"><a class="header-anchor" href="#data-race"><span>data race</span></a></h3><blockquote><ol><li><p>Thread 1 reads <code>my_var[0]</code>, gets <code>1</code>, and prepares to add <code>1</code>. 2. Thread 2 also reads <code>my_var[0]</code>, gets <code>1</code>, and prepares to add <code>1</code>. 3. Both threads compute the result <code>2</code> and write it back to <code>my_var[0]</code>.</p><p><strong>Result</strong>: Thread 2 started before Thread 1 finished. For instance, <code>my_var[0]</code> only increases by <code>1</code> instead of <code>2</code> because both threads modify it simultaneously, causing one update to overwrite the other and resulting in a lost update. One element may have been incremented by <code>2</code> while its neighboring element may have only been incremented by <code>1</code>.</p></li></ol></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">thread.setDaemon(</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 可以把非守护线程设置为守护线程。不等待子线程结束主线程就会结束。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>多个线程是操作是公用内存的，即使放在线程池里也要加锁避免数据竞争。</strong></p><h3 id="lock" tabindex="-1"><a class="header-anchor" href="#lock"><span>lock</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> concurrent.futures </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> ThreadPoolExecutor</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> threading </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Event, Lock</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time, sleep</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化 Event 和 Lock</span></span>
<span class="line"><span style="color:#F8F8F2;">event </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Event()</span></span>
<span class="line"><span style="color:#F8F8F2;">data_lock </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Lock()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> modify_variable</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">var</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        with</span><span style="color:#F8F8F2;"> data_lock:</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(var)):</span></span>
<span class="line"><span style="color:#F8F8F2;">                var[i] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> event.is_set():</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Stop printing&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 要操作的共享变量</span></span>
<span class="line"><span style="color:#F8F8F2;">my_var </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 创建线程池</span></span>
<span class="line"><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> ThreadPoolExecutor(</span><span style="color:#FD971F;font-style:italic;">max_workers</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> executor:</span></span>
<span class="line"><span style="color:#88846F;">    # 提交任务到线程池</span></span>
<span class="line"><span style="color:#F8F8F2;">    executor.submit(modify_variable, my_var)</span></span>
<span class="line"><span style="color:#F8F8F2;">    executor.submit(modify_variable, my_var)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    t0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> t0 </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            with</span><span style="color:#F8F8F2;"> data_lock:</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(my_var)</span></span>
<span class="line"><span style="color:#F8F8F2;">            sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        except</span><span style="color:#66D9EF;font-style:italic;"> KeyboardInterrupt</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            event.set()</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 设置 event 来停止线程</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.set()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 打印最终结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(my_var)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="queue-1" tabindex="-1"><a class="header-anchor" href="#queue-1"><span>queue</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> concurrent.futures </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> ThreadPoolExecutor</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> threading </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Event</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> time </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time, sleep</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> queue </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Queue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化 Event</span></span>
<span class="line"><span style="color:#F8F8F2;">event </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Event()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> modify_variable</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">queue_in</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">queue_out</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> queue_in.empty():</span></span>
<span class="line"><span style="color:#F8F8F2;">            var </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue_in.get()</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(var)):</span></span>
<span class="line"><span style="color:#F8F8F2;">                var[i] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">            queue_out.put(var)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> event.is_set():</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Stop printing&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化变量和队列</span></span>
<span class="line"><span style="color:#F8F8F2;">my_var </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">queue1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Queue()</span></span>
<span class="line"><span style="color:#F8F8F2;">queue1.put(my_var)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用线程池</span></span>
<span class="line"><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> ThreadPoolExecutor(</span><span style="color:#FD971F;font-style:italic;">max_workers</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> executor:</span></span>
<span class="line"><span style="color:#F8F8F2;">    executor.submit(modify_variable, queue1, queue1)</span></span>
<span class="line"><span style="color:#F8F8F2;">    executor.submit(modify_variable, queue1, queue1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    t0 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time()</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> t0 </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">            print</span><span style="color:#F8F8F2;">(my_var)</span></span>
<span class="line"><span style="color:#F8F8F2;">            sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        except</span><span style="color:#66D9EF;font-style:italic;"> KeyboardInterrupt</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            event.set()</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 设置事件以停止线程</span></span>
<span class="line"><span style="color:#F8F8F2;">    event.set()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 打印最终结果</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> queue1.empty():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(queue1.get())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="week-10" tabindex="-1"><a class="header-anchor" href="#week-10"><span>week 10</span></a></h2><p>什么时候需要用 await？<strong>有 I/O 操作的函数</strong>（如网络请求、文件读写）。<strong>需要等待的任务调度</strong>（如 <code>asyncio.sleep</code>）。<strong>依赖另一个异步任务的完成</strong></p><h3 id="io-cpu" tabindex="-1"><a class="header-anchor" href="#io-cpu"><span>IO &amp; CPU</span></a></h3><img src="`+P+'" alt="image-20241221011046902" style="zoom:25%;"><p><strong>Async</strong>: Best for I/O-bound tasks, leveraging event-driven mechanisms to efficiently handle a large number of concurrent connections. <strong>Multithreading</strong>: Ideal for concurrent I/O-bound tasks that require shared resources but less suitable for CPU-intensive tasks due to GIL constraints.<strong>Multiprocessing</strong>: Optimal for CPU-bound tasks, offering independent execution and full multi-core utilization but less efficient for small, frequent task switches due to higher overhead.</p><h3 id="chained-coroutines-py" tabindex="-1"><a class="header-anchor" href="#chained-coroutines-py"><span>chained_coroutines.py</span></a></h3><img src="'+G+'" alt="image-20241221011233049" style="zoom:67%;"><h3 id="queue-producers-consumers-py" tabindex="-1"><a class="header-anchor" href="#queue-producers-consumers-py"><span>queue_producers_consumers.py</span></a></h3><img src="'+I+'" alt="image-20241221012121498" style="zoom:67%;"><h3 id="data-order-py" tabindex="-1"><a class="header-anchor" href="#data-order-py"><span>data_order.py</span></a></h3><img src="'+J+'" alt="image-20241221012543758" style="zoom:33%;"><h3 id="data-sharing-queue" tabindex="-1"><a class="header-anchor" href="#data-sharing-queue"><span>data_sharing queue</span></a></h3><img src="'+N+'" alt="image-20241221012651049" style="zoom:25%;"><ol start="3"><li><strong>创建并发的 <code>worker</code></strong>：</li></ol><ul><li>调用 ，同时启动了两个 协程。每个 <code>worker</code> 会从队列中取出任务并执行，直到队列为空。</li></ul><ol start="4"><li><strong><code>worker(queue)</code> 的执行</strong>：</li></ol><ul><li><strong><code>worker</code> 循环运行</strong>：每次循环，调用 <code>queue.get()</code> 从队列中取出一个任务。执行 调用 <code>queue.task_done()</code>，标记队列中的这个任务已完成。如果队列为空，<code>worker</code> 循环结束。</li><li><strong>并发处理</strong>：因为有两个 <code>worker</code>，两个任务会并发运行，每个 <code>worker</code> 都在独立处理任务。当队列中有 3 个任务时，两个 <code>worker</code> 会同时取任务并运行，减少总处理时间。</li></ul><ol start="5"><li><strong>任务完成与清理</strong>：<code>asyncio.gather()</code> 等待所有 <code>worker</code> 完成任务（即队列中的所有任务都被取出并处理）。当 <code>worker</code> 处理完所有任务，<code>main()</code> 返回，<code>asyncio.run()</code> 退出事件循环。</li></ol>',54))])}const v2=o(U,[["render",h2]]),b2=JSON.parse('{"path":"/zh/Advanced_Algorithms/summary.html","title":"所有知识点总结","lang":"zh-CN","frontmatter":{"title":"所有知识点总结","icon":"python","date":"2024-12-07T21:05:29.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1734943421000,"updatedTime":1734943421000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":1,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":13.94,"words":4181},"filePathRelative":"zh/Advanced_Algorithms/summary.md","localizedDate":"2024年12月7日"}');export{v2 as comp,b2 as data};

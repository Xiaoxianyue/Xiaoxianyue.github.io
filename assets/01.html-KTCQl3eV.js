import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as p}from"./app-Cr94KhCm.js";const e="/assets/image-20240516223057988-jttHU1QI.png",o="/assets/image-20240516223555002-BjEP-GW2.png",t="/assets/image-20240516225218946-Cw4yXWwb.png",c="/assets/image-20240516230131820-C8n1iFtR.png",i="/assets/image-20240516233350156-CnySlOvj.png",F="/assets/image-20240516233831634-C8pTlADC.png",r={};function y(d,s){return p(),a("div",null,s[0]||(s[0]=[l('<h2 id="_1-什么是数据结构" tabindex="-1"><a class="header-anchor" href="#_1-什么是数据结构"><span>1. 什么是数据结构？</span></a></h2><h3 id="_1-1-数据结构的定义" tabindex="-1"><a class="header-anchor" href="#_1-1-数据结构的定义"><span>1.1 数据结构的定义</span></a></h3><p>基本定义：</p><ul><li><p>数据（Data）：描述客观事物的数和字符的集合。</p><ul><li>信息的载体</li><li>对客观事物符号化的表示</li><li>能够被计算机识别存储和加工</li></ul></li><li><p>数据元素（Data element）：作为数据的基本单位。也可以称为元素，记录，结点或定点。</p><ul><li>一个数据元素可由若干个数据项组成。</li><li>如：0003 李明 男 <code>2001/03/02</code>是李明的基本信息，也是由若干个数据项组成的数据元素。</li></ul></li><li><p>数据项（Data item)具有独立含义的数据最小单位，也称为字段和域。</p><ul><li><code>数据 &gt; 数据结构 &gt; 数据项，就像 学生表 &gt; 个人记录 &gt; 学号姓名…</code></li></ul></li><li><p>数据对象（Data Object）性质相同的数据元素的集合，是数据的一个子集。<code>\\</code></p><ul><li>字母字符数据对象是集合<code>C={&#39;A&#39;,&#39;B&#39;,&#39;C&#39;...}</code></li></ul></li><li><p>数据结构: 数据元素不是孤立存在的，他们存在着某种关系，数据元素相互之间的关系称为结构。是指相互之间存在一种或多种特定关系的数据元素集合。或者说，数据结构是带结构的数据元素的集合。</p></li></ul><p>数据结构通常也包括以下两方面：</p><ul><li>逻辑结构。有数据的逻辑关系构成。</li><li>存储结构。数据元素及其关系在计算机存储的表示，也称为数据的物理结构。</li></ul><h3 id="_1-2-逻辑结构" tabindex="-1"><a class="header-anchor" href="#_1-2-逻辑结构"><span>1.2 逻辑结构</span></a></h3><h4 id="_1-2-1-逻辑结构的表示" tabindex="-1"><a class="header-anchor" href="#_1-2-1-逻辑结构的表示"><span>1.2.1 逻辑结构的表示</span></a></h4><p>图表和二元组。</p><ol><li>图表</li></ol><img src="'+e+'" alt="image-20240516223057988" style="zoom:67%;"><p>图形中每一个数据节点对应着一个元素，两结点之间的箭头代表了他们的相邻关系。如下就是上面这个图表的逻辑结构：</p><img src="'+o+'" alt="image-20240516223555002" style="zoom:67%;"><ol start="2"><li>二元组表示</li></ol><p>一个二元组如下所示：</p><p><code>B=(D,R)</code></p><p>其中B是一种数据逻辑结构，由数据元素的集合D以及D上二元关系的集合R所组成。</p><img src="'+t+'" alt="image-20240516225218946" style="zoom:50%;"><p>对于二元表中相邻的<code>&lt;x,y&gt;</code>，<code>x</code>为<code>y</code>的直接前驱元素，<code>y</code>为<code>x</code>的直接后继元素。</p><p>如果一个元素没有前驱元素，则称为开始元素；没有后继元素，则为终端元素。</p><p>例子：</p><img src="'+c+`" alt="image-20240516230131820" style="zoom:50%;"><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">B </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {D，R}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">D </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;"> , </span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">21</span><span style="color:#F8F8F2;"> , </span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">27</span><span style="color:#F8F8F2;"> , </span><span style="color:#AE81FF;">029</span><span style="color:#F8F8F2;"> , </span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">R </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { r }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">r </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#F92672;">&lt;0</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">21</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> , </span><span style="color:#F92672;">&lt;0</span><span style="color:#AE81FF;">21</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">27</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">&lt;0</span><span style="color:#AE81FF;">27</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">029</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;">029</span><span style="color:#F8F8F2;">,</span><span style="color:#F92672;">0</span><span style="color:#AE81FF;">25</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-逻辑结构的类型" tabindex="-1"><a class="header-anchor" href="#_1-2-2-逻辑结构的类型"><span>1.2.2 逻辑结构的类型</span></a></h4><ol><li>集合</li></ol><p>集合（<code>set</code>）是指数据元素之间除了“同属于一个集合”的关系以外别无其他关系。</p><ol start="2"><li>线性结构</li></ol><p>线性结构是指该结构中数据元素之间存在一对一的关系。其特点是开始元素和终端元素都是唯一的，其余元素只有一个前驱元素和后继元素。</p><ol start="3"><li>树形结构</li></ol><p>树形结构是指该结构中的数据元素之间存在一对多的关系。它的特点是除了开始元素以外，每个元素有且仅有一个前驱元素，除了终端元素以外，每个元素有一个或多个后继元素。</p><p>例子：</p><img src="`+i+'" alt="image-20240516233350156" style="zoom:50%;"><ol start="4"><li>图形结构</li></ol><p>是指该结构中的数据元素之间存在多对多的关系。其特点是每个元素的前驱元素和后继元素的个数可以是任意的，因此图形结构可能没有开始元素和终端元素。</p><img src="'+F+`" alt="image-20240516233831634" style="zoom:50%;"><blockquote><p>树形结构和图形结构统称为非线性结构。该结构中的元素存在一对多或者多对多的关系。</p></blockquote><blockquote><p>树形结构是特殊的图形结构，图形结构是特殊的树形结构。</p></blockquote><h3 id="_1-3-存储结构" tabindex="-1"><a class="header-anchor" href="#_1-3-存储结构"><span>1.3 存储结构</span></a></h3><h4 id="_1-3-1-顺序存储结构" tabindex="-1"><a class="header-anchor" href="#_1-3-1-顺序存储结构"><span>1.3.1 顺序存储结构</span></a></h4><p>采用一组连续的存储单元存放所有的数据元素。</p><h2 id="_3-算法分析" tabindex="-1"><a class="header-anchor" href="#_3-算法分析"><span>3. 算法分析</span></a></h2><h3 id="_3-1-算法的时间性能分析" tabindex="-1"><a class="header-anchor" href="#_3-1-算法的时间性能分析"><span>3.1 算法的时间性能分析</span></a></h3><p>例题：</p><p>计算数组的元素和:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#A6E22E;"> sumArray</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> sum;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找数组中的最大元素:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#A6E22E;"> findMax</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> max </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (arr[i] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> max) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            max </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> max;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冒泡排序:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">void</span><span style="color:#A6E22E;"> bubbleSort</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; j </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">; j</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (arr[j] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">                int</span><span style="color:#F8F8F2;"> temp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[j];</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr[j] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr[j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n^2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>线性搜索:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#A6E22E;"> linearSearch</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (arr[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> x) {</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二分搜索:</p><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#A6E22E;"> binarySearch</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> l</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> r</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> (l </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> r) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> l </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> (r </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> l) </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (arr[m] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> x) {</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> m;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (arr[m] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> x) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            r </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>递归计算斐波那契数:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#A6E22E;"> fibonacci</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> n;</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#A6E22E;"> fibonacci</span><span style="color:#F8F8F2;">(n </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#A6E22E;"> fibonacci</span><span style="color:#F8F8F2;">(n </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入排序:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">void</span><span style="color:#A6E22E;"> insertionSort</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> i, key, j;</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span><span style="color:#88846F;">//n</span></span>
<span class="line"><span style="color:#F8F8F2;">        key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (j </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> &amp;&amp;</span><span style="color:#F8F8F2;"> arr[j] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key) {</span><span style="color:#88846F;">//J</span></span>
<span class="line"><span style="color:#F8F8F2;">            arr[j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[j];</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n^2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择排序:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">void</span><span style="color:#A6E22E;"> selectionSort</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> i, j, min_idx;</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span><span style="color:#88846F;">//n-1</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_idx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> (j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; j </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n; j</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">)</span><span style="color:#88846F;">//n-i-1</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (arr[j] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> arr[min_idx])</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_idx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> temp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[min_idx];</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[min_idx] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n^2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算字符串的长度:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#A6E22E;"> stringLength</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">char</span><span style="color:#FD971F;font-style:italic;"> str</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> (str[length] </span><span style="color:#F92672;">!=</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">\\0</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        length</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> length;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//O(n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速排序:</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">void</span><span style="color:#A6E22E;"> quickSort</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> arr</span><span style="color:#F92672;">[]</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> low</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#FD971F;font-style:italic;"> high</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (low </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> high) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> pi </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> partition</span><span style="color:#F8F8F2;">(arr, low, high);</span></span>
<span class="line"><span style="color:#A6E22E;">        quickSort</span><span style="color:#F8F8F2;">(arr, low, pi </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">        quickSort</span><span style="color:#F8F8F2;">(arr, pi </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, high);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63)]))}const u=n(r,[["render",y]]),b=JSON.parse(`{"path":"/zh/Data_Structure/01.html","title":"绪论","lang":"zh-CN","frontmatter":{"title":"绪论","icon":"c","date":"2024-05-16T19:38:05.000Z","author":"XiaoXianYue","isOriginal":true,"category":["数据结构","大二下"],"tag":["数据结构","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. 什么是数据结构？ 1.1 数据结构的定义 基本定义： 数据（Data）：描述客观事物的数和字符的集合。 信息的载体 对客观事物符号化的表示 能够被计算机识别存储和加工 数据元素（Data element）：作为数据的基本单位。也可以称为元素，记录，结点或定点。 一个数据元素可由若干个数据项组成。 如：0003 李明 男 2001/03/02是李明...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Data_Structure/01.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"绪论"}],["meta",{"property":"og:description","content":"1. 什么是数据结构？ 1.1 数据结构的定义 基本定义： 数据（Data）：描述客观事物的数和字符的集合。 信息的载体 对客观事物符号化的表示 能够被计算机识别存储和加工 数据元素（Data element）：作为数据的基本单位。也可以称为元素，记录，结点或定点。 一个数据元素可由若干个数据项组成。 如：0003 李明 男 2001/03/02是李明..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T02:03:44.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-16T19:38:05.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T02:03:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"绪论\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-16T19:38:05.000Z\\",\\"dateModified\\":\\"2024-05-30T02:03:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1715874971000,"updatedTime":1717034624000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":6,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":4.87,"words":1461},"filePathRelative":"zh/Data_Structure/01.md","localizedDate":"2024年5月16日","excerpt":"<h2>1. 什么是数据结构？</h2>\\n<h3>1.1 数据结构的定义</h3>\\n<p>基本定义：</p>\\n<ul>\\n<li>\\n<p>数据（Data）：描述客观事物的数和字符的集合。</p>\\n<ul>\\n<li>信息的载体</li>\\n<li>对客观事物符号化的表示</li>\\n<li>能够被计算机识别存储和加工</li>\\n</ul>\\n</li>\\n<li>\\n<p>数据元素（Data element）：作为数据的基本单位。也可以称为元素，记录，结点或定点。</p>\\n<ul>\\n<li>一个数据元素可由若干个数据项组成。</li>\\n<li>如：0003 李明 男 <code>2001/03/02</code>是李明的基本信息，也是由若干个数据项组成的数据元素。</li>\\n</ul>\\n</li>\\n<li>\\n<p>数据项（Data item)具有独立含义的数据最小单位，也称为字段和域。</p>\\n<ul>\\n<li><code>数据 &gt; 数据结构 &gt; 数据项，就像 学生表 &gt; 个人记录 &gt; 学号姓名…</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>数据对象（Data Object）性质相同的数据元素的集合，是数据的一个子集。<code>\\\\</code></p>\\n<ul>\\n<li>字母字符数据对象是集合<code>C={'A','B','C'...}</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>数据结构: 数据元素不是孤立存在的，他们存在着某种关系，数据元素相互之间的关系称为结构。是指相互之间存在一种或多种特定关系的数据元素集合。或者说，数据结构是带结构的数据元素的集合。</p>\\n</li>\\n</ul>","autoDesc":true}`);export{u as comp,b as data};

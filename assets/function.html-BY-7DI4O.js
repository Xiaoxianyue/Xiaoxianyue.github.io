import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as p,e as i,w as a,r as F,o as d,a as s,d as n}from"./app-CQgJ7OV3.js";const y="/assets/1fe2bc538494d80bc0d7813d28d60a6-xCQJsdbf.png",u="/assets/image-20240911213910027-Bm7nb000.png",v="/assets/5d1e06a6487a04685a6ed7fbd186d39-CJwADzMg.png",m={};function b(h,l){const c=F("CodeTabs");return d(),r("div",null,[l[4]||(l[4]=p('<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言"><span>1. 前言</span></a></h2><h3 id="_1-1-函数的定义" tabindex="-1"><a class="header-anchor" href="#_1-1-函数的定义"><span>1.1 函数的定义：</span></a></h3><ul><li>一段具有特定功能的、可以重复使用的代码</li><li>用函数名来表示并通过函数名完成功能调用</li></ul><h3 id="_1-2-使用函数的意义" tabindex="-1"><a class="header-anchor" href="#_1-2-使用函数的意义"><span>1.2 使用函数的意义：</span></a></h3><ul><li>代码的重复利用；</li><li>减少程序中的代码重复量，是代码更加容易被理解；</li><li>让代码更易于维护与更新</li></ul><h3 id="_1-3-函数的优点" tabindex="-1"><a class="header-anchor" href="#_1-3-函数的优点"><span>1.3 函数的优点</span></a></h3><p>通过把一个计算过程写入函数，再不断重复的调用函数，在修改函数代码时只用修改一次便可以影响全局，大大减少了修改代码时的工程量，方便快捷。</p><h3 id="_1-4-分类" tabindex="-1"><a class="header-anchor" href="#_1-4-分类"><span>1.4 分类</span></a></h3><img src="'+y+`" alt="1fe2bc538494d80bc0d7813d28d60a6" style="zoom:33%;"><h4 id="_1-4-1-常见的内置函数" tabindex="-1"><a class="header-anchor" href="#_1-4-1-常见的内置函数"><span>1.4.1 常见的内置函数</span></a></h4><ol><li><p>数据类型强制转换相关函数：</p><ul><li><code>int()</code></li><li><code>float()</code></li></ul></li><li><p>数字相关函数：</p><ul><li><code>abs()</code>：返回一个数的绝对值</li><li><code>round()</code>返回一个浮点数四舍五入后的值</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> abs</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;12&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">c </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 13</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(b</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">c)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>内置库</p><p>除了内置函数以外，Python还有内置的标准函数库。</p><p>当我们把这些额外的函数库导入到我们的程序里时，我们可以用这些函数库中提供的方法。</p><p>访问这些函数时需要以<strong>库名.函数</strong>的方式。</p><ul><li><p>开平方</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> math.sqrt(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(a)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>随机选取一个数字（整数）</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 随机生成一个1~100（包含1和100）的整数</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(a)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_2-用户自定义函数" tabindex="-1"><a class="header-anchor" href="#_2-用户自定义函数"><span>2. 用户自定义函数</span></a></h2><h3 id="_2-1-定义一个函数" tabindex="-1"><a class="header-anchor" href="#_2-1-定义一个函数"><span>2.1 定义一个函数</span></a></h3><blockquote><p>def 是 define 的缩写，表示定义一个函数。</p></blockquote><p>格式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> 函数名称</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    函数内的语句。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当我们需要这个函数时，直接写“函数名称 + ()” 就可。</strong></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>函数名称中间不要有空格，可以用下划线代替</p></div><h3 id="_2-2-适当的使用函数便于协作" tabindex="-1"><a class="header-anchor" href="#_2-2-适当的使用函数便于协作"><span>2.2 适当的使用函数便于协作</span></a></h3><p>有了函数之后可以实现原本不能实现的功能，比如我们写了一个功能很复杂的代码（实现经纬度坐标距离的计算）：</p>`,20)),i(c,{id:"145",data:[{id:"用函数封装起来的代码"},{id:"不用函数："}]},{title0:a(({value:e,isActive:o})=>l[0]||(l[0]=[n("用函数封装起来的代码")])),title1:a(({value:e,isActive:o})=>l[1]||(l[1]=[n("不用函数：")])),tab0:a(({value:e,isActive:o})=>l[2]||(l[2]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," math")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义地球半径（单位：公里）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"R "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 6371.0")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," haversine"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"lat1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"lon1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"lat2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"lon2"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 将纬度和经度从度数转换为弧度")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    lat1, lon1, lat2, lon2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," map"),s("span",{style:{color:"#F8F8F2"}},"(math.radians, [lat1, lon1, lat2, lon2])")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # Haversine公式")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    dlat "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," lat2 "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," lat1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    dlon "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," lon2 "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," lon1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    a "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," math.sin(dlat "),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F8F8F2"}},")"),s("span",{style:{color:"#F92672"}},"**"),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F92672"}}," +"),s("span",{style:{color:"#F8F8F2"}}," math.cos(lat1) "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," math.cos(lat2) "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," math.sin(dlon "),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F8F8F2"}},")"),s("span",{style:{color:"#F92672"}},"**"),s("span",{style:{color:"#AE81FF"}},"2")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    c "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," *"),s("span",{style:{color:"#F8F8F2"}}," math.atan2(math.sqrt(a), math.sqrt("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F92672"}}," -"),s("span",{style:{color:"#F8F8F2"}}," a))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 计算距离")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    distance "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," R "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," c")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," distance")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 示例：计算洛杉矶到纽约的距离")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lat1, lon1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 34.052235"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"118.243683"),s("span",{style:{color:"#88846F"}},"  # 洛杉矶")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lat2, lon2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 40.712776"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"74.005974"),s("span",{style:{color:"#88846F"}},"   # 纽约")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"distance "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," haversine(lat1, lon1, lat2, lon2)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"两个地点之间的距离为 '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"distance"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},":.2f"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' 公里"'),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[3]||(l[3]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," math")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义地球半径（单位：公里）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"R "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 6371.0")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 示例：计算洛杉矶到纽约的距离")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lat1, lon1 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 34.052235"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"118.243683"),s("span",{style:{color:"#88846F"}},"  # 洛杉矶")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lat2, lon2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 40.712776"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"74.005974"),s("span",{style:{color:"#88846F"}},"  # 纽约")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 将纬度和经度从度数转换为弧度")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lat1, lon1, lat2, lon2 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," map"),s("span",{style:{color:"#F8F8F2"}},"(math.radians, [lat1, lon1, lat2, lon2])")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# Haversine公式")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"dlat "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," lat2 "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," lat1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"dlon "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," lon2 "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#F8F8F2"}}," lon1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"a "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," math.sin(dlat "),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"**"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," +"),s("span",{style:{color:"#F8F8F2"}}," math.cos(lat1) "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," math.cos(lat2) "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," math.sin(dlon "),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"**"),s("span",{style:{color:"#AE81FF"}}," 2")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"c "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," *"),s("span",{style:{color:"#F8F8F2"}}," math.atan2(math.sqrt(a), math.sqrt("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F92672"}}," -"),s("span",{style:{color:"#F8F8F2"}}," a))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 计算距离")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"distance "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," R "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," c")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"两个地点之间的距离为 '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"distance"),s("span",{style:{color:"#66D9EF","font-style":"italic"}},":.2f"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' 公里"'),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[5]||(l[5]=p(`<p>使用函数的优点：</p><p>如果你要将代码共享给别人，只需要把函数代码保存在文件 <code>haversine.py</code>打包好，而别人只需要在 <code>haversine.py</code>文件的同路径下创建一个新的文件夹，写入如下代码就可以实现对于函数的调用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> haversine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">lat1, lon1 </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 34.052235</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">118.243683</span><span style="color:#88846F;">  # 洛杉矶</span></span>
<span class="line"><span style="color:#F8F8F2;">lat2, lon2 </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 40.712776</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">74.005974</span><span style="color:#88846F;">   # 纽约</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> haversine(lat1, lon1, lat2, lon2)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;两个地点之间的距离为 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">distance</span><span style="color:#66D9EF;font-style:italic;">:.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 公里&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整代码如下：</p><figure><img src="`+u+'" alt="image-20240911213910027" tabindex="0" loading="lazy"><figcaption>image-20240911213910027</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里是更好地帮助理解函数的作用。</p></div><h3 id="_2-3-利用参数向函数传递信息" tabindex="-1"><a class="header-anchor" href="#_2-3-利用参数向函数传递信息"><span>2.3 利用参数向函数传递信息</span></a></h3><h4 id="_2-3-1-参数调用代码结构" tabindex="-1"><a class="header-anchor" href="#_2-3-1-参数调用代码结构"><span>2.3.1 参数调用代码结构</span></a></h4><figure><img src="'+v+`" alt="5d1e06a6487a04685a6ed7fbd186d39" tabindex="0" loading="lazy"><figcaption>5d1e06a6487a04685a6ed7fbd186d39</figcaption></figure><h4 id="_2-3-2-多个参数" tabindex="-1"><a class="header-anchor" href="#_2-3-2-多个参数"><span>2.3.2 多个参数</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">的成绩是：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">grade</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">分。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#E6DB74;">&#39;Lily&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">99</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-关键字参数" tabindex="-1"><a class="header-anchor" href="#_2-3-3-关键字参数"><span>2.3.3 关键字参数</span></a></h4><p>上面实现了传入多个参数，但如果用户传入的参数位置不对，则导致得到的结果不对或出现报错。</p><p>一般发生于：用户不清楚函数具体参数功能或函数参数过多的情况下，则制定关键字参数即可。</p><ol><li>参数位置不对的情况</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">的成绩是：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">grade</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">分。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#AE81FF;">99</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;Lily&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># output</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F44747;">99的成绩是</span><span style="color:#F8F8F2;">：Lily分。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>位置不对的情况下报错</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#AE81FF;">99</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;Lily&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;C:\\Coder\\Lesson\\d.py&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    TestGrade(</span><span style="color:#AE81FF;">99</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;Lily&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;C:\\Coder\\Lesson\\d.py&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> TestGrade</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: unsupported operand </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(s) </span><span style="color:#F92672;">for</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;int&#39;</span><span style="color:#F92672;"> and</span><span style="color:#E6DB74;"> &#39;str&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么指定关键字让参数的传入不再出错？</p><p><mark>用’=‘符号相连</mark></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">99</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;Lily&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-部分关键字参数" tabindex="-1"><a class="header-anchor" href="#_2-3-4-部分关键字参数"><span>2.3.4 部分关键字参数</span></a></h4><p>如果选择关键词参数指定，则需要指定全部参数。如果只制定一部分参数的话，只能函数前半部分参数可以省略，后半部分不能被省略。</p><p>如果指定参数不全则报错：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;李雷&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">99</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 虽然位置是对的，但是没有全部指定是会报错的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要向函数传入多个参数时，只要排在前面的关键词指定一个参数，其后面的所有参数都要被指定。但是其前面的参数指不指定都可以。</p><p>通过下面三种情况说明：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">classroom</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;就读于&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> classroom </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;班。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;李雷&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 99</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">classroom</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;3&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">李雷的成绩是：</span><span style="color:#F44747;">99分</span><span style="color:#F8F8F2;">。就读于3班。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">classroom</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;就读于&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> classroom </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;班。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#E6DB74;">&#39;李雷&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 99</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">classroom</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;3&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">李雷的成绩是：</span><span style="color:#F44747;">99分</span><span style="color:#F8F8F2;">。就读于3班。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TestGrade</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">classroom</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;的成绩是：&#39;</span><span style="color:#F92672;"> +</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(grade) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;分。&#39;</span><span style="color:#F92672;"> +</span><span style="color:#E6DB74;"> &#39;就读于&#39;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> classroom </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;班。&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">TestGrade(</span><span style="color:#E6DB74;">&#39;李雷&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 99</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;3&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;C:\\Coder\\Lesson\\d.py&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#F8F8F2;">    TestGrade(</span><span style="color:#E6DB74;">&#39;李雷&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">grade</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 99</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;3&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">                                       ^</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">SyntaxError</span><span style="color:#F8F8F2;">: positional argument follows keyword argument</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-返回值——return" tabindex="-1"><a class="header-anchor" href="#_2-4-返回值——return"><span>2.4 返回值——return</span></a></h3><p>在 Python 中，<code>return</code>语句用于从函数中返回值并结束函数的执行。他可以返回一个或多个值，或者什么也不返回。在函数的执行过程中，当遇到 <code>return</code>语句是，函数将停止执行，并返回特定的值（如果有）。如果函数没有明确使用 <code>return</code>语句，函数默认会返回 <code>None</code></p><h4 id="_2-4-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-4-1-语法"><span>2.4.1 语法</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> 函数名</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">参数</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 函数体</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> 返回值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-返回单个值" tabindex="-1"><a class="header-anchor" href="#_2-4-2-返回单个值"><span>2.4.2 返回单个值</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> add</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> add(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，函数 <code>add</code>返回两个数的和。当调用 <code>add(3, 5)</code>的时候，函数返回 8.</p><h4 id="_2-4-3-返回多个值" tabindex="-1"><a class="header-anchor" href="#_2-4-3-返回多个值"><span>2.4.3 返回多个值</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_coordinates</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"><span style="color:#F8F8F2;">    y </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 20</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> x, y</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">x_coord, y_coord </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> get_coordinates()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(x_coord, y_coord)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里， <code>return</code> 语句返回了两个值，<code>x</code>和 <code>y</code>，并将他们分别赋值给 <code>x_coord</code>和 <code>y_coord</code></p><h4 id="_2-4-4-不返回值" tabindex="-1"><a class="header-anchor" href="#_2-4-4-不返回值"><span>2.4.4 不返回值</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> great</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Great&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> great()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">Great</span></span>
<span class="line"><span style="color:#AE81FF;">None</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中， <code>great</code>函数没有 <code>return</code>语句，因此它默认返回 <code>None</code>。</p><h4 id="_2-4-5-结束函数执行" tabindex="-1"><a class="header-anchor" href="#_2-4-5-结束函数执行"><span>2.4.5 结束函数执行</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> check_number</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#E6DB74;"> &#39;positive number&#39;</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#E6DB74;"> &#39;negative number&#39;</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;会不会执行？&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(check_number(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(check_number(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># output</span></span>
<span class="line"><span style="color:#F8F8F2;">positive number</span></span>
<span class="line"><span style="color:#F8F8F2;">negative number</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，<code>return</code>后面的代码都不会被执行。</p><p><strong>总结：</strong> <code>return</code>语句可以返回值并结束函数；</p><ul><li>如果没有指定 <code>return</code>，函数会返回 <code>None</code>；</li><li><code>return</code>可以返回单个值，多值，甚至什么也不返回。</li></ul><h3 id="_2-5-有无-return-的区别" tabindex="-1"><a class="header-anchor" href="#_2-5-有无-return-的区别"><span>2.5 有无 return 的区别</span></a></h3><h4 id="_2-5-1-场景1-函数需要返回计算结果" tabindex="-1"><a class="header-anchor" href="#_2-5-1-场景1-函数需要返回计算结果"><span>2.5.1 场景1：函数需要返回计算结果</span></a></h4><ol><li>有 <code>return</code>的情况</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> add</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> add(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>场景：在需要获取函数计算结果并在后续代码中使用的情况下，必须使用 <code>return</code>返回结果。</li><li>解释：<code>add</code>函数返回两个参数的和，调用 <code>add(3, 5)</code>返回 8，结果赋值给 <code>result</code>，随后可以用于其他操作。</li></ul><ol start="2"><li>无 <code>return</code>的情况</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> add_no_return</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> add_no_return(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>场景：函数只是执行某些操作（例如打印）而不需要返回任何值时，可以不使用 <code>return</code>。</li><li>解释：函数中没有 <code>return</code>，因此它执行 <code>print</code>后不返回任何值，<code>result</code>的值为 <code>None</code></li></ul><h4 id="_2-5-2-场景2-函数控制流程并根据条件返回值" tabindex="-1"><a class="header-anchor" href="#_2-5-2-场景2-函数控制流程并根据条件返回值"><span>2.5.2 场景2：函数控制流程并根据条件返回值</span></a></h4><ol><li>有 <code>return</code>的情况</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> check_even_or_odd</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#E6DB74;"> &#39;Even&#39;</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#E6DB74;"> &#39;Odd&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> check_even_or_odd(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>无<code>return</code>的情况</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> check_even_or_odd</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Even&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Odd&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> check_even_or_odd(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-3-复杂逻辑中的提前终止" tabindex="-1"><a class="header-anchor" href="#_2-5-3-复杂逻辑中的提前终止"><span>2.5.3 复杂逻辑中的提前终止</span></a></h4><ol><li><p>有 <code>return</code>提前终止</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find_first_even</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">numbers</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> numbers:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> num</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> find_first_even([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># output</span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>相较于Break，continue，return实现作用会更大。前两个操作对象仅限于当前循环，后者则是直接结束整个函数。</p>`,64))])}const f=t(m,[["render",b]]),D=JSON.parse('{"path":"/zh/python1v1/function.html","title":"14-函数","lang":"zh-CN","frontmatter":{"title":"14-函数","icon":"python","date":"2024-09-11T20:37:49.000Z","author":"XiaoXianYue","isOriginal":true,"category":["课堂笔记"],"tag":["课堂笔记"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1726063378000,"updatedTime":1726153868000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":2,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":7.53,"words":2260},"filePathRelative":"zh/python1v1/function.md","localizedDate":"2024年9月11日"}');export{f as comp,D as data};

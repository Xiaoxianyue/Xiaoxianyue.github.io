import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,b as s}from"./app-DF1mj1Vc.js";const t={},i=s(`<h2 id="_1-method" tabindex="-1"><a class="header-anchor" href="#_1-method"><span>1. Method</span></a></h2><h3 id="_1-1-coventry" tabindex="-1"><a class="header-anchor" href="#_1-1-coventry"><span>1.1 Coventry</span></a></h3><p>知识点：</p><ol><li><p>怎么创建一个方法？返回类型？</p></li><li><p>参数按值传递？按引用传递？（ref out in）</p></li><li><p>Recursion？</p></li><li><p>变量作用域？</p></li></ol><h3 id="_1-2-aiyc" tabindex="-1"><a class="header-anchor" href="#_1-2-aiyc"><span>1.2 AIYC</span></a></h3><ol><li><p>方法的声明？调用？</p></li><li><p>怎么在方法里添加参数？调用带参数的方法？多参数方法？</p></li><li><p>可选参数（为参数设置默认值的情况）？</p></li><li><p>命名参数？</p></li><li><p>参数的传递。同Coventry</p></li><li><p>方法的重载，以及重载调用（能不能返回值类型不同参数类型相同？）</p></li><li><p>递归</p></li></ol><h2 id="_2-class" tabindex="-1"><a class="header-anchor" href="#_2-class"><span>2. Class</span></a></h2><h3 id="_1-1-coventry-1" tabindex="-1"><a class="header-anchor" href="#_1-1-coventry-1"><span>1.1 Coventry</span></a></h3><ol><li><p>enum？调用enum里的值？</p></li><li><p>Structure。创建一个Structure？结构的初始值怎么赋？调用结构实例里的值？</p></li><li><p>Class。创建一个Class？类的构造函数和实例化？</p></li><li><p>怎么调用private变量？</p></li><li><p>static关键字</p></li><li><p>Default constructor长什么样子</p></li><li><p>重载（overloading）</p></li><li><p>access modifier。</p></li></ol><h3 id="_1-2-aiyc-1" tabindex="-1"><a class="header-anchor" href="#_1-2-aiyc-1"><span>1.2 AIYC</span></a></h3><ol><li>什么是类什么是对象</li><li>heap and stack</li><li>创建一个类？实例化一个对象？</li><li>封装。</li><li>不带参数的构造方法。（类的实例一被创造出来的时候就会调用并实现构造方法）代码记得吗？</li><li>带参数的构造方法。与上面的分别举例。</li></ol><p>下面输出什么?</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
  <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>get set用法.赋值和读取？好处？自动创建？</li></ol><h2 id="_3-intheritance" tabindex="-1"><a class="header-anchor" href="#_3-intheritance"><span>3. Intheritance</span></a></h2><h3 id="_3-1-coventry" tabindex="-1"><a class="header-anchor" href="#_3-1-coventry"><span>3.1 Coventry</span></a></h3><ol><li>继承实现的代码。</li><li>子类实现父类的代码（base）</li><li>子类override父类的代码</li><li>抽象方法</li></ol><h2 id="_4-interface" tabindex="-1"><a class="header-anchor" href="#_4-interface"><span>4. Interface</span></a></h2><ol><li>upcastinga downcasting</li><li>as &amp; is</li></ol><h2 id="_5-generics" tabindex="-1"><a class="header-anchor" href="#_5-generics"><span>5. Generics</span></a></h2><p>Boxing and Unboxing</p>`,21),l=[i];function o(p,c){return e(),a("div",null,l)}const d=n(t,[["render",o],["__file","review.html.vue"]]),h=JSON.parse(`{"path":"/zh/OOP/review.html","title":"Coventry-Summary","lang":"zh-CN","frontmatter":{"title":"Coventry-Summary","icon":"c","date":"2024-05-11T10:19:07.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. Method 1.1 Coventry 知识点： 怎么创建一个方法？返回类型？ 参数按值传递？按引用传递？（ref out in） Recursion？ 变量作用域？ 1.2 AIYC 方法的声明？调用？ 怎么在方法里添加参数？调用带参数的方法？多参数方法？ 可选参数（为参数设置默认值的情况）？ 命名参数？ 参数的传递。同Coventry 方法的...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/OOP/review.html"}],["meta",{"property":"og:site_name","content":"an istj's zone"}],["meta",{"property":"og:title","content":"Coventry-Summary"}],["meta",{"property":"og:description","content":"1. Method 1.1 Coventry 知识点： 怎么创建一个方法？返回类型？ 参数按值传递？按引用传递？（ref out in） Recursion？ 变量作用域？ 1.2 AIYC 方法的声明？调用？ 怎么在方法里添加参数？调用带参数的方法？多参数方法？ 可选参数（为参数设置默认值的情况）？ 命名参数？ 参数的传递。同Coventry 方法的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T07:05:21.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-11T10:19:07.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-11T07:05:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Coventry-Summary\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-11T10:19:07.000Z\\",\\"dateModified\\":\\"2024-05-11T07:05:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"headers":[{"level":2,"title":"1. Method","slug":"_1-method","link":"#_1-method","children":[{"level":3,"title":"1.1 Coventry","slug":"_1-1-coventry","link":"#_1-1-coventry","children":[]},{"level":3,"title":"1.2 AIYC","slug":"_1-2-aiyc","link":"#_1-2-aiyc","children":[]}]},{"level":2,"title":"2. Class","slug":"_2-class","link":"#_2-class","children":[{"level":3,"title":"1.1 Coventry","slug":"_1-1-coventry-1","link":"#_1-1-coventry-1","children":[]},{"level":3,"title":"1.2 AIYC","slug":"_1-2-aiyc-1","link":"#_1-2-aiyc-1","children":[]}]},{"level":2,"title":"3. Intheritance","slug":"_3-intheritance","link":"#_3-intheritance","children":[{"level":3,"title":"3.1 Coventry","slug":"_3-1-coventry","link":"#_3-1-coventry","children":[]}]},{"level":2,"title":"4. Interface","slug":"_4-interface","link":"#_4-interface","children":[]},{"level":2,"title":"5. Generics","slug":"_5-generics","link":"#_5-generics","children":[]}],"git":{"createdTime":1715411121000,"updatedTime":1715411121000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":1}]},"readingTime":{"minutes":1.51,"words":453},"filePathRelative":"zh/OOP/review.md","localizedDate":"2024年5月11日","excerpt":"<h2>1. Method</h2>\\n<h3>1.1 Coventry</h3>\\n<p>知识点：</p>\\n<ol>\\n<li>\\n<p>怎么创建一个方法？返回类型？</p>\\n</li>\\n<li>\\n<p>参数按值传递？按引用传递？（ref out in）</p>\\n</li>\\n<li>\\n<p>Recursion？</p>\\n</li>\\n<li>\\n<p>变量作用域？</p>\\n</li>\\n</ol>\\n<h3>1.2 AIYC</h3>\\n<ol>\\n<li>\\n<p>方法的声明？调用？</p>\\n</li>\\n<li>\\n<p>怎么在方法里添加参数？调用带参数的方法？多参数方法？</p>\\n</li>\\n<li>\\n<p>可选参数（为参数设置默认值的情况）？</p>\\n</li>\\n<li>\\n<p>命名参数？</p>\\n</li>\\n<li>\\n<p>参数的传递。同Coventry</p>\\n</li>\\n<li>\\n<p>方法的重载，以及重载调用（能不能返回值类型不同参数类型相同？）</p>\\n</li>\\n<li>\\n<p>递归</p>\\n</li>\\n</ol>","autoDesc":true}`);export{d as comp,h as data};

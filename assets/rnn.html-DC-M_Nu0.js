import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as t,a as s,d as n,o as e}from"./app-84lBMjzT.js";const p="/assets/image-20250414205126986-CtFPRWL-.png",Q="/assets/image-20250414205210467-F4fei2IV.png",r="/assets/image-20250414205441825-DKRpTPfQ.png",T="/assets/image-20250414210453017-ByxODyYj.png",i="/assets/image-20250414210536470-CQR_7-3d.png",c={},d={class:"MathJax",jax:"SVG",style:{position:"relative"}},m={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.325ex",height:"1.756ex",role:"img",focusable:"false",viewBox:"0 -694 2353.6 776","aria-hidden":"true"},F={class:"MathJax",jax:"SVG",style:{position:"relative"}},y={style:{"vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.16ex",height:"3.135ex",role:"img",focusable:"false",viewBox:"0 -1060.7 5374.7 1385.6","aria-hidden":"true"},u={class:"MathJax",jax:"SVG",style:{position:"relative"}},g={style:{"vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.16ex",height:"3.135ex",role:"img",focusable:"false",viewBox:"0 -1060.7 5374.7 1385.6","aria-hidden":"true"},h={class:"MathJax",jax:"SVG",style:{position:"relative"}},v={style:{"vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.59ex",height:"3.135ex",role:"img",focusable:"false",viewBox:"0 -1060.7 3796.8 1385.6","aria-hidden":"true"},H={class:"MathJax",jax:"SVG",display:"true",style:{position:"relative"}},L={style:{"vertical-align":"-0.654ex"},xmlns:"http://www.w3.org/2000/svg",width:"35.149ex",height:"2.765ex",role:"img",focusable:"false",viewBox:"0 -933 15535.8 1222","aria-hidden":"true"},b={class:"MathJax",jax:"SVG",style:{position:"relative"}},x={style:{"vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.16ex",height:"3.135ex",role:"img",focusable:"false",viewBox:"0 -1060.7 5374.7 1385.6","aria-hidden":"true"},f={class:"MathJax",jax:"SVG",style:{position:"relative"}},V={style:{"vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.16ex",height:"3.135ex",role:"img",focusable:"false",viewBox:"0 -1060.7 5374.7 1385.6","aria-hidden":"true"},D={class:"MathJax",jax:"SVG",style:{position:"relative"}},M={style:{"vertical-align":"-0.735ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.59ex",height:"3.135ex",role:"img",focusable:"false",viewBox:"0 -1060.7 3796.8 1385.6","aria-hidden":"true"},w={class:"MathJax",jax:"SVG",display:"true",style:{position:"relative"}},Z={style:{"vertical-align":"-0.604ex"},xmlns:"http://www.w3.org/2000/svg",width:"35.149ex",height:"2.715ex",role:"img",focusable:"false",viewBox:"0 -933 15535.8 1200","aria-hidden":"true"},E={class:"MathJax",jax:"SVG",style:{position:"relative"}},j={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.024ex",height:"2.244ex",role:"img",focusable:"false",viewBox:"0 -833.9 5314.5 991.7","aria-hidden":"true"},A={class:"MathJax",jax:"SVG",style:{position:"relative"}},R={style:{"vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.814ex",height:"2.244ex",role:"img",focusable:"false",viewBox:"0 -833.9 3895.8 991.7","aria-hidden":"true"},_={class:"MathJax",jax:"SVG",display:"true",style:{position:"relative"}},O={style:{"vertical-align":"-0.604ex"},xmlns:"http://www.w3.org/2000/svg",width:"14.282ex",height:"2.74ex",role:"img",focusable:"false",viewBox:"0 -944 6312.4 1211","aria-hidden":"true"},z={class:"MathJax",jax:"SVG",display:"true",style:{position:"relative"}},k={style:{"vertical-align":"-0.654ex"},xmlns:"http://www.w3.org/2000/svg",width:"17.675ex",height:"2.79ex",role:"img",focusable:"false",viewBox:"0 -944 7812.4 1233","aria-hidden":"true"};function B(X,a){return e(),l("div",null,[a[38]||(a[38]=t(`<h3 id="初始参数" tabindex="-1"><a class="header-anchor" href="#初始参数"><span>初始参数</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> os</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> math</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> urllib.request</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> torch.nn </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> nn</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> matplotlib.pyplot </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># 自动下载数据</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#F8F8F2;">file_path </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;timemachine.txt&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">url </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;http://d2l-data.s3-accelerate.amazonaws.com/timemachine.txt&quot;</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> os.path.exists(file_path):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Downloading dataset...&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    urllib.request.urlretrieve(url, file_path)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># 数据预处理</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#F92672;">with</span><span style="color:#66D9EF;"> open</span><span style="color:#F8F8F2;">(file_path, </span><span style="color:#E6DB74;">&#39;r&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">encoding</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;utf-8&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> f:</span></span>
<span class="line"><span style="color:#F8F8F2;">    text </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> f.read().lower()</span></span>
<span class="line"><span style="color:#F8F8F2;">text </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;&#39;</span><span style="color:#F8F8F2;">.join([line.strip() </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> line </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> text.split(</span><span style="color:#E6DB74;">&#39;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> line.strip()])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 构建词表</span></span>
<span class="line"><span style="color:#F8F8F2;">vocab </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">(text)))</span></span>
<span class="line"><span style="color:#F8F8F2;">vocab_size </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(vocab)</span></span>
<span class="line"><span style="color:#F8F8F2;">char2idx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {ch: i </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i, ch </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(vocab)}</span></span>
<span class="line"><span style="color:#F8F8F2;">idx2char </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {i: ch </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i, ch </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(vocab)}</span></span>
<span class="line"><span style="color:#F8F8F2;">corpus </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [char2idx[ch] </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> ch </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> text]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># 获取 mini-batch 数据</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_batch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">corpus</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">batch_size</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">num_steps</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(corpus) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> batch_size </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> num_steps </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    inputs, targets </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [], []</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(batch_size):</span></span>
<span class="line"><span style="color:#F8F8F2;">        idx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> num_steps</span></span>
<span class="line"><span style="color:#F8F8F2;">        inputs.append(corpus[idx:idx </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> num_steps])</span></span>
<span class="line"><span style="color:#F8F8F2;">        targets.append(corpus[idx </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:idx </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> num_steps </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> torch.tensor(inputs), torch.tensor(targets)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># RNN 模型定义</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">RNNModel</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">nn</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Module</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vocab_size</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">hidden_size</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        super</span><span style="color:#F8F8F2;">().</span><span style="color:#66D9EF;">__init__</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.embedding </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nn.Embedding(vocab_size, vocab_size)  </span><span style="color:#88846F;"># one-hot</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.rnn </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nn.RNN(vocab_size, hidden_size, </span><span style="color:#FD971F;font-style:italic;">batch_first</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.fc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nn.Linear(hidden_size, vocab_size)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> forward</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">state</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.embedding(x)</span></span>
<span class="line"><span style="color:#F8F8F2;">        out, state </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.rnn(x, state)</span></span>
<span class="line"><span style="color:#F8F8F2;">        out </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.fc(out)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> out, state</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> init_state</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">batch_size</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> torch.zeros(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, batch_size, hidden_size)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># 模型训练函数</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> train</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">model</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">corpus</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">num_epochs</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">batch_size</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">num_steps</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">lr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    optimizer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> torch.optim.Adam(model.parameters(), </span><span style="color:#FD971F;font-style:italic;">lr</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">lr)</span></span>
<span class="line"><span style="color:#F8F8F2;">    loss_fn </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nn.CrossEntropyLoss()</span></span>
<span class="line"><span style="color:#F8F8F2;">    perplexities </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> epoch </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, num_epochs </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> model.init_state(batch_size)</span></span>
<span class="line"><span style="color:#F8F8F2;">        X, Y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> get_batch(corpus, batch_size, num_steps)</span></span>
<span class="line"><span style="color:#F8F8F2;">        Y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Y.reshape(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        logits, state </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> model(X, state)</span></span>
<span class="line"><span style="color:#F8F8F2;">        logits </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> logits.reshape(</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, vocab_size)</span></span>
<span class="line"><span style="color:#F8F8F2;">        loss </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> loss_fn(logits, Y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        optimizer.zero_grad()</span></span>
<span class="line"><span style="color:#F8F8F2;">        loss.backward()</span></span>
<span class="line"><span style="color:#F8F8F2;">        optimizer.step()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        ppl </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> math.exp(loss.item())</span></span>
<span class="line"><span style="color:#F8F8F2;">        perplexities.append(ppl)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Epoch </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">epoch</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, Loss </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">loss.item()</span><span style="color:#66D9EF;font-style:italic;">:.4f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, Perplexity </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">ppl</span><span style="color:#66D9EF;font-style:italic;">:.2f</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> perplexities</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># 参数设置 &amp; 启动训练</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#F8F8F2;">hidden_size </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 128</span></span>
<span class="line"><span style="color:#F8F8F2;">batch_size </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 32</span></span>
<span class="line"><span style="color:#F8F8F2;">num_steps </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 35</span></span>
<span class="line"><span style="color:#F8F8F2;">lr </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1e-2</span></span>
<span class="line"><span style="color:#F8F8F2;">num_epochs </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">model </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> RNNModel(vocab_size, hidden_size)</span></span>
<span class="line"><span style="color:#F8F8F2;">perplexity_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> train(model, corpus, num_epochs, batch_size, num_steps, lr)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#88846F;"># 绘制 Perplexity 折线图</span></span>
<span class="line"><span style="color:#88846F;"># =========================</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.figure(</span><span style="color:#FD971F;font-style:italic;">figsize</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.plot(perplexity_list, </span><span style="color:#FD971F;font-style:italic;">marker</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.title(</span><span style="color:#E6DB74;">&quot;Perplexity over Epochs&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.xlabel(</span><span style="color:#E6DB74;">&quot;Epoch&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.ylabel(</span><span style="color:#E6DB74;">&quot;Perplexity&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.grid(</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.tight_layout()</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.savefig(</span><span style="color:#E6DB74;">&quot;perplexity_plot.png&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">plt.show()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><img src="`+p+'" alt="image-20250414205126986" style="zoom:33%;"><h3 id="改变隐藏层维度" tabindex="-1"><a class="header-anchor" href="#改变隐藏层维度"><span>改变隐藏层维度</span></a></h3><p>提高至 200：</p><img src="'+Q+'" alt="image-20250414205210467" style="zoom:33%;"><p>提高至 300：</p><img src="'+r+'" alt="image-20250414205441825" style="zoom:33%;"><table><thead><tr><th>维度</th><th>影响</th></tr></thead><tbody><tr><td>小（128）</td><td>记忆力中等，学习稳定，但不够强</td></tr><tr><td>中（200）</td><td>记忆力加强，捕捉依赖能力提升，表现更好 ✅</td></tr><tr><td>大（300）</td><td>参数数目更多，训练难度加大，<strong>可能不容易收敛</strong>或震荡</td></tr></tbody></table><p>我们选择最优参数，进一步调其他参数看看能不能越来越好。</p><h3 id="调整批量大小" tabindex="-1"><a class="header-anchor" href="#调整批量大小"><span>调整批量大小:</span></a></h3><p>32 调整为 16：</p><img src="'+T+'" alt="image-20250414210453017" style="zoom:33%;"><p>32 调整为 64：</p><img src="'+i+'" alt="image-20250414210536470" style="zoom:33%;"><table><thead><tr><th>Batch Size</th><th>收敛速度</th><th>波动性</th><th>最终 perplexity</th><th>特点</th></tr></thead><tbody><tr><td>16</td><td>很快</td><td>明显波动</td><td>10 左右</td><td>梯度噪声大，更随机</td></tr><tr><td>32</td><td>中等</td><td>偏稳定</td><td>最佳平衡点 ✅</td><td>实用性强</td></tr><tr><td>64</td><td>稳定但慢</td><td>极平稳</td><td>与32相近</td><td>占用内存高，适合大模型</td></tr></tbody></table><p>所以批量大小不在原有基础上修改。</p><h3 id="🧮-给定条件" tabindex="-1"><a class="header-anchor" href="#🧮-给定条件"><span>🧮 给定条件：</span></a></h3>',18)),s("ul",null,[a[3]||(a[3]=s("li",null,[n("输入序列长度："),s("strong",null,"5"),n("（不影响参数量，只影响运算步数）")],-1)),s("li",null,[a[2]||(a[2]=n("输入维度 ")),s("mjx-container",d,[(e(),l("svg",m,a[0]||(a[0]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1853.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1)]))),a[1]||(a[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"d"),s("mo",null,"="),s("mn",null,"1")])],-1))])]),a[4]||(a[4]=s("li",null,[n("隐藏层数："),s("strong",null,"2 层")],-1)),a[5]||(a[5]=s("li",null,[n("每层隐藏单元数："),s("strong",null,"3 个神经元")],-1)),a[6]||(a[6]=s("li",null,[n("输出维度："),s("strong",null,"1"),n("（每个时间步输出 1 维）")],-1)),a[7]||(a[7]=s("li",null,"使用标准 RNN 单元（假设是 vanilla RNN）",-1))]),a[39]||(a[39]=s("hr",null,null,-1)),a[40]||(a[40]=s("h2",{id:"✅-分层计算参数量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#✅-分层计算参数量"},[s("span",null,"✅ 分层计算参数量：")])],-1)),a[41]||(a[41]=s("h3",{id:"🔹-第一层-rnn-layer-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🔹-第一层-rnn-layer-1"},[s("span",null,"🔹 第一层 RNN（Layer 1）：")])],-1)),a[42]||(a[42]=s("p",null,[n("输入维度：1"),s("br"),n(" 隐藏维度：3")],-1)),a[43]||(a[43]=s("p",null,"RNN 的参数包括：",-1)),s("ul",null,[s("li",null,[s("mjx-container",F,[(e(),l("svg",y,a[8]||(a[8]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1136.2,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(977,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2367.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(3312.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g>',1)]))),a[9]||(a[9]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"W"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"x"),s("mi",null,"h")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"1"),s("mo",null,"×"),s("mn",null,"3")])])])],-1))]),a[10]||(a[10]=n("：输入到隐藏"))]),s("li",null,[s("mjx-container",u,[(e(),l("svg",g,a[11]||(a[11]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1136.2,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(977,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2367.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(3312.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g>',1)]))),a[12]||(a[12]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"W"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"h"),s("mi",null,"h")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3")])])])],-1))]),a[13]||(a[13]=n("：隐藏到隐藏"))]),s("li",null,[s("mjx-container",h,[(e(),l("svg",v,a[14]||(a[14]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(462,-317.1) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1693.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2638.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g>',1)]))),a[15]||(a[15]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"b"),s("mi",null,"h"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"3")])])])],-1))]),a[16]||(a[16]=n("：偏置项"))])]),a[44]||(a[44]=s("p",null,"合计：",-1)),s("mjx-container",H,[(e(),l("svg",L,a[17]||(a[17]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2444.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3444.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(4167.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(5167.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5889.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6889.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(7667.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8723.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(9445.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10445.8,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(11168,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(12168.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(12946,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="menclose" transform="translate(14001.8,0)"><g transform="translate(267, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g></g></g><rect x="33.5" y="-255.5" width="1467" height="1155" fill="none" stroke-width="67"></rect></g></g></g>',1)]))),a[18]||(a[18]=s("mjx-assistive-mml",{unselectable:"on",display:"block"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mn",null,"1"),s("mo",null,"×"),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"="),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"9"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"="),s("menclose",{notation:"box"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"15")])])])])])],-1))]),a[45]||(a[45]=s("hr",null,null,-1)),a[46]||(a[46]=s("h3",{id:"🔹-第二层-rnn-layer-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🔹-第二层-rnn-layer-2"},[s("span",null,"🔹 第二层 RNN（Layer 2）：")])],-1)),a[47]||(a[47]=s("p",null,[n("输入维度："),s("strong",null,"上层隐藏输出是 3"),s("br"),n(" 隐藏维度：3")],-1)),s("ul",null,[s("li",null,[s("mjx-container",b,[(e(),l("svg",x,a[19]||(a[19]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1136.2,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(977,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2367.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(3312.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g>',1)]))),a[20]||(a[20]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"W"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"x"),s("mi",null,"h")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3")])])])],-1))])]),s("li",null,[s("mjx-container",f,[(e(),l("svg",V,a[21]||(a[21]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1136.2,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(977,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2367.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(3312.4,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g>',1)]))),a[22]||(a[22]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"W"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"h"),s("mi",null,"h")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3")])])])],-1))])]),s("li",null,[s("mjx-container",D,[(e(),l("svg",M,a[23]||(a[23]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(462,-317.1) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mo" transform="translate(1693.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2638.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g>',1)]))),a[24]||(a[24]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msubsup",null,[s("mi",null,"b"),s("mi",null,"h"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{stretchy:"false"},"("),s("mn",null,"2"),s("mo",{stretchy:"false"},")")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"3")])])])],-1))])])]),a[48]||(a[48]=s("p",null,"合计：",-1)),s("mjx-container",w,[(e(),l("svg",Z,a[25]||(a[25]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2444.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3444.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(4167.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(5167.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5889.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6889.8,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(7667.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8723.3,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(9445.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(10445.8,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="mo" transform="translate(11168,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(12168.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(12946,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="menclose" transform="translate(14001.8,0)"><g transform="translate(267, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g><rect x="33.5" y="-233.5" width="1467" height="1133" fill="none" stroke-width="67"></rect></g></g></g>',1)]))),a[26]||(a[26]=s("mjx-assistive-mml",{unselectable:"on",display:"block"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"="),s("mn",null,"9"),s("mo",null,"+"),s("mn",null,"9"),s("mo",null,"+"),s("mn",null,"3"),s("mo",null,"="),s("menclose",{notation:"box"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"21")])])])])])],-1))]),a[49]||(a[49]=s("hr",null,null,-1)),a[50]||(a[50]=s("h3",{id:"🔹-输出层-对每个时间步",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🔹-输出层-对每个时间步"},[s("span",null,"🔹 输出层（对每个时间步）：")])],-1)),s("ul",null,[a[32]||(a[32]=s("li",null,"输入是第 2 层的隐藏状态：3 维",-1)),a[33]||(a[33]=s("li",null,"输出是 1 维",-1)),s("li",null,[a[31]||(a[31]=n("所以： ")),s("ul",null,[s("li",null,[s("mjx-container",E,[(e(),l("svg",j,a[27]||(a[27]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1057,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2307.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(3252.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g>',1)]))),a[28]||(a[28]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"W"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"o"),s("mi",null,"u"),s("mi",null,"t")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"1")])])])],-1))])]),s("li",null,[s("mjx-container",A,[(e(),l("svg",R,a[29]||(a[29]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1057,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1792.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2737.2,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="211D" d="M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(755,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g>',1)]))),a[30]||(a[30]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"b"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"o"),s("mi",null,"u"),s("mi",null,"t")])]),s("mo",null,"∈"),s("msup",null,[s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",{mathvariant:"double-struck"},"R")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"1")])])])],-1))])])])])]),a[51]||(a[51]=s("p",null,"合计：",-1)),s("mjx-container",_,[(e(),l("svg",O,a[34]||(a[34]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2444.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3444.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4222.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="menclose" transform="translate(5278.4,0)"><g transform="translate(267, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></g><rect x="33.5" y="-233.5" width="967" height="1144" fill="none" stroke-width="67"></rect></g></g></g>',1)]))),a[35]||(a[35]=s("mjx-assistive-mml",{unselectable:"on",display:"block"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"1"),s("mo",null,"+"),s("mn",null,"1"),s("mo",null,"="),s("menclose",{notation:"box"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"4")])])])])])],-1))]),a[52]||(a[52]=s("hr",null,null,-1)),a[53]||(a[53]=s("h2",{id:"✅-总参数量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#✅-总参数量"},[s("span",null,"✅ 总参数量：")])],-1)),a[54]||(a[54]=s("p",null,"第一层 + 第二层 + 输出层",-1)),s("mjx-container",z,[(e(),l("svg",k,a[36]||(a[36]=[t('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2222.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(3444.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4444.9,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(5222.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="menclose" transform="translate(6278.4,0)"><g transform="translate(267, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g><rect x="33.5" y="-255.5" width="1467" height="1166" fill="none" stroke-width="67"></rect></g></g></g>',1)]))),a[37]||(a[37]=s("mjx-assistive-mml",{unselectable:"on",display:"block"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mn",null,"15"),s("mo",null,"+"),s("mn",null,"21"),s("mo",null,"+"),s("mn",null,"4"),s("mo",null,"="),s("menclose",{notation:"box"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mstyle",{displaystyle:"true",scriptlevel:"0"},[s("mrow",{"data-mjx-texclass":"ORD"},[s("mn",null,"40")])])])])])],-1))]),a[55]||(a[55]=s("hr",null,null,-1)),a[56]||(a[56]=s("p",null,[n("✅ "),s("strong",null,"最终总参数量是："),n(),s("strong",null,"40")],-1)),a[57]||(a[57]=s("p",null,"如你使用的是 LSTM 或 GRU，参数会更多，需要分别计算门控结构。如果你需要计算 GRU/LSTM 的参数，我也可以帮你列出来！",-1))])}const q=o(c,[["render",B]]),S=JSON.parse(`{"path":"/zh/DeepThinking/rnn.html","title":"RNN模型训练","lang":"zh-CN","frontmatter":{"title":"RNN模型训练","icon":"alias","date":"2025-04-14T20:49:21.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三下","神经网络与深度学习"],"tag":["大三下","神经网络与深度学习"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"description":"初始参数 image-20250414205126986 改变隐藏层维度 提高至 200： image-20250414205210467 提高至 300： image-20250414205441825 我们选择最优参数，进一步调其他参数看看能不能越来越好。 调整批量大小: 32 调整为 16： image-20250414210453017 32 ...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/DeepThinking/rnn.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"RNN模型训练"}],["meta",{"property":"og:description","content":"初始参数 image-20250414205126986 改变隐藏层维度 提高至 200： image-20250414205210467 提高至 300： image-20250414205441825 我们选择最优参数，进一步调其他参数看看能不能越来越好。 调整批量大小: 32 调整为 16： image-20250414210453017 32 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-21T01:25:32.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"大三下"}],["meta",{"property":"article:tag","content":"神经网络与深度学习"}],["meta",{"property":"article:published_time","content":"2025-04-14T20:49:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-21T01:25:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RNN模型训练\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-14T20:49:21.000Z\\",\\"dateModified\\":\\"2025-07-21T01:25:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1753061132000,"updatedTime":1753061132000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":1,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":3.37,"words":1011},"filePathRelative":"zh/DeepThinking/rnn.md","localizedDate":"2025年4月14日","excerpt":"<h3>初始参数</h3>\\n<div class=\\"language-python line-numbers-mode has-collapsed-lines collapsed\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> os</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> math</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> random</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> urllib.request</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> torch</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> torch.nn </span><span style=\\"color:#F92672\\">as</span><span style=\\"color:#F8F8F2\\"> nn</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">import</span><span style=\\"color:#F8F8F2\\"> matplotlib.pyplot </span><span style=\\"color:#F92672\\">as</span><span style=\\"color:#F8F8F2\\"> plt</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 自动下载数据</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">file_path </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\"> \\"timemachine.txt\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">url </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\"> \\"http://d2l-data.s3-accelerate.amazonaws.com/timemachine.txt\\"</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">if</span><span style=\\"color:#F92672\\"> not</span><span style=\\"color:#F8F8F2\\"> os.path.exists(file_path):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">    print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E6DB74\\">\\"Downloading dataset...\\"</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    urllib.request.urlretrieve(url, file_path)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 数据预处理</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">with</span><span style=\\"color:#66D9EF\\"> open</span><span style=\\"color:#F8F8F2\\">(file_path, </span><span style=\\"color:#E6DB74\\">'r'</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">encoding</span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\">'utf-8'</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#F92672\\">as</span><span style=\\"color:#F8F8F2\\"> f:</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    text </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> f.read().lower()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">text </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\"> ''</span><span style=\\"color:#F8F8F2\\">.join([line.strip() </span><span style=\\"color:#F92672\\">for</span><span style=\\"color:#F8F8F2\\"> line </span><span style=\\"color:#F92672\\">in</span><span style=\\"color:#F8F8F2\\"> text.split(</span><span style=\\"color:#E6DB74\\">'</span><span style=\\"color:#AE81FF\\">\\\\n</span><span style=\\"color:#E6DB74\\">'</span><span style=\\"color:#F8F8F2\\">) </span><span style=\\"color:#F92672\\">if</span><span style=\\"color:#F8F8F2\\"> line.strip()])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 构建词表</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">vocab </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#66D9EF\\"> sorted</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">list</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">set</span><span style=\\"color:#F8F8F2\\">(text)))</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">vocab_size </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#66D9EF\\"> len</span><span style=\\"color:#F8F8F2\\">(vocab)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">char2idx </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> {ch: i </span><span style=\\"color:#F92672\\">for</span><span style=\\"color:#F8F8F2\\"> i, ch </span><span style=\\"color:#F92672\\">in</span><span style=\\"color:#66D9EF\\"> enumerate</span><span style=\\"color:#F8F8F2\\">(vocab)}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">idx2char </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> {i: ch </span><span style=\\"color:#F92672\\">for</span><span style=\\"color:#F8F8F2\\"> i, ch </span><span style=\\"color:#F92672\\">in</span><span style=\\"color:#66D9EF\\"> enumerate</span><span style=\\"color:#F8F8F2\\">(vocab)}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">corpus </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> [char2idx[ch] </span><span style=\\"color:#F92672\\">for</span><span style=\\"color:#F8F8F2\\"> ch </span><span style=\\"color:#F92672\\">in</span><span style=\\"color:#F8F8F2\\"> text]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 获取 mini-batch 数据</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">def</span><span style=\\"color:#A6E22E\\"> get_batch</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FD971F;font-style:italic\\">corpus</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">batch_size</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">num_steps</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    start </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> random.randint(</span><span style=\\"color:#AE81FF\\">0</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#66D9EF\\">len</span><span style=\\"color:#F8F8F2\\">(corpus) </span><span style=\\"color:#F92672\\">-</span><span style=\\"color:#F8F8F2\\"> batch_size </span><span style=\\"color:#F92672\\">*</span><span style=\\"color:#F8F8F2\\"> num_steps </span><span style=\\"color:#F92672\\">-</span><span style=\\"color:#AE81FF\\"> 1</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    inputs, targets </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> [], []</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    for</span><span style=\\"color:#F8F8F2\\"> i </span><span style=\\"color:#F92672\\">in</span><span style=\\"color:#66D9EF\\"> range</span><span style=\\"color:#F8F8F2\\">(batch_size):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        idx </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> start </span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#F8F8F2\\"> i </span><span style=\\"color:#F92672\\">*</span><span style=\\"color:#F8F8F2\\"> num_steps</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        inputs.append(corpus[idx:idx </span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#F8F8F2\\"> num_steps])</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        targets.append(corpus[idx </span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#AE81FF\\"> 1</span><span style=\\"color:#F8F8F2\\">:idx </span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#F8F8F2\\"> num_steps </span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#AE81FF\\"> 1</span><span style=\\"color:#F8F8F2\\">])</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    return</span><span style=\\"color:#F8F8F2\\"> torch.tensor(inputs), torch.tensor(targets)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># RNN 模型定义</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">class</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">RNNModel</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#A6E22E;font-style:italic;text-decoration:underline\\">nn</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#A6E22E;font-style:italic;text-decoration:underline\\">Module</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">    def</span><span style=\\"color:#66D9EF\\"> __init__</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FD971F;font-style:italic\\">self</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">vocab_size</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">hidden_size</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">        super</span><span style=\\"color:#F8F8F2\\">().</span><span style=\\"color:#66D9EF\\">__init__</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FD971F\\">        self</span><span style=\\"color:#F8F8F2\\">.embedding </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> nn.Embedding(vocab_size, vocab_size)  </span><span style=\\"color:#88846F\\"># one-hot</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FD971F\\">        self</span><span style=\\"color:#F8F8F2\\">.rnn </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> nn.RNN(vocab_size, hidden_size, </span><span style=\\"color:#FD971F;font-style:italic\\">batch_first</span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\">True</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FD971F\\">        self</span><span style=\\"color:#F8F8F2\\">.fc </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> nn.Linear(hidden_size, vocab_size)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">    def</span><span style=\\"color:#A6E22E\\"> forward</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FD971F;font-style:italic\\">self</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">x</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">state</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        x </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#FD971F\\"> self</span><span style=\\"color:#F8F8F2\\">.embedding(x)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        out, state </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#FD971F\\"> self</span><span style=\\"color:#F8F8F2\\">.rnn(x, state)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        out </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#FD971F\\"> self</span><span style=\\"color:#F8F8F2\\">.fc(out)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">        return</span><span style=\\"color:#F8F8F2\\"> out, state</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">    def</span><span style=\\"color:#A6E22E\\"> init_state</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FD971F;font-style:italic\\">self</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">batch_size</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">        return</span><span style=\\"color:#F8F8F2\\"> torch.zeros(</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">, batch_size, hidden_size)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 模型训练函数</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">def</span><span style=\\"color:#A6E22E\\"> train</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#FD971F;font-style:italic\\">model</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">corpus</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">num_epochs</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">batch_size</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">num_steps</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#FD971F;font-style:italic\\">lr</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    optimizer </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> torch.optim.Adam(model.parameters(), </span><span style=\\"color:#FD971F;font-style:italic\\">lr</span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\">lr)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    loss_fn </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> nn.CrossEntropyLoss()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    perplexities </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> []</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    for</span><span style=\\"color:#F8F8F2\\"> epoch </span><span style=\\"color:#F92672\\">in</span><span style=\\"color:#66D9EF\\"> range</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">, num_epochs </span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#AE81FF\\"> 1</span><span style=\\"color:#F8F8F2\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        state </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> model.init_state(batch_size)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        X, Y </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> get_batch(corpus, batch_size, num_steps)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        Y </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> Y.reshape(</span><span style=\\"color:#F92672\\">-</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        logits, state </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> model(X, state)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        logits </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> logits.reshape(</span><span style=\\"color:#F92672\\">-</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">, vocab_size)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        loss </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> loss_fn(logits, Y)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        optimizer.zero_grad()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        loss.backward()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        optimizer.step()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        ppl </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> math.exp(loss.item())</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        perplexities.append(ppl)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">        print</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#66D9EF;font-style:italic\\">f</span><span style=\\"color:#E6DB74\\">\\"Epoch </span><span style=\\"color:#AE81FF\\">{</span><span style=\\"color:#F8F8F2\\">epoch</span><span style=\\"color:#AE81FF\\">}</span><span style=\\"color:#E6DB74\\">, Loss </span><span style=\\"color:#AE81FF\\">{</span><span style=\\"color:#F8F8F2\\">loss.item()</span><span style=\\"color:#66D9EF;font-style:italic\\">:.4f</span><span style=\\"color:#AE81FF\\">}</span><span style=\\"color:#E6DB74\\">, Perplexity </span><span style=\\"color:#AE81FF\\">{</span><span style=\\"color:#F8F8F2\\">ppl</span><span style=\\"color:#66D9EF;font-style:italic\\">:.2f</span><span style=\\"color:#AE81FF\\">}</span><span style=\\"color:#E6DB74\\">\\"</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    return</span><span style=\\"color:#F8F8F2\\"> perplexities</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 参数设置 &amp; 启动训练</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">hidden_size </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\"> 128</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">batch_size </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\"> 32</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">num_steps </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\"> 35</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">lr </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\"> 1e-2</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">num_epochs </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#AE81FF\\"> 20</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">model </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> RNNModel(vocab_size, hidden_size)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">perplexity_list </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> train(model, corpus, num_epochs, batch_size, num_steps, lr)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># 绘制 Perplexity 折线图</span></span>\\n<span class=\\"line\\"><span style=\\"color:#88846F\\"># =========================</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.figure(</span><span style=\\"color:#FD971F;font-style:italic\\">figsize</span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#AE81FF\\">8</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">5</span><span style=\\"color:#F8F8F2\\">))</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.plot(perplexity_list, </span><span style=\\"color:#FD971F;font-style:italic\\">marker</span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#E6DB74\\">'o'</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.title(</span><span style=\\"color:#E6DB74\\">\\"Perplexity over Epochs\\"</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.xlabel(</span><span style=\\"color:#E6DB74\\">\\"Epoch\\"</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.ylabel(</span><span style=\\"color:#E6DB74\\">\\"Perplexity\\"</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.grid(</span><span style=\\"color:#AE81FF\\">True</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.tight_layout()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.savefig(</span><span style=\\"color:#E6DB74\\">\\"perplexity_plot.png\\"</span><span style=\\"color:#F8F8F2\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">plt.show()</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div><div class=\\"collapsed-lines\\"></div></div>","autoDesc":true}`);export{q as comp,S as data};

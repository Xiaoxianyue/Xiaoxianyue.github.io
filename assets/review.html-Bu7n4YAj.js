import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as e}from"./app-COYsNQIt.js";const p={};function o(i,s){return e(),a("div",null,s[0]||(s[0]=[l(`<p>任务：泛型，最后那个题目（在数组中的应用）；where关键字那两个代码；搞懂Event调用逻辑；</p><h2 id="_1-method" tabindex="-1"><a class="header-anchor" href="#_1-method"><span>1. Method</span></a></h2><h3 id="_1-1-coventry" tabindex="-1"><a class="header-anchor" href="#_1-1-coventry"><span>1.1 Coventry</span></a></h3><p>知识点：</p><ol><li><p>怎么创建一个方法？返回类型？</p></li><li><p>参数按值传递？按引用传递？（ref out in）</p></li><li><p>Recursion？</p></li><li><p>变量作用域？</p></li></ol><h3 id="_1-2-aiyc" tabindex="-1"><a class="header-anchor" href="#_1-2-aiyc"><span>1.2 AIYC</span></a></h3><ol><li><p>方法的声明？调用？</p></li><li><p>怎么在方法里添加参数？调用带参数的方法？多参数方法？</p></li><li><p>可选参数（为参数设置默认值的情况）？</p></li><li><p>命名参数？</p></li><li><p>参数的传递。同Coventry</p></li><li><p>方法的重载，以及重载调用（能不能返回值类型不同参数类型相同？）</p></li><li><p>递归</p></li></ol><h2 id="_2-class" tabindex="-1"><a class="header-anchor" href="#_2-class"><span>2. Class</span></a></h2><h3 id="_1-1-coventry-1" tabindex="-1"><a class="header-anchor" href="#_1-1-coventry-1"><span>1.1 Coventry</span></a></h3><ol><li><p>enum？调用enum里的值？</p></li><li><p>Structure。创建一个Structure？结构的初始值怎么赋？调用结构实例里的值？</p></li><li><p>Class。创建一个Class？类的构造函数和实例化？</p></li><li><p>怎么调用private变量？</p></li><li><p>static关键字</p></li><li><p>Default constructor长什么样子</p></li><li><p>重载（overloading）</p></li><li><p>access modifier。</p></li></ol><h3 id="_1-2-aiyc-1" tabindex="-1"><a class="header-anchor" href="#_1-2-aiyc-1"><span>1.2 AIYC</span></a></h3><ol><li>什么是类什么是对象</li><li>heap and stack</li><li>创建一个类？实例化一个对象？</li><li>封装。</li><li>不带参数的构造方法。（类的实例一被创造出来的时候就会调用并实现构造方法）代码记得吗？</li><li>带参数的构造方法。与上面的分别举例。</li></ol><p>下面输出什么?</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Dog</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#A6E22E;"> Dog</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  { Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#A6E22E;"> Dog</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">  { Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(name); }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span>  </span><span style="color:#A6E22E;text-decoration:underline;">Dog</span><span style="color:#F8F8F2;"> d </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Dog</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;2&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>get set用法.赋值和读取？好处？自动创建？</li></ol><h2 id="_3-intheritance" tabindex="-1"><a class="header-anchor" href="#_3-intheritance"><span>3. Intheritance</span></a></h2><h3 id="_3-1-coventry" tabindex="-1"><a class="header-anchor" href="#_3-1-coventry"><span>3.1 Coventry</span></a></h3><ol><li>继承实现的代码。</li><li>子类实现父类的代码（base）</li><li>子类override父类的代码</li><li>抽象方法</li></ol><h2 id="_4-interface" tabindex="-1"><a class="header-anchor" href="#_4-interface"><span>4. Interface</span></a></h2><ol><li>upcasting downcasting</li><li>as &amp; is</li></ol><h2 id="_5-generics" tabindex="-1"><a class="header-anchor" href="#_5-generics"><span>5. Generics</span></a></h2><ol><li><p>Boxing and Unboxing</p></li><li><p>完成一个多态的代码</p></li><li><p>在数组中的应用</p></li><li><p>在继承中的运用</p></li><li><p>where 关键字</p></li></ol><h2 id="_6-delegate" tabindex="-1"><a class="header-anchor" href="#_6-delegate"><span>6. delegate</span></a></h2><ol><li>委托的实现代码</li><li>委托添加删除方法</li><li>Invoke</li><li>Generic Delegate</li><li>Event</li></ol><h2 id="_7-匿名方法" tabindex="-1"><a class="header-anchor" href="#_7-匿名方法"><span>7. 匿名方法</span></a></h2><ol><li><p>基本表示法</p></li><li><p>将委托所代表的参数作为参数进行转移</p></li><li><p>匿名方法的参数</p></li><li><p>整个代码实现</p></li><li><p>lambda 表达式</p></li><li><p>lambda参数，隐式参数。</p></li><li><p>唯一参数，默认参数</p></li></ol><h2 id="_8-练习-atm机" tabindex="-1"><a class="header-anchor" href="#_8-练习-atm机"><span>8. 练习：ATM机</span></a></h2><p>请设定您的初始账户余额: 9999999<br> 请输入您的PIN码以继续：1314<br> PIN码错误，请重试。<br> 请输入您的PIN码以继续：1234</p><p>欢迎使用ATM机系统</p><ol><li>查看余额</li><li>存款</li><li>取款</li><li>退出<br> 请输入您的选择（1-4）：1<br> 您的账户余额为：$9999999.00</li></ol><p>欢迎使用ATM机系统</p><ol><li>查看余额</li><li>存款</li><li>取款</li><li>退出<br> 请输入您的选择（1-4）：2<br> 请输入存款金额：1<br> 存款成功！您的新余额为：$10000000.00</li></ol><p>欢迎使用ATM机系统</p><ol><li>查看余额</li><li>存款</li><li>取款</li><li>退出<br> 请输入您的选择（1-4）：3<br> 请输入取款金额：1<br> 取款成功！您的新余额为：$9999999.00</li></ol><p>欢迎使用ATM机系统</p><ol><li>查看余额</li><li>存款</li><li>取款</li><li>退出<br> 请输入您的选择（1-4）：4<br> 感谢使用我们的ATM服务，再见！</li></ol><p>Process finished with exit code 0</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> balance;</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> pin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Account</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> balance)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FD971F;">        this</span><span style="color:#F8F8F2;">.balance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> balance;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> bool</span><span style="color:#A6E22E;"> Checkpin</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> pin)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> pin </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;123&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#A6E22E;"> Deposit</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入存款金额：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> position </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Convert.</span><span style="color:#A6E22E;">ToInt32</span><span style="color:#F8F8F2;">(Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">        balance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> position;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> balance;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#A6E22E;"> Withdrawal</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入取款金额：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> negation </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Convert.</span><span style="color:#A6E22E;">ToInt32</span><span style="color:#F8F8F2;">(Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (negation </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> balance)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;余额不足！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> balance;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        balance </span><span style="color:#F92672;">-=</span><span style="color:#F8F8F2;"> negation;</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> balance;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;"> account </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">999999</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的密码：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        account.pin </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (account.</span><span style="color:#A6E22E;">Checkpin</span><span style="color:#F8F8F2;">(account.pin))</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F92672;">            bool</span><span style="color:#F8F8F2;"> exit </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">            while</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">exit)</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;欢迎使用ATM机！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;1.查看余额&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;2.存款&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;3.取款&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;4.退出&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请选择需要的服务的序号：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                int</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Convert.</span><span style="color:#A6E22E;">ToInt32</span><span style="color:#F8F8F2;">(Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">                switch</span><span style="color:#F8F8F2;"> (n)</span></span>
<span class="line"><span style="color:#F8F8F2;">                {</span></span>
<span class="line"><span style="color:#F92672;">                    case</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;当前余额：&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> account.balance);</span></span>
<span class="line"><span style="color:#F92672;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">                    case</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;存款后余额：&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> account.</span><span style="color:#A6E22E;">Deposit</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F92672;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">                    case</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;取款后余额：&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> account.</span><span style="color:#A6E22E;">Withdrawal</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F92672;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">                    case</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;感谢使用我们的ATM服务，再见！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">                        exit </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">                    default</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;无效的选项，请重新选择！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F92672;">        else</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码错误&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_9-题目名称-温度监控系统" tabindex="-1"><a class="header-anchor" href="#_9-题目名称-温度监控系统"><span>9. 题目名称：温度监控系统</span></a></h2><p><strong>问题描述：</strong><br> 设计一个温度监控系统，当温度超出设定的安全范围时，系统应自动发送警报。你需要使用C#来实现这个功能。</p><p><strong>基本要求：</strong></p><ol><li>创建一个名为<code>TemperatureSensor</code>的类，它包含一个名为<code>CurrentTemperature</code>的属性和一个名为<code>TemperatureChanged</code>的事件。</li><li><code>CurrentTemperature</code>的设值器中应触发<code>TemperatureChanged</code>事件，只有在温度与上次读数不同时才触发。</li><li>创建一个名为<code>Alarm</code>的类，该类订阅<code>TemperatureSensor</code>的<code>TemperatureChanged</code>事件，并在温度超过100度或低于-10度时发出警报。</li></ol><p><strong>进阶要求：</strong></p><ul><li>添加一个功能，允许<code>Alarm</code>类在警报时记录日志到一个文件中。</li><li>提供一个用户界面（可以是命令行界面），允许用户输入温度值并显示警报状态。</li></ul><p><strong>评估标准：</strong></p><ul><li>代码的清晰度和可读性。</li><li>事件处理机制的正确实现。</li><li>进阶功能的完整性。</li></ul><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;text-decoration:underline;">IO</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 温度传感器类</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TemperatureSensor</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    private</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> _currentTemperature;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // 温度变化时触发的事件</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#66D9EF;font-style:italic;"> event</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">EventHandler</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; TemperatureChanged;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // 当前温度的属性</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> CurrentTemperature</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> _currentTemperature; }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        set</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#88846F;">            // 当温度发生变化时，触发事件</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (_currentTemperature </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> value)</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                _currentTemperature </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">                TemperatureChanged</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">Invoke</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, _currentTemperature);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 警报系统类</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Alarm</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Alarm</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">TemperatureSensor</span><span style="color:#F8F8F2;"> sensor)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#88846F;">        // 订阅温度变化事件</span></span>
<span class="line"><span style="color:#F8F8F2;">        sensor.TemperatureChanged </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> OnTemperatureChanged;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    private</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> OnTemperatureChanged</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">object</span><span style="color:#F8F8F2;"> sender, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> newTemperature)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#88846F;">        // 温度超出设定范围时，触发警报</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (newTemperature </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 100</span><span style="color:#F92672;"> ||</span><span style="color:#F8F8F2;"> newTemperature </span><span style="color:#F92672;">&lt;</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">$&quot;警报: 温度异常！当前温度为 {</span><span style="color:#F8F8F2;">newTemperature</span><span style="color:#E6DB74;">} 度。&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">            LogTemperature</span><span style="color:#F8F8F2;">(newTemperature);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F92672;">        else</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">$&quot;当前温度为 {</span><span style="color:#F8F8F2;">newTemperature</span><span style="color:#E6DB74;">} 度。一切正常。&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // 记录温度异常到日志文件</span></span>
<span class="line"><span style="color:#F92672;">    private</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> LogTemperature</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> temperature)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        string</span><span style="color:#F8F8F2;"> path </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;TemperatureLog.txt&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        using</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;text-decoration:underline;">StreamWriter</span><span style="color:#F8F8F2;"> writer </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">StreamWriter</span><span style="color:#F8F8F2;">(path, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            writer.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">$&quot;警报时间: {</span><span style="color:#F8F8F2;">DateTime</span><span style="color:#E6DB74;">.</span><span style="color:#F8F8F2;">Now</span><span style="color:#E6DB74;">}, 温度: {</span><span style="color:#F8F8F2;">temperature</span><span style="color:#E6DB74;">}&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 主程序</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">TemperatureSensor</span><span style="color:#F8F8F2;"> sensor </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">TemperatureSensor</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Alarm</span><span style="color:#F8F8F2;"> alarm </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Alarm</span><span style="color:#F8F8F2;">(sensor);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 循环获取用户输入的温度并更新传感器状态</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入新的温度值 (整数)：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">            int</span><span style="color:#F8F8F2;"> newTemperature;</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">TryParse</span><span style="color:#F8F8F2;">(Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">(), </span><span style="color:#F92672;">out</span><span style="color:#F8F8F2;"> newTemperature))</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                sensor.CurrentTemperature </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> newTemperature;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F92672;">            else</span></span>
<span class="line"><span style="color:#F8F8F2;">            {</span></span>
<span class="line"><span style="color:#F8F8F2;">                Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入有效的整数温度值！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li><p><strong>事件声明：</strong> <code>public event EventHandler&lt;int&gt; TemperatureChanged;</code></p><p>在 <code>TemperatureSensor</code> 类中，声明了一个名为<code>TemperatureChanged</code>的事件。这里使用了系统提供的泛型委托<code>EventHandler&lt;T&gt;</code>，其定义为一个接受两个参数（一个 <code>object</code> 和一个泛型参数 <code>T</code> ）的方法。在这个例子中，<code>T</code> 被指定为 <code>int</code> 类型，对应温度值。</p></li><li><p><strong>事件的订阅</strong>: <code>sensor.TemperatureChanged += OnTemperatureChanged;</code></p><p>在 <code>Alarm</code> 类的构造函数中，将 <code>OnTemperatureChanged</code> 方法绑定到 <code>TemperatureSensor</code> 的 <code>TemperatureChanged</code> 事件。这里的 <code>+=</code> 操作符用于添加一个事件处理器，即把 <code>OnTemperatureChanged</code> 方法作为委托绑定到 <code>TemperatureChanged</code> 事件。</p></li><li><p><strong>事件处理方法</strong>: <code>private void OnTemperatureChanged(object sender, int newTemperature)</code></p><p><code>OnTemperatureChanged</code> 是 <code>Alarm</code> 类定义的一个方法，用来响应温度变化的事件。此方法的签名与 <code>EventHandler&lt;int&gt;</code> 委托的要求一致（接受一个 <code>object</code> 和一个 <code>int</code> 作为参数），因此它可以作为事件的处理方法。</p></li><li><p><code>TemperatureChanged?.Invoke(this, _currentTemperature);</code>：</p><ul><li>Invoke：触发事件</li><li><strong>this</strong>: 关键字 <code>this</code> 代表当前类的实例，也就是 <code>TemperatureSensor</code> 类的一个对象。在事件触发时，传递 <code>this</code> 作为事件的发送者或来源。这是事件模式中常见的做法，允许事件的接收者知道事件是从哪个对象发出的。</li><li><strong>_currentTemperature</strong>: 这个是 <code>TemperatureSensor</code> 类中的私有字段，存储当前的温度值。当温度值发生变化时，这个新的温度值通过事件参数传递给事件的处理方法。在这个案例中，<code>_currentTemperature</code> 是一个整数（int），代表当前的温度。</li></ul></li></ul><h2 id="_10-泛型" tabindex="-1"><a class="header-anchor" href="#_10-泛型"><span>10. 泛型</span></a></h2><h3 id="_10-1-aiyc" tabindex="-1"><a class="header-anchor" href="#_10-1-aiyc"><span>10.1 Aiyc</span></a></h3><p>C# 中的泛型是一种非常强大的特性，它允许你编写代码时使用占位符代替具体的数据类型。使用泛型可以增强代码的可重用性、类型安全和性能。下面是关于C# 泛型的一些基础概念和使用方式：</p><ol><li>什么是泛型？</li></ol><p>泛型允许你定义一个类、接口或方法时延迟指定一个或多个类型。这些类型将在创建类的实例或调用方法时指定。通过这种方式，你可以使用一个类或方法处理多种数据类型，而不需要为每种数据类型编写重复的代码。</p><ol start="2"><li>泛型类和接口</li></ol><p>泛型类是在定义类时不指定具体类型的类。泛型接口类似。它们都使用类型参数，通常用尖括号（<code>&lt;&gt;</code>）表示。例如，定义一个可以存储任何类型的简单泛型类 <code>Box</code>：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    private</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> content;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Pack</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> item)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        content </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> item;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#A6E22E;"> Unpack</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> content;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>T</code> 是一个占位符，代表将来某个具体的数据类型。使用这个类时，你可以指定任何类型：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; intBox </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">intBox.</span><span style="color:#A6E22E;">Pack</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt; stringBox </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">stringBox.</span><span style="color:#A6E22E;">Pack</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;hello&quot;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>泛型方法</li></ol><p>泛型也可以用于方法。泛型方法允许在调用方法时指定一个或多个类型参数。例如：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Swap</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#F92672;">ref</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> a, </span><span style="color:#F92672;">ref</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> b)</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> temp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">    a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">    b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> temp;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>Swap</code> 方法可以用于交换任何类型的两个值：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, y </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#A6E22E;">Swap</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">ref</span><span style="color:#F8F8F2;"> x, </span><span style="color:#F92672;">ref</span><span style="color:#F8F8F2;"> y); </span><span style="color:#88846F;">// x = 2, y = 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> first </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;first&quot;</span><span style="color:#F8F8F2;">, second </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;second&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#A6E22E;">Swap</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">ref</span><span style="color:#F8F8F2;"> first, </span><span style="color:#F92672;">ref</span><span style="color:#F8F8F2;"> second); </span><span style="color:#88846F;">// first = &quot;second&quot;, second = &quot;first&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>泛型约束</li></ol><p>泛型约束用于限制泛型类型参数可以表示的数据类型。这可以通过 <code>where</code> 关键字实现。例如，你可能只希望某个泛型类能用于实现了某个接口的类型：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">where</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> : </span><span style="color:#A6E22E;text-decoration:underline;">IComparable</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    private</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> content;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> bool</span><span style="color:#A6E22E;"> IsGreaterThan</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> other)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> content.</span><span style="color:#A6E22E;">CompareTo</span><span style="color:#F8F8F2;">(other) </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中的 <code>Box</code> 类只接受实现了 <code>IComparable</code> 接口的类型作为泛型参数。</p><ol start="5"><li>泛型和性能</li></ol><p>使用泛型可以提高应用程序的性能。泛型在编译时就已经确定了类型，因此执行时不需要进行额外的类型检查或装箱操作（将值类型转换为引用类型）。这使得泛型版本的代码通常比它们的非泛型对应版本更快、更高效。</p><h3 id="_10-2-题目描述" tabindex="-1"><a class="header-anchor" href="#_10-2-题目描述"><span>10.2 题目描述</span></a></h3><p>创建一个泛型类 <code>Repository&lt;T&gt;</code>，该类将用作数据存储的简单泛型仓库。你需要实现以下功能：</p><ol><li><strong>添加元素</strong>：通过一个 <code>Add</code> 方法添加新元素到仓库中。</li><li><strong>检索元素</strong>：通过 <code>GetAt</code> 方法根据索引检索仓库中的元素。</li><li><strong>获取总数</strong>：一个属性 <code>Count</code> 用来获取仓库中元素的总数。</li></ol><h3 id="要求" tabindex="-1"><a class="header-anchor" href="#要求"><span>要求</span></a></h3><ol><li>使用泛型类 <code>Repository&lt;T&gt;</code> 来实现存储机制，内部可以使用 <code>List&lt;T&gt;</code> 来存储数据。</li><li>确保类中的方法和属性正确使用泛型类型 <code>T</code>。</li></ol><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;text-decoration:underline;">Collections</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;text-decoration:underline;">Generic</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 定义一个泛型类 Repository&lt;T&gt;，其中 T 是泛型类型参数</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Repository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#88846F;">    // 使用 List&lt;T&gt; 来存储数据，这里的 T 将代表任意指定的数据类型</span></span>
<span class="line"><span style="color:#F92672;">    private</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; items </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">List</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // Add 方法允许向仓库中添加新元素</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Add</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> item)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        items.</span><span style="color:#A6E22E;">Add</span><span style="color:#F8F8F2;">(item); </span><span style="color:#88846F;">// 将元素添加到 List&lt;T&gt; 的尾部</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // GetAt 方法根据索引返回仓库中的元素</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#A6E22E;"> GetAt</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> index)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (index </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> &amp;&amp;</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> items.Count) </span><span style="color:#88846F;">// 检查索引是否有效</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> items[index]; </span><span style="color:#88846F;">// 返回指定索引的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#88846F;">        // 如果索引无效，抛出异常</span></span>
<span class="line"><span style="color:#F92672;">        throw</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ArgumentOutOfRangeException</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">nameof</span><span style="color:#F8F8F2;">(index), </span><span style="color:#E6DB74;">&quot;Index is out of range.&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // Count 属性返回仓库中元素的总数</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> Count</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> items.Count; } </span><span style="color:#88846F;">// 直接返回内部 List 的 Count 属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 主程序入口</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#88846F;">        // 创建一个用于存储字符串的 Repository 实例</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Repository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt; stringRepository </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Repository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">        stringRepository.</span><span style="color:#A6E22E;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Hello&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 添加字符串 &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        stringRepository.</span><span style="color:#A6E22E;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;World&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 添加字符串 &quot;World&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 输出存储的字符串和仓库中的元素总数</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(stringRepository.</span><span style="color:#A6E22E;">GetAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)); </span><span style="color:#88846F;">// 输出: Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(stringRepository.</span><span style="color:#A6E22E;">GetAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)); </span><span style="color:#88846F;">// 输出: World</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Total Items: &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> stringRepository.Count); </span><span style="color:#88846F;">// 输出: Total Items: 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 创建一个用于存储整数的 Repository 实例</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Repository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; intRepository </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Repository</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;();</span></span>
<span class="line"><span style="color:#F8F8F2;">        intRepository.</span><span style="color:#A6E22E;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 添加整数 1</span></span>
<span class="line"><span style="color:#F8F8F2;">        intRepository.</span><span style="color:#A6E22E;">Add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// 添加整数 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        // 输出存储的整数和仓库中的元素总数</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(intRepository.</span><span style="color:#A6E22E;">GetAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)); </span><span style="color:#88846F;">// 输出: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(intRepository.</span><span style="color:#A6E22E;">GetAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)); </span><span style="color:#88846F;">// 输出: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Total Items: &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> intRepository.Count); </span><span style="color:#88846F;">// 输出: Total Items: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,75)]))}const t=n(p,[["render",o]]),F=JSON.parse('{"path":"/zh/OOP/review.html","title":"Coventry-Summary","lang":"zh-CN","frontmatter":{"title":"Coventry-Summary","icon":"c","date":"2024-05-11T10:19:07.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"任务：泛型，最后那个题目（在数组中的应用）；where关键字那两个代码；搞懂Event调用逻辑； 1. Method 1.1 Coventry 知识点： 怎么创建一个方法？返回类型？ 参数按值传递？按引用传递？（ref out in） Recursion？ 变量作用域？ 1.2 AIYC 方法的声明？调用？ 怎么在方法里添加参数？调用带参数的方法？多参...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/OOP/review.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"Coventry-Summary"}],["meta",{"property":"og:description","content":"任务：泛型，最后那个题目（在数组中的应用）；where关键字那两个代码；搞懂Event调用逻辑； 1. Method 1.1 Coventry 知识点： 怎么创建一个方法？返回类型？ 参数按值传递？按引用传递？（ref out in） Recursion？ 变量作用域？ 1.2 AIYC 方法的声明？调用？ 怎么在方法里添加参数？调用带参数的方法？多参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-20T04:18:35.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-11T10:19:07.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-20T04:18:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Coventry-Summary\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-11T10:19:07.000Z\\",\\"dateModified\\":\\"2024-05-20T04:18:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1715411121000,"updatedTime":1716178715000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":7,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":10.39,"words":3118},"filePathRelative":"zh/OOP/review.md","localizedDate":"2024年5月11日","excerpt":"<p>任务：泛型，最后那个题目（在数组中的应用）；where关键字那两个代码；搞懂Event调用逻辑；</p>\\n<h2>1. Method</h2>\\n<h3>1.1 Coventry</h3>\\n<p>知识点：</p>\\n<ol>\\n<li>\\n<p>怎么创建一个方法？返回类型？</p>\\n</li>\\n<li>\\n<p>参数按值传递？按引用传递？（ref out in）</p>\\n</li>\\n<li>\\n<p>Recursion？</p>\\n</li>\\n<li>\\n<p>变量作用域？</p>\\n</li>\\n</ol>\\n<h3>1.2 AIYC</h3>\\n<ol>\\n<li>\\n<p>方法的声明？调用？</p>\\n</li>\\n<li>\\n<p>怎么在方法里添加参数？调用带参数的方法？多参数方法？</p>\\n</li>\\n<li>\\n<p>可选参数（为参数设置默认值的情况）？</p>\\n</li>\\n<li>\\n<p>命名参数？</p>\\n</li>\\n<li>\\n<p>参数的传递。同Coventry</p>\\n</li>\\n<li>\\n<p>方法的重载，以及重载调用（能不能返回值类型不同参数类型相同？）</p>\\n</li>\\n<li>\\n<p>递归</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as comp,F as data};

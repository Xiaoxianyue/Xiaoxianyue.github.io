import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as p}from"./app-COYsNQIt.js";const e="/assets/e562381f303733f11fcb3c19105da6a-DYVl-lmw.jpg",o="/assets/942be49dcef642a79a698dd4e2ccb7a-ndyRvD_V.jpg",F={};function c(t,s){return p(),a("div",null,s[0]||(s[0]=[l('<h2 id="week-06" tabindex="-1"><a class="header-anchor" href="#week-06"><span>Week 06</span></a></h2><h3 id="dijkstra-s-algorithm" tabindex="-1"><a class="header-anchor" href="#dijkstra-s-algorithm"><span>Dijkstra’s algorithm</span></a></h3><h4 id="手写过程" tabindex="-1"><a class="header-anchor" href="#手写过程"><span>手写过程</span></a></h4><img src="'+e+`" alt="e562381f303733f11fcb3c19105da6a" style="zoom:50%;"><table><thead><tr><th>node</th><th>最开始</th><th>while 1开始时</th><th>while 2开始时</th><th>while 3开始时</th><th>while 4开始时</th><th>while 5开始时</th><th>while 6开始时</th></tr></thead><tbody><tr><td>A</td><td>~</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>B</td><td>~</td><td>~</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>C</td><td>~</td><td>~</td><td>4</td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td>D</td><td>~</td><td>~</td><td>~</td><td>6</td><td>4</td><td>4</td><td>4</td></tr></tbody></table><p><mark><strong>第一次 while：</strong></mark></p><ol><li><p>第一次 while 开始时：<code>priority_queue:[(0,A)]</code></p></li><li><p><code>current_distance, currentg_node = 0, A</code>, 弹出 <code>(0, A)</code></p></li><li><p><code>0 = distances[A]</code>, 循环继续</p></li><li><p>遍历 <code>graph[A]. neighbor:[B;C]; weight:[1,4]</code></p></li><li><p>先 B。<code>distance = 0 + 1</code>，1 &lt; ~，加入距离表。 <code>(1, B)</code>加入第一步那个队列</p></li><li><p>再C。<code>distance = 0 + 4</code>，4 &lt; ~，加入距离表。<code>(4, C)</code>加入第一步那个队列</p></li></ol><p><mark><strong>第二次 while</strong></mark></p><ol><li><p><code>priority_queue:[(1, B), (4, C)]</code></p></li><li><p><code>current_distance, currentg_node = 1, B</code>，弹出 <code>(1, B)</code></p></li><li><p><code>1 = distance[B] = 1</code>, 循环继续</p></li><li><p>遍历 <code>graph[B]. neighbor:[A,C,D],weight[1,2,5]</code></p></li><li><p>A. <code>distance = 0 + 1</code>, 1 &gt; 0, 不加入距离表也不加入队列。</p></li><li><p>C. <code>distance = 1 + 2</code>, 3 &lt; 4, 修改距离表，<code>(3, C)</code>加入队列</p></li><li><p>D.<code>distance = 1 + 5</code>, 6 &lt; ~, 修改距离表，<code>(6, D)</code>加入队列</p></li></ol><p><mark><strong>第三次 while</strong></mark></p><ol><li><p><code>priority_queue:[(4,C),(3,C),(6,D)]</code></p></li><li><p><code>current_distance, current_node = 3, C</code>, 弹出 <code>(3, C)</code></p></li><li><p>3 = distances[C] = 3, 循环继续</p></li><li><p>遍历 <code>neighbor = [A, B, D], weight = [4, 2, 1]</code></p></li><li><p>A. 跳过，类似上面</p></li><li><p>B。 <code>distance = 3 + 2， 5 &gt; 1</code>跳过</p></li><li><p>D。 <code>distance = 3 + 1，4 &lt; 6</code>，修改距离表，加入队列</p></li></ol><p><mark><strong>第四次 while</strong></mark></p><ol><li><code>priority_queue: [(4, D),(4,C),(6，D)]</code></li><li>假设这里先弹出 C。<code>current_distance, current_node = 4, C</code>, 弹出 <code>(4，C)</code></li><li>4 &gt; distances[C] = 3, 循环结束。</li></ol><p><mark><strong>第五次 while</strong></mark></p><ol><li><p><code>priority_queue: [(4, D),(6，D)]</code></p></li><li><p><code>current_distance, currentg_node = 4, D</code>, 弹出 <code>(4，D)</code></p></li><li><p>4 = 4，循环继续</p></li><li><p>遍历 <code>neighbor = [B, C], weight = [1, 5]</code></p></li><li><p>B. <code>distance = 4 + 1, 5 &gt; 1</code>跳过</p></li><li><p>C. <code>distance = 4 + 5, 9&gt;3</code>跳过</p></li></ol><p><strong><mark>第六次 while</mark></strong></p><ol><li><code>priority_queue: [(6，D)]</code></li><li><code>current_distance, currentg_node = 6, D</code>, 弹出 <code>(6，D)</code></li><li>6 &gt; distances[D] = 4，循环结束。</li></ol><p><strong><code>priority_queue</code>空了，跳出 while 循环。</strong></p><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> heapq</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> dijkstra</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">graph</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    distances </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {node: </span><span style="color:#66D9EF;font-style:italic;">float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph}</span></span>
<span class="line"><span style="color:#F8F8F2;">    distances[start] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    priority_queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, start)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> priority_queue:</span></span>
<span class="line"><span style="color:#F8F8F2;">        current_distance, current_node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> heapq.heappop(priority_queue)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> current_distance </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> distances[current_node]:</span></span>
<span class="line"><span style="color:#F92672;">            continue</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> neighbor,weight </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[current_node].items():</span></span>
<span class="line"><span style="color:#F8F8F2;">            distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_distance </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> weight</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> distances[neighbor]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                distances[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance</span></span>
<span class="line"><span style="color:#F8F8F2;">                heapq.heappush(priority_queue, (distance, neighbor))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> distances</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;A&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;B&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;C&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;D&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 从起点A运行 Dikjkatra 算法,计算到所有其他节点的最短路径</span></span>
<span class="line"><span style="color:#F8F8F2;">start_node </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">shortest_path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dijkstra(graph, start_node)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出从起点到其他所有结点的最短距离</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;从节点</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">start_node</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">到其他节点的最短距离为：&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> node, distance </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> shortest_path.items():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">start_node</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">-&gt;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">node</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">distance</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> dijkstra</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">graph</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">origin</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">destination</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化数据</span></span>
<span class="line"><span style="color:#F8F8F2;">    dist </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {vertex: </span><span style="color:#66D9EF;font-style:italic;">float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> vertex </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph}  </span><span style="color:#88846F;"># 距离初始化为无穷大</span></span>
<span class="line"><span style="color:#F8F8F2;">    previous </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {vertex: </span><span style="color:#AE81FF;">None</span><span style="color:#F92672;"> for</span><span style="color:#F8F8F2;"> vertex </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph}  </span><span style="color:#88846F;"># 前置节点初始化为 None</span></span>
<span class="line"><span style="color:#F8F8F2;">    dist[origin] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#88846F;">  # 起点到起点的距离为 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    Q </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">(graph.keys())  </span><span style="color:#88846F;"># 所有节点加入集合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> Q:</span></span>
<span class="line"><span style="color:#88846F;">        # 找到 Q 中距离最小的节点</span></span>
<span class="line"><span style="color:#F8F8F2;">        u </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> min</span><span style="color:#F8F8F2;">(Q, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> vertex</span><span style="color:#F8F8F2;">: dist[vertex])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> dist[u] </span><span style="color:#F92672;">==</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">            break</span><span style="color:#88846F;">  # 如果最小距离是无穷大，说明没有到达目的地的路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> destination:</span></span>
<span class="line"><span style="color:#F92672;">            break</span><span style="color:#88846F;">  # 到达目的地，停止循环</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        Q.remove(u)  </span><span style="color:#88846F;"># 从 Q 中移除节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 更新邻居节点的距离</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> neighbor, cost </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[u].items():</span></span>
<span class="line"><span style="color:#F8F8F2;">            alt </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dist[u] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> cost  </span><span style="color:#88846F;"># 计算新的可能距离</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> alt </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> dist[neighbor]:  </span><span style="color:#88846F;"># 如果新的距离小于当前记录的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">                dist[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> alt  </span><span style="color:#88846F;"># 更新距离</span></span>
<span class="line"><span style="color:#F8F8F2;">                previous[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> u  </span><span style="color:#88846F;"># 更新前置节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 构造最短路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    S </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> destination</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> previous[u] </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        S.insert(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, u)  </span><span style="color:#88846F;"># 插入路径</span></span>
<span class="line"><span style="color:#F8F8F2;">        u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> previous[u]</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> origin:</span></span>
<span class="line"><span style="color:#F8F8F2;">        S.insert(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, u)  </span><span style="color:#88846F;"># 将起点加入路径</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> S</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例用法</span></span>
<span class="line"><span style="color:#F8F8F2;">graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;A&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;B&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;C&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;D&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">origin </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">destination </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;D&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">shortest_path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dijkstra(graph, origin, destination)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Shortest Path:&quot;</span><span style="color:#F8F8F2;">, shortest_path)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="prim-s-algorithm" tabindex="-1"><a class="header-anchor" href="#prim-s-algorithm"><span>Prim’s algorithm</span></a></h3><h4 id="手写过程-1" tabindex="-1"><a class="header-anchor" href="#手写过程-1"><span>手写过程</span></a></h4><img src="`+o+`" alt="942be49dcef642a79a698dd4e2ccb7a" style="zoom:50%;"><p>start 设做 A</p><p>把 A 放到已访问的列表。</p><p>未访问的列表里：B，C，D</p><p>把与 A 相连的边全部放到 <code>edge_heap</code>里，作为候选边。</p><p><code>edge_heap = [(4,A,D),(3,A,C),(1,A,B)]</code></p><p><strong>while 1：</strong></p><ol><li><p>候选边列表把目前最小边弹出。<code>cost, u, v = 1,A,B</code></p></li><li><p>B 不在已访问的列表里面。</p></li><li><p>把这条边加入最小生成树。<code>spanning_tree = [A,B,1]</code></p></li><li><p>把 B 添加到已访问的列表，从未访问的列表移除。</p></li><li><p>对于与 B 相连的所有边：如果另一个节点在未访问列表里，加入候选边列表 <code>[(4,A,D),(3,A,C),(2,B,C),(5,B,D)]</code></p></li></ol><p><strong>while 2:</strong></p><ol><li>候选边列表把目前最小边弹出。<code>cost, u, v = 2,B,C</code></li><li>C 不在已访问的列表里面。</li><li>添加到生成树里。<code>spanning_tree = [A,B,1], [B,C,2]</code></li><li>把C添加到已访问列表，从未访问的列表移除。</li><li>对于与 C相连的所有边，如果另一个节点没有被访问过，加入候选列表 <code>[(4,A,D),(3,A,C),(5,B,D),(6,C,D)]</code></li></ol><p><strong>while 3:</strong></p><ol><li>候选边列表把目前最小边弹出。<code>cost, u, v = 3,A,C</code></li><li>C 在已访问列表里。跳过。</li></ol><p><strong>while 4：</strong></p><ol><li>候选边列表把目前最小边弹出。<code>cost, u, v = 4,A,D</code></li><li>D不在已访问的列表里</li><li>添加到生成树。<code>spanning_tree = [A,B,1], [B,C,2],[A,D,4]</code></li><li>把 D 添加到已访问列表里。</li><li>对于与D相连的所有边，进行遍历。结果邻居节点都在已访问列表。跳过</li></ol><p><strong>while 5:</strong></p><ol><li>候选边列表把目前最小边弹出。<code>cost,u,v = 5,B,D</code></li><li>D 已经在已访问的列表里。跳过</li></ol><p><strong>while 6：</strong></p><p>同 5</p><p>最后生成树里的边：</p><p><code>spanning_tree = spanning_tree = [A,B,1], [B,C,2],[A,D,4]</code></p><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1"><span>代码</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> heapq</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> prim</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">graph</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    reached_set </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">([start_node])  </span><span style="color:#88846F;"># 已经访问的节点集合</span></span>
<span class="line"><span style="color:#F8F8F2;">    unreached_set </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">(graph.keys()) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> reached_set  </span><span style="color:#88846F;"># 未访问的节点集合</span></span>
<span class="line"><span style="color:#F8F8F2;">    spanning_tree </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    edge_heap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> neighbor, cost </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[start].items():</span></span>
<span class="line"><span style="color:#F8F8F2;">        heapq.heappush(edge_heap, (cost, start, neighbor))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> unreached_set:</span></span>
<span class="line"><span style="color:#F8F8F2;">        cost, u, v </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> heapq.heappop(edge_heap)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> v </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> unreached_set:</span></span>
<span class="line"><span style="color:#F8F8F2;">            spanning_tree.append((u, v, cost))</span></span>
<span class="line"><span style="color:#F8F8F2;">            reached_set.add(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">            unreached_set.remove(v)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> neighbor, edge_cost </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[v].items():</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> neighbor </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> unreached_set:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    heapq.heappush(edge_heap, (edge_cost, v, neighbor))</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> spanning_tree</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例图结构（邻接表表示）</span></span>
<span class="line"><span style="color:#F8F8F2;">graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;A&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;B&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;C&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;D&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用 Prim 算法，选择起始节点为 &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">start_node </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">mst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prim(graph, start_node)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出最小生成树的边</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> edge </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> mst:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">edge[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> - </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">edge[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> (权重: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">edge[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">)&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> prim_algorithm</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">graph</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_node</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化 ReachSet、UnReachSet 和 SpanningTree</span></span>
<span class="line"><span style="color:#F8F8F2;">    reach_set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {start_node}  </span><span style="color:#88846F;"># 已经被包含在生成树中的节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    unreach_set </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">(graph.keys()) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> reach_set  </span><span style="color:#88846F;"># 尚未被包含的节点</span></span>
<span class="line"><span style="color:#F8F8F2;">    spanning_tree </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 用于存储最小生成树的边</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_cost </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#88846F;">  # 最小生成树的总权重</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> unreach_set:</span></span>
<span class="line"><span style="color:#88846F;">        # 寻找符合条件的边 (x, y)：</span></span>
<span class="line"><span style="color:#88846F;">        # x 属于 ReachSet, y 属于 UnReachSet, 并且具有最小的权重</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_edge </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_cost </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> reach_set:</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> y, cost </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[x].items():</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> unreach_set </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> cost </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> min_cost:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    min_edge </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (x, y)</span></span>
<span class="line"><span style="color:#F8F8F2;">                    min_cost </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cost</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 将最小边加入生成树</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> min_edge:</span></span>
<span class="line"><span style="color:#F8F8F2;">            x, y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> min_edge</span></span>
<span class="line"><span style="color:#F8F8F2;">            spanning_tree.append((x, y, min_cost))  </span><span style="color:#88846F;"># 加入最小生成树</span></span>
<span class="line"><span style="color:#F8F8F2;">            total_cost </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> min_cost  </span><span style="color:#88846F;"># 累加边的权重</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            # 更新 ReachSet 和 UnReachSet</span></span>
<span class="line"><span style="color:#F8F8F2;">            reach_set.add(y)</span></span>
<span class="line"><span style="color:#F8F8F2;">            unreach_set.remove(y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> spanning_tree, total_cost</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例图（邻接表表示）</span></span>
<span class="line"><span style="color:#F8F8F2;">graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;A&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;B&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;C&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;D&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 运行算法</span></span>
<span class="line"><span style="color:#F8F8F2;">start_node </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">spanning_tree, total_cost </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prim_algorithm(graph, start_node)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边:&quot;</span><span style="color:#F8F8F2;">, spanning_tree)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的总权重:&quot;</span><span style="color:#F8F8F2;">, total_cost)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="kruskal-s-algorithm" tabindex="-1"><a class="header-anchor" href="#kruskal-s-algorithm"><span>Kruskal’s algorithm</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Edge</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">u</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> u</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.v </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> v</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.weight </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weight</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">unionfind</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {vertex: vertex </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> vertex </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vertices}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertex</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.parent[vertex] </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> vertex:</span></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.parent[vertex] </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.parent[vertex])</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.parent[vertex]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> union</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">u</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        root_u </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(u)</span></span>
<span class="line"><span style="color:#F8F8F2;">        root_v </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(v)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> root_u </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> root_v:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.parent[root_v] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root_u</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> kruskal</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">edge</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    uf </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> unionfind(vertices)</span></span>
<span class="line"><span style="color:#F8F8F2;">    sorted_edges </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(edge, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> edge</span><span style="color:#F8F8F2;">: edge.weight)</span></span>
<span class="line"><span style="color:#F8F8F2;">    mst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> edge </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> sorted_edges:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> uf.union(edge.u, edge.v):</span></span>
<span class="line"><span style="color:#F8F8F2;">            mst.append(edge)</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(mst) </span><span style="color:#F92672;">==</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(vertices) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                break</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            continue</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> mst</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        Edge(</span><span style="color:#E6DB74;">&#39;E&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    mst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> kruskal(vertices, edges)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边为：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_weight </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> edge </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> mst:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">edge.u</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> -&gt; </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">edge.v</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> -&gt; </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">edge.weight</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        total_weight </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> edge.weight</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;最小生成树的权重总和：</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">total_weight</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义 Kruskal 算法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Graph</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.V </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vertices  </span><span style="color:#88846F;"># 图的节点数</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []    </span><span style="color:#88846F;"># 图的边集（格式：[权重, 起点, 终点]）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加边</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">u</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges.append([weight, u, v])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 查找集合的根节点（带路径压缩）</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> parent[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> i:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, parent[i])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 合并两个集合（带秩优化）</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> union</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">rank</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        xroot </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, x)</span></span>
<span class="line"><span style="color:#F8F8F2;">        yroot </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 根据秩合并</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> rank[xroot] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> rank[yroot]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[xroot] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> yroot</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> rank[xroot] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> rank[yroot]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[yroot] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> xroot</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[yroot] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> xroot</span></span>
<span class="line"><span style="color:#F8F8F2;">            rank[xroot] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # Kruskal 算法实现</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> kruskal</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 初始化结果集</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 将边按权重排序</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.edges, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> item</span><span style="color:#F8F8F2;">: item[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 初始化 parent 和 rank</span></span>
<span class="line"><span style="color:#F8F8F2;">        parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">        rank </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.V):</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent.append(node)</span></span>
<span class="line"><span style="color:#F8F8F2;">            rank.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 选择的边数量</span></span>
<span class="line"><span style="color:#F8F8F2;">        e </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#88846F;">  # edges 索引</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 当选定的边数小于节点数 - 1</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">&lt;</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.V </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">            # 选择权重最小的边</span></span>
<span class="line"><span style="color:#F8F8F2;">            weight, u, v </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.edges[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            # 查找两个节点的集合</span></span>
<span class="line"><span style="color:#F8F8F2;">            x </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, u)</span></span>
<span class="line"><span style="color:#F8F8F2;">            y </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, v)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">            # 如果不在同一集合，加入结果集并合并</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> y:</span></span>
<span class="line"><span style="color:#F8F8F2;">                e </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">                result.append((u, v, weight))</span></span>
<span class="line"><span style="color:#FD971F;">                self</span><span style="color:#F8F8F2;">.union(parent, rank, x, y)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 返回最小生成树的边集和权重</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例：使用 Kruskal 算法计算最小生成树</span></span>
<span class="line"><span style="color:#F8F8F2;">g </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Graph(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">mst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> g.kruskal()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边集:&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> u, v, weight </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> mst:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;边 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">u</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">-</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">v</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 权重: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">weight</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="week-7" tabindex="-1"><a class="header-anchor" href="#week-7"><span>Week 7</span></a></h2><h3 id="_1-optimal-greedy-algorithms" tabindex="-1"><a class="header-anchor" href="#_1-optimal-greedy-algorithms"><span>1. Optimal Greedy Algorithms</span></a></h3><h4 id="dijkstra-s-algorithm-1" tabindex="-1"><a class="header-anchor" href="#dijkstra-s-algorithm-1"><span>Dijkstra’s Algorithm</span></a></h4><p>详情见上周。</p><h4 id="scheduling" tabindex="-1"><a class="header-anchor" href="#scheduling"><span>Scheduling</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">activities </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">start_times </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">finish_times </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">13</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">14</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> greedy</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">activity</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start_time</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">finish_time</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(activities)</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution.append(activity[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">    k </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, n):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> start_time[i] </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> finish_time[k]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            solution.append(activities[i])</span></span>
<span class="line"><span style="color:#F8F8F2;">            k </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> solution</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">selected_activities </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> greedy(activities, start_times, finish_times)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;被选择的活动:&quot;</span><span style="color:#F8F8F2;">, selected_activities)  </span><span style="color:#88846F;"># 输出被选择的活动编号</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-non-optimal-greedy-algorithms" tabindex="-1"><a class="header-anchor" href="#_2-non-optimal-greedy-algorithms"><span>2. Non-optimal Greedy Algorithms</span></a></h3><h4 id="knapsack-peoblem" tabindex="-1"><a class="header-anchor" href="#knapsack-peoblem"><span>Knapsack Peoblem</span></a></h4><h5 id="_1-贪心算法" tabindex="-1"><a class="header-anchor" href="#_1-贪心算法"><span>1. 贪心算法</span></a></h5><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> knapSack</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">W</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">wt</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    weight </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> W</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> (weight </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> wt[i]) </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># check if the weight minus current weight is greater than 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        currentItem </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">        currentWeight </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> wt[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">        weight </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weight </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> currentWeight</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> currentItem</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">120</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># sorted value list</span></span>
<span class="line"><span style="color:#F8F8F2;">wt </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># sorted weight list</span></span>
<span class="line"><span style="color:#F8F8F2;">W </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 50</span><span style="color:#88846F;">  # capacity</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(knapSack(W, wt, val))  </span><span style="color:#88846F;"># call and print</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h5 id="_2-optimal" tabindex="-1"><a class="header-anchor" href="#_2-optimal"><span>2. Optimal</span></a></h5><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> copy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> combination</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(data)):</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> copy.copy(target)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> copy.copy(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_target.append(data[i])</span></span>
<span class="line"><span style="color:#F8F8F2;">        result.append(new_target)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_data[i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:]</span></span>
<span class="line"><span style="color:#F8F8F2;">        combination(new_target, new_data)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_best_knapsack</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">found_items</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight_limit</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    weight_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    value_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> result:</span></span>
<span class="line"><span style="color:#F8F8F2;">        weight </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        value </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> i:</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> found_items:</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> item[</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    weight </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> item[</span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">                    value </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> item[</span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">        weight_list.append(weight)</span></span>
<span class="line"><span style="color:#F8F8F2;">        value_list.append(value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    pi </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_knapsack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weight_list[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(value_list)):</span></span>
<span class="line"><span style="color:#F8F8F2;">        current_weight </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weight_list[i]</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> current_weight </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> best_knapsack </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> current_weight </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> weight_limit:</span></span>
<span class="line"><span style="color:#F8F8F2;">            best_knapsack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_weight</span></span>
<span class="line"><span style="color:#F8F8F2;">            pi </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;best knapsack load is </span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;"> with a weight of </span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">lbs and a value of £</span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;"> \\</span></span>
<span class="line"><span style="color:#F92672;">          %</span><span style="color:#F8F8F2;"> (result[pi], weight_list[pi], value_list[pi]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    found_items </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Item1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Item2&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Item3&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">120</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">    weight_limit </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 50</span></span>
<span class="line"><span style="color:#F8F8F2;">    target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;Item1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Item2&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Item3&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    combination(target, data)</span></span>
<span class="line"><span style="color:#F8F8F2;">    get_best_knapsack(found_items, weight_limit)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">main()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h5 id="_3-knapsack-with-splits" tabindex="-1"><a class="header-anchor" href="#_3-knapsack-with-splits"><span>3. Knapsack With Splits</span></a></h5><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 注释：假设物品是1公斤单位的多重物品，背包最大承重限制</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> generate_composition</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">inventory</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight_limit</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    composition </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 用于存储背包中的所有物品元素，按1公斤单位分解</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> inventory:  </span><span style="color:#88846F;"># 遍历库存中的每个物品</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(item[</span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">]):  </span><span style="color:#88846F;"># 将物品拆分为每一个1公斤单位，并添加到composition列表中</span></span>
<span class="line"><span style="color:#F8F8F2;">            composition.append(item)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#88846F;">    # 如果背包中的物品数量超过重量限制，则截断多余的物品</span></span>
<span class="line"><span style="color:#F8F8F2;">    composition </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> composition[:weight_limit]  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 用于存储最终结果（去重后的物品列表）</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历库存中的每个物品</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> inventory:</span></span>
<span class="line"><span style="color:#F8F8F2;">        item[</span><span style="color:#E6DB74;">&#39;comp_quantity&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> composition.count(item)  </span><span style="color:#88846F;"># 计算当前物品在背包中出现的次数</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> result:  </span><span style="color:#88846F;"># 如果该物品还没有出现在结果列表中</span></span>
<span class="line"><span style="color:#F8F8F2;">            result.append(item)  </span><span style="color:#88846F;"># 将该物品添加到结果列表中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result  </span><span style="color:#88846F;"># 返回去重后的物品列表及其数量</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> generate_knapsack</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">inventory</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight_limit</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 如果传入的库存为空，则使用默认的库存</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> inventory:</span></span>
<span class="line"><span style="color:#F8F8F2;">        inventory </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> example_inventory  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 通过调用generate_composition函数，计算并获取最优背包载荷</span></span>
<span class="line"><span style="color:#F8F8F2;">    comp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> generate_composition(inventory, weight_limit)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;&#39;</span><span style="color:#88846F;">  # 用于构建返回的字符串，显示背包中的物品</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历所有物品，输出每个物品的数量和名称</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> comp:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> item[</span><span style="color:#E6DB74;">&#39;comp_quantity&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 如果物品的数量大于0</span></span>
<span class="line"><span style="color:#F8F8F2;">            string </span><span style="color:#F92672;">+=</span><span style="color:#E6DB74;"> &#39;</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">kg of </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">, &#39;</span><span style="color:#F8F8F2;">.format(</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">                str</span><span style="color:#F8F8F2;">(item[</span><span style="color:#E6DB74;">&#39;comp_quantity&#39;</span><span style="color:#F8F8F2;">]), item[</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># 将物品的数量和名称格式化到字符串中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 如果背包中有物品，去掉最后的逗号和空格</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> string:</span></span>
<span class="line"><span style="color:#F8F8F2;">        string </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> string[:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;No materials&quot;</span><span style="color:#88846F;">  # 如果背包没有物品，显示&quot;No materials&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 返回背包的内容描述字符串</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#E6DB74;"> &#39;Robber</span><span style="color:#AE81FF;">\\&#39;</span><span style="color:#E6DB74;">s knapsack contains: </span><span style="color:#AE81FF;">%s</span><span style="color:#E6DB74;">.&#39;</span><span style="color:#F92672;"> %</span><span style="color:#F8F8F2;"> string</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">    # 模拟库存物品列表，每个物品包含名称、重量和价值</span></span>
<span class="line"><span style="color:#F8F8F2;">    found_items </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Item_1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;value&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Item_2&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;price&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Item_3&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;weight&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;price&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">120</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    weight_limit </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 50</span><span style="color:#88846F;">  # 背包的最大承重限制</span></span>
<span class="line"><span style="color:#F8F8F2;">    inventory </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> found_items  </span><span style="color:#88846F;"># 设置库存为模拟的物品列表</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 调用generate_knapsack函数，输出背包中物品的数量和名称</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(generate_knapsack(inventory, weight_limit))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 主程序入口</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    main()  </span><span style="color:#88846F;"># 执行主函数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-maximum-root-to-leaf-sum" tabindex="-1"><a class="header-anchor" href="#_3-maximum-root-to-leaf-sum"><span>3. Maximum root to leaf sum</span></a></h3><h4 id="greedy" tabindex="-1"><a class="header-anchor" href="#greedy"><span>Greedy</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义一个二叉树的节点类</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Node</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data  </span><span style="color:#88846F;"># 节点的数据</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">  # 左子节点</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">  # 右子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __repr__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.data)  </span><span style="color:#88846F;"># 输出节点数据，方便打印节点时查看</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 计算二叉树的最大路径和的函数（基于贪心选择法）</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> greedy_max_sum</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    currentNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root  </span><span style="color:#88846F;"># 从根节点开始</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 存储路径的列表</span></span>
<span class="line"><span style="color:#F8F8F2;">    totalSum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> root.data  </span><span style="color:#88846F;"># 初始化路径和为根节点的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution.append(root.data)  </span><span style="color:#88846F;"># 将根节点的数据加入到路径中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 遍历二叉树，直到找到叶子节点（没有子节点的节点）</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> currentNode.left </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> or</span><span style="color:#F8F8F2;"> currentNode.right </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> currentNode.left </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> currentNode.right </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 当前节点有左右两个子节点</span></span>
<span class="line"><span style="color:#88846F;">            # 比较左子节点和右子节点的值，选择较大的一个继续向下遍历</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> currentNode.left.data </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> currentNode.right.data:  </span><span style="color:#88846F;"># 如果左子节点的值大于右子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">                solution.append(currentNode.left.data)  </span><span style="color:#88846F;"># 将左子节点的数据加入到路径中</span></span>
<span class="line"><span style="color:#F8F8F2;">                totalSum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> currentNode.left.data  </span><span style="color:#88846F;"># 将左子节点的数据加到总和中</span></span>
<span class="line"><span style="color:#F8F8F2;">                currentNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> currentNode.left  </span><span style="color:#88846F;"># 更新当前节点为左子节点</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 如果右子节点的值较大或相等</span></span>
<span class="line"><span style="color:#F8F8F2;">                solution.append(currentNode.right.data)  </span><span style="color:#88846F;"># 将右子节点的数据加入到路径中</span></span>
<span class="line"><span style="color:#F8F8F2;">                totalSum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> currentNode.right.data  </span><span style="color:#88846F;"># 将右子节点的数据加到总和中</span></span>
<span class="line"><span style="color:#F8F8F2;">                currentNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> currentNode.right  </span><span style="color:#88846F;"># 更新当前节点为右子节点</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> currentNode.left </span><span style="color:#F92672;">!=</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 如果当前节点只有左子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">            solution.append(currentNode.left.data)  </span><span style="color:#88846F;"># 将左子节点的数据加入到路径中</span></span>
<span class="line"><span style="color:#F8F8F2;">            totalSum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> currentNode.left.data  </span><span style="color:#88846F;"># 将左子节点的数据加到总和中</span></span>
<span class="line"><span style="color:#F8F8F2;">            currentNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> currentNode.left  </span><span style="color:#88846F;"># 更新当前节点为左子节点</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 如果当前节点只有右子节点</span></span>
<span class="line"><span style="color:#F8F8F2;">            solution.append(currentNode.right.data)  </span><span style="color:#88846F;"># 将右子节点的数据加入到路径中</span></span>
<span class="line"><span style="color:#F8F8F2;">            totalSum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> currentNode.right.data  </span><span style="color:#88846F;"># 将右子节点的数据加到总和中</span></span>
<span class="line"><span style="color:#F8F8F2;">            currentNode </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> currentNode.right  </span><span style="color:#88846F;"># 更新当前节点为右子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 返回路径及其对应的总和</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> solution, totalSum</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 程序的入口点</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 构建一个二叉树</span></span>
<span class="line"><span style="color:#F8F8F2;">    root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 根节点为1</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 根节点的左子节点为2</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 根节点的右子节点为3</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 左子节点的左子节点为5</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 左子节点的右子节点为7</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 右子节点的右子节点为4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 调用greedy_max_sum函数，计算路径和</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(greedy_max_sum(root))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="optimal" tabindex="-1"><a class="header-anchor" href="#optimal"><span>Optimal</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义二叉树节点</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Node</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data  </span><span style="color:#88846F;"># 节点存储的数据</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">   # 左子节点</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span><span style="color:#88846F;">  # 右子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 节点的字符串表示方法，用于调试或输出</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __repr__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.data)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 全局变量，用于存储找到的最大路径</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 递归地找出从根节点到叶子节点路径和等于给定值的路径</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> print_max_sum_tree_path</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">summ</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 当路径和正好为0时，返回True，表示找到了正确的路径</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> summ </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 如果节点为空，返回False</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 递归查找左子树和右子树是否有符合条件的路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> print_max_sum_tree_path(root.left, summ </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> root.data)</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> print_max_sum_tree_path(root.right, summ </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> root.data)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 如果左子树或右子树找到符合条件的路径，就把当前节点加入结果路径</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> left </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> right:</span></span>
<span class="line"><span style="color:#F8F8F2;">        result.insert(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, root.data)  </span><span style="color:#88846F;"># 将当前节点添加到路径的开头</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 返回是否有符合条件的路径</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> left </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> right</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 递归计算从当前节点到叶子节点的最大路径和</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> max_sum_root_to_leaf</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 如果当前节点为空，返回0（无路径和）</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> root:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 如果左子节点为空，则最大路径和是右子树的最大路径和</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.left </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        max_sum_left </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">        # 否则，递归求左子树的最大路径和</span></span>
<span class="line"><span style="color:#F8F8F2;">        max_sum_left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> max_sum_root_to_leaf(root.left)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 如果右子节点为空，则最大路径和是左子树的最大路径和</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> root.right </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        max_sum_right </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">        # 否则，递归求右子树的最大路径和</span></span>
<span class="line"><span style="color:#F8F8F2;">        max_sum_right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> max_sum_root_to_leaf(root.right)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 返回左子树和右子树中的较大者，加上当前节点的值</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;"> max</span><span style="color:#F8F8F2;">(max_sum_left, max_sum_right) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> root.data</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 找出最大路径和并输出路径</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find_max_sum_and_print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">root</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 计算从根节点到叶子节点的最大路径和</span></span>
<span class="line"><span style="color:#F8F8F2;">    max_sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> max_sum_root_to_leaf(root)</span></span>
<span class="line"><span style="color:#88846F;">    # 输出最大路径和</span></span>
<span class="line"><span style="color:#F8F8F2;">    print_max_sum_tree_path(root, max_sum)</span></span>
<span class="line"><span style="color:#88846F;">    # 打印最大路径和</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;maximum sum from root to leaf is:&quot;</span><span style="color:#F8F8F2;">, max_sum)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 主函数（驱动程序）</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 创建二叉树</span></span>
<span class="line"><span style="color:#F8F8F2;">    root </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left.left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.left.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    root.right.right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Node(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 找到并打印最大路径和</span></span>
<span class="line"><span style="color:#F8F8F2;">    find_max_sum_and_print(root)</span></span>
<span class="line"><span style="color:#88846F;">    # 打印路径</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;path is:&#39;</span><span style="color:#F8F8F2;">, result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,68)]))}const y=n(F,[["render",c]]),d=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week0607.html","title":"高级算法——第6, 7周查漏补缺","lang":"zh-CN","frontmatter":{"title":"高级算法——第6, 7周查漏补缺","icon":"python","date":"2024-11-11T21:08:11.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1701251856000,"updatedTime":1732720897000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":7,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":14.42,"words":4326},"filePathRelative":"zh/Advanced_Algorithms/Week0607.md","localizedDate":"2024年11月11日"}');export{y as comp,d as data};

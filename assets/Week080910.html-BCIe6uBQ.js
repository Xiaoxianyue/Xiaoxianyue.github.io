import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as a,a as s,e as r,d as F,w as p,r as y,o as e}from"./app-84lBMjzT.js";const d="/assets/image-20241115143641761-7ot2NCAR.png",v="/assets/image-20241115145201611-BQu4GvQ0.png",m="/assets/image-20241115164142558-D3YFj22v.png",u="/assets/image-20241115164159502-CivJoFsN.png",T="/assets/image-20241115164221252-BzSRecce.png",b="/assets/image-20241115164316365-CUM_gsBv.png",Q={},E={id:"_1-constant",tabindex:"-1"},h={class:"header-anchor",href:"#_1-constant"},g={class:"MathJax",jax:"SVG",style:{position:"relative"}},D={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.618ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2041 1000","aria-hidden":"true"},A={id:"_2-logarithmic",tabindex:"-1"},_={class:"header-anchor",href:"#_2-logarithmic"},f={class:"MathJax",jax:"SVG",style:{position:"relative"}},B={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.695ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3401 1000","aria-hidden":"true"},x={id:"_3-linear",tabindex:"-1"},w={class:"header-anchor",href:"#_3-linear"},M={class:"MathJax",jax:"SVG",style:{position:"relative"}},L={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.844ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2141 1000","aria-hidden":"true"},k={id:"_4-log-linear",tabindex:"-1"},H={class:"header-anchor",href:"#_4-log-linear"},C={class:"MathJax",jax:"SVG",style:{position:"relative"}},q={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.052ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 4001 1000","aria-hidden":"true"},Z={id:"_5-polynomial",tabindex:"-1"},j={class:"header-anchor",href:"#_5-polynomial"},S={class:"MathJax",jax:"SVG",style:{position:"relative"}},V={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.865ex",height:"2.497ex",role:"img",focusable:"false",viewBox:"0 -853.7 2592.4 1103.7","aria-hidden":"true"},N={id:"_6-exponential",tabindex:"-1"},O={class:"header-anchor",href:"#_6-exponential"},R={class:"MathJax",jax:"SVG",style:{position:"relative"}},z={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.765ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2548.3 1000","aria-hidden":"true"},P={id:"_7-factorial",tabindex:"-1"},G={class:"header-anchor",href:"#_7-factorial"},I={class:"MathJax",jax:"SVG",style:{position:"relative"}},J={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.473ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2419 1000","aria-hidden":"true"};function X(U,n){const c=y("Tabs");return e(),l("div",null,[n[29]||(n[29]=a('<h2 id="lecture-08" tabindex="-1"><a class="header-anchor" href="#lecture-08"><span>Lecture 08</span></a></h2><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h3><figure><img src="'+d+'" alt="image-20241115143641761" tabindex="0" loading="lazy"><figcaption>image-20241115143641761</figcaption></figure>',3)),s("h4",E,[s("a",h,[s("span",null,[n[2]||(n[2]=F("1. constant ")),s("mjx-container",g,[(e(),l("svg",D,n[0]||(n[0]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[1]||(n[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[30]||(n[30]=a(`<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">33</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">44</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">55</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(a[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(b[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如插值搜索（最好情况）的时间复杂度。</p>`,2)),s("h4",A,[s("a",_,[s("span",null,[n[5]||(n[5]=F("2. Logarithmic ")),s("mjx-container",f,[(e(),l("svg",B,n[3]||(n[3]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3012,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[4]||(n[4]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[31]||(n[31]=s("p",null,"如二分搜索的时间复杂度。",-1)),n[32]||(n[32]=s("img",{src:v,alt:"image-20241115145201611",style:{zoom:"33%"}},null,-1)),n[33]||(n[33]=s("p",null,"每次都会将要操作的对象减半。符合 log 函数的定义。",-1)),s("h4",x,[s("a",w,[s("span",null,[n[8]||(n[8]=F("3. linear ")),s("mjx-container",M,[(e(),l("svg",L,n[6]||(n[6]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[7]||(n[7]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[34]||(n[34]=a(`<p>伪代码：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">FIND (A, target) </span></span>
<span class="line"><span style="color:#F8F8F2;">	n ← A.length </span></span>
<span class="line"><span style="color:#F8F8F2;">	FOR (i </span><span style="color:#AE81FF;">FROM</span><span style="color:#AE81FF;"> 0</span><span style="color:#AE81FF;"> TO</span><span style="color:#F8F8F2;"> n) </span></span>
<span class="line"><span style="color:#F8F8F2;">		IF (A[i]</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">target) </span></span>
<span class="line"><span style="color:#AE81FF;">			RETURN</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#AE81FF;">	RETURN</span><span style="color:#AE81FF;"> FALSE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("h4",k,[s("a",H,[s("span",null,[n[11]||(n[11]=F("4. log linear ")),s("mjx-container",C,[(e(),l("svg",q,n[9]||(n[9]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2535,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3012,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3612,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[10]||(n[10]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mi",null,"l"),s("mi",null,"o"),s("mi",null,"g"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[35]||(n[35]=a(`<ul><li>O (n log n) means do O (log n) n times.</li><li>So e.g. do 6 binary searches</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> linear_log_recur</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) -&gt; </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;线性对数阶&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#88846F;">    # 一分为二，子问题的规模减小一半</span></span>
<span class="line"><span style="color:#F8F8F2;">    count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> linear_log_recur(n </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> linear_log_recur(n </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">    # 当前子问题包含 n 个操作</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(n):</span></span>
<span class="line"><span style="color:#F8F8F2;">        count </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> count</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("h4",Z,[s("a",j,[s("span",null,[n[14]||(n[14]=F("5. polynomial ")),s("mjx-container",S,[(e(),l("svg",V,n[12]||(n[12]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(2203.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[13]||(n[13]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"n"),s("mi",null,"k")]),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[36]||(n[36]=a(`<p>嵌套循环。</p><p>插值排序：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">INSERTION</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">SORT(A)</span></span>
<span class="line"><span style="color:#F92672;">	for</span><span style="color:#F8F8F2;"> j ← </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> to length[A]				(n times)</span></span>
<span class="line"><span style="color:#F8F8F2;">		key ← A[j]						(n times)</span></span>
<span class="line"><span style="color:#F8F8F2;">		i ← j</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">							(n times)</span></span>
<span class="line"><span style="color:#F92672;">		while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> A[i] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key		(n</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">n times)</span></span>
<span class="line"><span style="color:#F8F8F2;">			A[i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] ← A[i]				(n</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">n times)</span></span>
<span class="line"><span style="color:#F8F8F2;">			i ← i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">					(n</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">n times)</span></span>
<span class="line"><span style="color:#F8F8F2;">		A[i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] ← key 					(n times)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("h4",N,[s("a",O,[s("span",null,[n[17]||(n[17]=F("6. exponential ")),s("mjx-container",R,[(e(),l("svg",z,n[15]||(n[15]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2159.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[16]||(n[16]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mn",null,"2"),s("mi",null,"n")]),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[37]||(n[37]=a(`<p>斐波那契数列：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">FIBONACCI(num)</span></span>
<span class="line"><span style="color:#AE81FF;">	IF</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F92672;">		return</span><span style="color:#F8F8F2;"> num</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#F8F8F2;"> FIBONACCI (num</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> FIBONACCI(num</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),s("h4",P,[s("a",G,[s("span",null,[n[20]||(n[20]=F("7. factorial ")),s("mjx-container",I,[(e(),l("svg",J,n[18]||(n[18]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(2030,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),n[19]||(n[19]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"O"),s("mo",{stretchy:"false"},"("),s("mi",null,"n"),s("mo",null,"!"),s("mo",{stretchy:"false"},")")])],-1))])])])]),n[38]||(n[38]=a(`<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> factorial_recur</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    count </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(n):</span></span>
<span class="line"><span style="color:#F8F8F2;">        count </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> factorial_recur(n </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> count</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="np-hard-problems" tabindex="-1"><a class="header-anchor" href="#np-hard-problems"><span>NP-Hard problems</span></a></h3><ul><li>NP - Non deterministic Polynomial time complexity</li><li>A non deterministic algorithm can exhibit different behaviours on different runs for the same input variables.</li></ul><h4 id="_1-exhaustive-search-——-travelling-saleman" tabindex="-1"><a class="header-anchor" href="#_1-exhaustive-search-——-travelling-saleman"><span>1. Exhaustive search —— Travelling saleman</span></a></h4><p>这是关于**穷举搜索（Exhaustive Search）**的概述图片，介绍了穷举搜索的一些特点。这类搜索方法遍历所有可能的解，以找到满足问题条件的解。穷举搜索适用于问题规模较小的情况，因为它的时间和空间成本会随着问题规模的增加而迅速增长。</p><p>穷举法：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> itertools  </span><span style="color:#88846F;"># 导入Python的itertools库，用于处理迭代器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义边的列表，即城市之间的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">dists </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义函数，获取所有可能的排列（即可能的路径）</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_and_convert_perm_list</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">dests</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 使用itertools.permutations生成所有排列</span></span>
<span class="line"><span style="color:#F8F8F2;">    perm_list </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(itertools.permutations(dests))  </span><span style="color:#88846F;"># 生成一个包含所有排列的列表（列表中的元素是元组）</span></span>
<span class="line"><span style="color:#F8F8F2;">    new_perm_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 定义一个新的列表，用于存储列表形式的排列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 将元组转换为列表（方便后续处理）</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> perm_list:</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_perm_list.append(</span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">(item))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> new_perm_list  </span><span style="color:#88846F;"># 返回转换后的排列列表</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义函数，计算每条路径的总距离</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> TSP_get_dists</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">dests</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    results </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 用于存储所有结果的列表</span></span>
<span class="line"><span style="color:#F8F8F2;">    perm_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> get_and_convert_perm_list(dests)  </span><span style="color:#88846F;"># 获取所有排列列表</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 遍历每一个排列（即一条路径）</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> perm_list:</span></span>
<span class="line"><span style="color:#F8F8F2;">        item.append(item[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># 将起点添加到路径末尾，形成回路</span></span>
<span class="line"><span style="color:#F8F8F2;">        total_dist </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#88846F;">  # 初始化总距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 计算该路径的总距离</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(item) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># 遍历路径中的每对相邻城市</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> dist </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> dists:  </span><span style="color:#88846F;"># 匹配路径中的每对城市与距离列表中的城市对</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> item[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> dist[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> item[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> dist[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:  </span><span style="color:#88846F;"># 找到匹配的城市对</span></span>
<span class="line"><span style="color:#F8F8F2;">                    total_dist </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> total_dist </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> dist[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># 将对应的距离加到总距离中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">                    # 如果已经遍历完该路径，记录总距离</span></span>
<span class="line"><span style="color:#F92672;">                    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(item) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                        item.append(total_dist)  </span><span style="color:#88846F;"># 将总距离添加到路径的末尾</span></span>
<span class="line"><span style="color:#66D9EF;">                        print</span><span style="color:#F8F8F2;">(item)  </span><span style="color:#88846F;"># 打印路径及其总距离，便于观察</span></span>
<span class="line"><span style="color:#F8F8F2;">                        results.append(item)  </span><span style="color:#88846F;"># 将该路径及总距离添加到结果列表中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> results  </span><span style="color:#88846F;"># 返回所有结果的列表</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用函数，计算包含城市A、B、C、D的所有路径及其总距离</span></span>
<span class="line"><span style="color:#F8F8F2;">TSP_get_dists([</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">], dists)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-heuristics-——travelling-saleman" tabindex="-1"><a class="header-anchor" href="#_2-heuristics-——travelling-saleman"><span>2. Heuristics ——Travelling saleman</span></a></h4><p>启发式函数能在合理的时间范围内产生一个足以解决问题的解决方案。该解决方案可能不是最佳解决方案，但可能仍然很有价值，因为它不需要很长时间就能找到。</p><p>销售员从一个随机城市开始，访问最近的城市，直到访问完所有城市为止</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义城市之间的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">dists </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义一个函数，用于查找两个城市之间的距离</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find_distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">city1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">city2</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> dist </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> dists:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> dist[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> city1 </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> dist[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> city2:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> dist[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 如果没有找到对应的距离，返回无穷大</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义最近邻算法的主函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> nearest_neighbour</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># 未访问的城市</span></span>
<span class="line"><span style="color:#F8F8F2;">    visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 已访问的城市</span></span>
<span class="line"><span style="color:#F8F8F2;">    connections </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 记录访问路径的连接</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start  </span><span style="color:#88846F;"># 从起始城市开始</span></span>
<span class="line"><span style="color:#F8F8F2;">    visited.append(u)  </span><span style="color:#88846F;"># 将起始城市添加到已访问列表</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited.remove(u)  </span><span style="color:#88846F;"># 从未访问列表中移除起始城市</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 当还有未访问的城市时，继续循环</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#88846F;">        # 找到从当前城市到未访问城市的最小距离的边</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_distance </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        next_city </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> city </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#F8F8F2;">            distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> find_distance(u, city, dists)  </span><span style="color:#88846F;"># 查找距离</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> min_distance:  </span><span style="color:#88846F;"># 如果找到更小的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance</span></span>
<span class="line"><span style="color:#F8F8F2;">                next_city </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> city</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 更新当前城市为找到的下一个城市</span></span>
<span class="line"><span style="color:#F8F8F2;">        u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> next_city</span></span>
<span class="line"><span style="color:#F8F8F2;">        connections.append((visited[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], u, min_distance))  </span><span style="color:#88846F;"># 添加边到连接列表</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited.append(u)  </span><span style="color:#88846F;"># 将找到的城市添加到已访问列表</span></span>
<span class="line"><span style="color:#F8F8F2;">        unvisited.remove(u)  </span><span style="color:#88846F;"># 从未访问列表中移除该城市</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> connections  </span><span style="color:#88846F;"># 返回完整的访问路径和距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用函数，并输出结果</span></span>
<span class="line"><span style="color:#F8F8F2;">start_city </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nearest_neighbour(start_city, dists)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出路径</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;访问路径及距离：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> connection </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> route:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;从 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">connection[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 到 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">connection[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 的距离为 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">connection[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_3-local-search" tabindex="-1"><a class="header-anchor" href="#_3-local-search"><span>3. Local search</span></a></h4>`,12)),r(c,{id:"108",data:[{id:""},{id:""},{id:""},{id:""}]},{title0:p(({value:o,isActive:t})=>n[21]||(n[21]=[])),title1:p(({value:o,isActive:t})=>n[22]||(n[22]=[])),title2:p(({value:o,isActive:t})=>n[23]||(n[23]=[])),title3:p(({value:o,isActive:t})=>n[24]||(n[24]=[])),tab0:p(({value:o,isActive:t})=>n[25]||(n[25]=[s("img",{src:m,alt:"image-20241115164142558",style:{zoom:"25%"}},null,-1)])),tab1:p(({value:o,isActive:t})=>n[26]||(n[26]=[s("img",{src:u,alt:"image-20241115164159502",style:{zoom:"25%"}},null,-1)])),tab2:p(({value:o,isActive:t})=>n[27]||(n[27]=[s("img",{src:T,alt:"image-20241115164221252",style:{zoom:"25%"}},null,-1)])),tab3:p(({value:o,isActive:t})=>n[28]||(n[28]=[s("img",{src:b,alt:"image-20241115164316365",style:{zoom:"25%"}},null,-1)])),_:1}),n[39]||(n[39]=a(`<div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义城市之间的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">dists </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义计算路径总距离的函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> dists[(route[i], route[i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])]</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> dists[(route[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], route[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])]  </span><span style="color:#88846F;"># 回到起始点</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> total_distance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义变异函数，用于2-opt交换</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> mutate_2_opt</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.sample(</span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route)), </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j, i</span></span>
<span class="line"><span style="color:#88846F;">    # 执行2-opt交换</span></span>
<span class="line"><span style="color:#F8F8F2;">    new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> route[:i] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[i:j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">][::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义TSP的局部搜索算法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> local_search_tsp</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">startroute</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i_max</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> startroute  </span><span style="color:#88846F;"># 初始化为起始路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    min_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(current_route, dists)  </span><span style="color:#88846F;"># 计算初始路径的总距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i_max):</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mutate_2_opt(current_route)  </span><span style="color:#88846F;"># 生成一个新路径</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(new_route, dists)  </span><span style="color:#88846F;"># 计算新路径的距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> new_distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> min_distance:  </span><span style="color:#88846F;"># 如果新路径更短，则更新最优解</span></span>
<span class="line"><span style="color:#F8F8F2;">            min_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_distance</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> current_route, min_distance  </span><span style="color:#88846F;"># 返回最优路径和最短距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义初始路径</span></span>
<span class="line"><span style="color:#F8F8F2;">start_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用局部搜索算法并输出结果</span></span>
<span class="line"><span style="color:#F8F8F2;">best_route, best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> local_search_tsp(start_route, dists)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径:&quot;</span><span style="color:#F8F8F2;">, best_route)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径的总距离:&quot;</span><span style="color:#F8F8F2;">, best_distance)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_4-simulated-annealing" tabindex="-1"><a class="header-anchor" href="#_4-simulated-annealing"><span>4. Simulated annealing</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> math</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义城市之间的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">dists </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义计算路径总距离的函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 累加相邻城市之间的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">        total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> dists[(route[i], route[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">])]</span></span>
<span class="line"><span style="color:#88846F;">    # 加上最后一个城市回到起始城市的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> dists[(route[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], route[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> total_distance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义变异函数，用于2-opt交换</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> mutate_2_opt</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 随机选择两个索引进行2-opt交换</span></span>
<span class="line"><span style="color:#F8F8F2;">    i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.sample(</span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route)), </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j, i</span></span>
<span class="line"><span style="color:#88846F;">    # 生成新的路径，将i到j之间的部分反转</span></span>
<span class="line"><span style="color:#F8F8F2;">    new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> route[:i] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[j:i</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 模拟退火算法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> simulated_annealing</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">start_route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">initial_temp</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cooling_rate</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0.995</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">min_temp</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start_route  </span><span style="color:#88846F;"># 当前路径初始化为起始路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(current_route, dists)  </span><span style="color:#88846F;"># 当前路径的总距离</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_route  </span><span style="color:#88846F;"># 初始化最优路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_distance  </span><span style="color:#88846F;"># 初始化最优距离</span></span>
<span class="line"><span style="color:#F8F8F2;">    temperature </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> initial_temp  </span><span style="color:#88846F;"># 设置初始温度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 当温度高于最低温度时，持续迭代</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> temperature </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> min_temp:</span></span>
<span class="line"><span style="color:#88846F;">        # 生成一个新的路径，并计算其距离</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mutate_2_opt(current_route)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(new_route, dists)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#88846F;">        # 判断是否接受新解：若新解更优则接受，若更差则以一定概率接受</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> new_distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> current_distance </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> random.random() </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> math.exp((current_distance </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> new_distance) </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> temperature):</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_route  </span><span style="color:#88846F;"># 接受新解作为当前解</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_distance</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">            # 如果新解优于最优解，则更新最优解</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> new_distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> best_distance:</span></span>
<span class="line"><span style="color:#F8F8F2;">                best_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"><span style="color:#F8F8F2;">                best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_distance</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#88846F;">        # 按照冷却速率降低温度</span></span>
<span class="line"><span style="color:#F8F8F2;">        temperature </span><span style="color:#F92672;">*=</span><span style="color:#F8F8F2;"> cooling_rate</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> best_route, best_distance  </span><span style="color:#88846F;"># 返回最终的最优路径和最优距离</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 定义初始路径</span></span>
<span class="line"><span style="color:#F8F8F2;">start_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 调用模拟退火算法并输出结果</span></span>
<span class="line"><span style="color:#F8F8F2;">best_route, best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> simulated_annealing(start_route, dists)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径:&quot;</span><span style="color:#F8F8F2;">, best_route)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径的总距离:&quot;</span><span style="color:#F8F8F2;">, best_distance)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_5-grasp" tabindex="-1"><a class="header-anchor" href="#_5-grasp"><span>5. Grasp</span></a></h4><p><strong>整体思路：</strong></p><ul><li>调用 random 库和 math 库。</li><li>首先封装一个函数算出两个城市之间的距离</li><li>再封装一个函数算出一条路线上城市的总距离</li><li><code>greedy_construct_solution</code> 用于随机构成一个初始路径</li><li><code>local_search</code>找到局部最优解，这个范围是局部的，因为循环次数有限。</li><li>不断搜索局部最优解，找到最优的局部最优解。</li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> math</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 计算两个城市之间的欧几里得距离</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> calculate_distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">city1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">city2</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    计算城市 city1 和 city2 之间的欧几里得距离。</span></span>
<span class="line"><span style="color:#E6DB74;">    :param city1: 城市1的坐标 (x1, y1)</span></span>
<span class="line"><span style="color:#E6DB74;">    :param city2: 城市2的坐标 (x2, y2)</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 两个城市之间的距离</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> math.sqrt((city1[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> city2[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]) </span><span style="color:#F92672;">**</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> (city1[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> city2[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#F92672;">**</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 计算路径的总距离</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> total_distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">path</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cities</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    计算给定路径的总距离。</span></span>
<span class="line"><span style="color:#E6DB74;">    :param path: 城市访问顺序的列表</span></span>
<span class="line"><span style="color:#E6DB74;">    :param cities: 城市的坐标列表</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 路径的总距离</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    distance </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(path)):</span></span>
<span class="line"><span style="color:#F8F8F2;">        city1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cities[path[i]]</span></span>
<span class="line"><span style="color:#F8F8F2;">        city2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cities[path[(i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(path)]]</span></span>
<span class="line"><span style="color:#F8F8F2;">        distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> calculate_distance(city1, city2)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> distance</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 随机化贪心构造初始解</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> greedy_construct_solution</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">cities</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    使用随机化贪心算法构造一个初始解。</span></span>
<span class="line"><span style="color:#E6DB74;">    :param cities: 城市的坐标列表</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 构造出的初始解路径</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    num_cities </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(cities)</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(num_cities))  </span><span style="color:#88846F;"># 未访问的城市列表</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_city </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.choice(unvisited)  </span><span style="color:#88846F;"># 随机选择一个起始城市</span></span>
<span class="line"><span style="color:#F8F8F2;">    solution.append(current_city)</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited.remove(current_city)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 构造路径，直到所有城市都被访问</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#88846F;">        # 构建候选列表，并按距离排序</span></span>
<span class="line"><span style="color:#F8F8F2;">        candidate_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> city </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#F8F8F2;">            distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> calculate_distance(cities[current_city], cities[city])</span></span>
<span class="line"><span style="color:#F8F8F2;">            candidate_list.append((city, distance))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 按距离排序，并构造受限候选列表 (RCL)</span></span>
<span class="line"><span style="color:#F8F8F2;">        candidate_list.sort(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">: x[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">        rcl_size </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> max</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(candidate_list) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 选择前 1/3 的较优解作为 RCL</span></span>
<span class="line"><span style="color:#F8F8F2;">        rcl </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> candidate_list[:rcl_size]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 从 RCL 中随机选择一个城市</span></span>
<span class="line"><span style="color:#F8F8F2;">        next_city </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.choice(rcl)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">        solution.append(next_city)</span></span>
<span class="line"><span style="color:#F8F8F2;">        unvisited.remove(next_city)</span></span>
<span class="line"><span style="color:#F8F8F2;">        current_city </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> next_city</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> solution</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 局部搜索优化解（2-opt 算法）</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> local_search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">solution</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cities</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    使用 2-opt 算法进行局部搜索优化。</span></span>
<span class="line"><span style="color:#E6DB74;">    :param solution: 初始解路径</span></span>
<span class="line"><span style="color:#E6DB74;">    :param cities: 城市的坐标列表</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 优化后的路径</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> solution[:]</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> total_distance(best_solution, cities)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    improved </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> improved:</span></span>
<span class="line"><span style="color:#F8F8F2;">        improved </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#88846F;">        # 2-opt 搜索：交换路径中的两个边</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(solution) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(solution)):</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 相邻城市跳过</span></span>
<span class="line"><span style="color:#F92672;">                    continue</span></span>
<span class="line"><span style="color:#88846F;">                # 交换两个城市之间的路径</span></span>
<span class="line"><span style="color:#F8F8F2;">                new_solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> best_solution[:]</span></span>
<span class="line"><span style="color:#F8F8F2;">                new_solution[i:j] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> best_solution[i:j][::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">                new_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> total_distance(new_solution, cities)</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> new_distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> best_distance:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    best_solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_solution[:]</span></span>
<span class="line"><span style="color:#F8F8F2;">                    best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_distance</span></span>
<span class="line"><span style="color:#F8F8F2;">                    improved </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> best_solution</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># GRASP 主函数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> grasp_tsp</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">cities</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">max_iterations</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    使用 GRASP 算法求解旅行商问题。</span></span>
<span class="line"><span style="color:#E6DB74;">    :param cities: 城市的坐标列表</span></span>
<span class="line"><span style="color:#E6DB74;">    :param max_iterations: 最大迭代次数</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: 最优路径和最短距离</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_solution </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_distance </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(max_iterations):</span></span>
<span class="line"><span style="color:#88846F;">        # 构造初始解</span></span>
<span class="line"><span style="color:#F8F8F2;">        initial_solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> greedy_construct_solution(cities)</span></span>
<span class="line"><span style="color:#88846F;">        # 局部搜索优化解</span></span>
<span class="line"><span style="color:#F8F8F2;">        improved_solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> local_search(initial_solution, cities)</span></span>
<span class="line"><span style="color:#88846F;">        # 计算路径总距离</span></span>
<span class="line"><span style="color:#F8F8F2;">        current_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> total_distance(improved_solution, cities)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 更新全局最优解</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> current_distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> best_distance:</span></span>
<span class="line"><span style="color:#F8F8F2;">            best_solution </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> improved_solution</span></span>
<span class="line"><span style="color:#F8F8F2;">            best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> current_distance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> best_solution, best_distance</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 主程序</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 定义城市的坐标 (x, y)</span></span>
<span class="line"><span style="color:#F8F8F2;">    cities </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">        (</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">        (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 最大迭代次数</span></span>
<span class="line"><span style="color:#F8F8F2;">    max_iterations </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 执行 GRASP 算法求解 TSP</span></span>
<span class="line"><span style="color:#F8F8F2;">    best_solution, best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> grasp_tsp(cities, max_iterations)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 输出最优路径和最短距离</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径:&quot;</span><span style="color:#F8F8F2;">, best_solution)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最短距离:&quot;</span><span style="color:#F8F8F2;">, best_distance)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,7))])}const K=i(Q,[["render",X]]),$=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week080910.html","title":"高级算法——第8周查漏补缺","lang":"zh-CN","frontmatter":{"title":"高级算法——第8周查漏补缺","icon":"python","date":"2024-11-11T21:08:11.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"Lecture 08 时间复杂度 image-20241115143641761image-20241115143641761 1. constant 如插值搜索（最好情况）的时间复杂度。 2. Logarithmic 如二分搜索的时间复杂度。 image-20241115145201611 每次都会将要操作的对象减半。符合 log 函数的定义。 3....","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Advanced_Algorithms/Week080910.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"高级算法——第8周查漏补缺"}],["meta",{"property":"og:description","content":"Lecture 08 时间复杂度 image-20241115143641761image-20241115143641761 1. constant 如插值搜索（最好情况）的时间复杂度。 2. Logarithmic 如二分搜索的时间复杂度。 image-20241115145201611 每次都会将要操作的对象减半。符合 log 函数的定义。 3...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-07T12:30:22.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"大三上"}],["meta",{"property":"article:tag","content":"高级算法课件"}],["meta",{"property":"article:published_time","content":"2024-11-11T21:08:11.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-07T12:30:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级算法——第8周查漏补缺\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-11T21:08:11.000Z\\",\\"dateModified\\":\\"2024-12-07T12:30:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1701251856000,"updatedTime":1733574622000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":8,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":10.05,"words":3014},"filePathRelative":"zh/Advanced_Algorithms/Week080910.md","localizedDate":"2024年11月11日","excerpt":"<h2>Lecture 08</h2>\\n<h3>时间复杂度</h3>\\n<figure><figcaption>image-20241115143641761</figcaption></figure>\\n<h4>1. constant </h4>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#F8F8F2\\">a </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> [</span><span style=\\"color:#AE81FF\\">11</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">22</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">33</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">44</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">55</span><span style=\\"color:#F8F8F2\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">b </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> [</span><span style=\\"color:#AE81FF\\">10</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">8</span><span style=\\"color:#F8F8F2\\">, </span><span style=\\"color:#AE81FF\\">7</span><span style=\\"color:#F8F8F2\\">]</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(a[</span><span style=\\"color:#AE81FF\\">0</span><span style=\\"color:#F8F8F2\\">])</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF\\">print</span><span style=\\"color:#F8F8F2\\">(b[</span><span style=\\"color:#AE81FF\\">0</span><span style=\\"color:#F8F8F2\\">])</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{K as comp,$ as data};

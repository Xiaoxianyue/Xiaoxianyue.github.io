import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as p}from"./app-Cc7WVUoo.js";const e={};function o(F,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="binary-iterative" tabindex="-1"><a class="header-anchor" href="#binary-iterative"><span>Binary Iterative</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> binary_search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    middle </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> arr[middle] </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> val:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[middle] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> val:</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[middle </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:]  </span><span style="color:#88846F;"># X</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[:middle]</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[middle] </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> val:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">        middle </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(binary_search([</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># output</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">IndexError</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;"> index out of </span><span style="color:#66D9EF;">range</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>应该是：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> binary_search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    middle </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span><span style="color:#88846F;">  # 一般左半部分会大一些。</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> arr[middle] </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> val:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[middle] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> val:</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[middle:]   </span><span style="color:#88846F;"># 这里容易列表为空。</span></span>
<span class="line"><span style="color:#F92672;">            else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[:middle] </span><span style="color:#88846F;"># 所以不担心这里列表为空了。</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[middle] </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> val:</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"><span style="color:#F8F8F2;">        middle </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(binary_search([</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="heap-sort-recursive" tabindex="-1"><a class="header-anchor" href="#heap-sort-recursive"><span>Heap_sort Recursive</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> sift_down</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    swap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> arr[left] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[swap] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> left </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> end:</span></span>
<span class="line"><span style="color:#F8F8F2;">        swap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> left</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> arr[right] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[swap] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> right </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> end:</span></span>
<span class="line"><span style="color:#F8F8F2;">        swap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> right</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> swap:</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[start], arr[swap] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[swap], arr[start]</span></span>
<span class="line"><span style="color:#F8F8F2;">        sift_down(arr, swap, end)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> heap_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">): </span><span style="color:#88846F;"># X</span></span>
<span class="line"><span style="color:#F8F8F2;">        sift_down(arr, i, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">): </span><span style="color:#88846F;"># X</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], arr[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">        sift_down(arr, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>应该是：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> sift_down</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    swap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start</span></span>
<span class="line"><span style="color:#F8F8F2;">    left </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> arr[left] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[swap] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> left </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> end:</span></span>
<span class="line"><span style="color:#F8F8F2;">        swap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> left</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> arr[right] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[swap] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> right </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> end:</span></span>
<span class="line"><span style="color:#F8F8F2;">        swap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> right</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> swap:</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[start], arr[swap] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[swap], arr[start]</span></span>
<span class="line"><span style="color:#F8F8F2;">        sift_down(arr, swap, end)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> heap_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">): </span><span style="color:#88846F;"># 到顶点也要 sift down 啊亲</span></span>
<span class="line"><span style="color:#F8F8F2;">        sift_down(arr, i, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">): </span><span style="color:#88846F;"># 一直交换到堆只剩1个节点。</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], arr[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">        sift_down(arr, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="bst-bfs" tabindex="-1"><a class="header-anchor" href="#bst-bfs"><span>BST bfs</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> bfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.root]</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> queue:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> visited:</span></span>
<span class="line"><span style="color:#F8F8F2;">                visited.append(node)</span></span>
<span class="line"><span style="color:#F8F8F2;">                queue.append(node.left)  </span><span style="color:#88846F;"># X</span></span>
<span class="line"><span style="color:#F8F8F2;">                queue.append(node.right)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> visited</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应该是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> bfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        queue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.root]</span></span>
<span class="line"><span style="color:#F8F8F2;">        visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> queue:</span></span>
<span class="line"><span style="color:#F8F8F2;">            node </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queue.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> node </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> visited:</span></span>
<span class="line"><span style="color:#F8F8F2;">                visited.append(node.val)</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> node.left:   </span><span style="color:#88846F;"># 必须要判断左右节点是否存在呀</span></span>
<span class="line"><span style="color:#F8F8F2;">                    queue.append(node.left)</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> node.right:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    queue.append(node.right)</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> visited</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kruskal-s-algorithm" tabindex="-1"><a class="header-anchor" href="#kruskal-s-algorithm"><span>kruskal’s algorithm</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Graph</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.V </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vertices  </span><span style="color:#88846F;"># 图的节点数</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 图的边集（格式：[权重, 起点, 终点]）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加边</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">u</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges.append([weight, u, v])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertex</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> parent[vertex] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> vertex:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> vertex</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, parent[vertex])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> union</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">rank</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        x_root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, x)</span></span>
<span class="line"><span style="color:#F8F8F2;">        y_root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, y)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> x_root </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> y_root:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> rank[x_root] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> rank[y_root]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[x_root] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> y_root</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> rank[x_root] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> rank[y_root]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[y_root] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x_root</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[x_root] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> y_root</span></span>
<span class="line"><span style="color:#F8F8F2;">            rank[y_root] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> kruskal</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.edges, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> item</span><span style="color:#F8F8F2;">: item[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># 首先，记得排序边列表。然后，熟悉lambda用法（冒号！）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">        rank </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.V):</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent.append(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">            rank.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        e </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">&lt;=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.V </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># NO!!</span></span>
<span class="line"><span style="color:#F8F8F2;">            u, v, weight </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.edges[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.union(parent, rank, u, v) </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> False</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.union(parent, rank, u, v)</span></span>
<span class="line"><span style="color:#F8F8F2;">            result.append([weight, u, v])</span></span>
<span class="line"><span style="color:#F8F8F2;">            e </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">g </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Graph(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">mst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> g.kruskal()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边集:&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> u, v, weight </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> mst:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;边 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">u</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">-</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">v</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 权重: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">weight</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>应该是：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Graph</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.V </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vertices  </span><span style="color:#88846F;"># 图的节点数</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []  </span><span style="color:#88846F;"># 图的边集（格式：[权重, 起点, 终点]）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加边</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> add_edge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">u</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">weight</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges.append([weight, u, v])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">vertex</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> parent[vertex] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> vertex:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> vertex</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, parent[vertex])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> union</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">parent</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">rank</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        x_root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, x)</span></span>
<span class="line"><span style="color:#F8F8F2;">        y_root </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.find(parent, y)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> x_root </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> y_root:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> rank[x_root] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> rank[y_root]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[x_root] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> y_root</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> rank[x_root] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> rank[y_root]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[y_root] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> x_root</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent[x_root] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> y_root</span></span>
<span class="line"><span style="color:#F8F8F2;">            rank[y_root] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#A6E22E;"> kruskal</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.edges </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.edges, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> item</span><span style="color:#F8F8F2;">: item[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># 首先，记得排序边列表。然后，熟悉lambda用法（冒号！）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">        rank </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.V):</span></span>
<span class="line"><span style="color:#F8F8F2;">            parent.append(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">            rank.append(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        e </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> e </span><span style="color:#F92672;">&lt;</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.V </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            u, v, weight </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.edges[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#FD971F;"> self</span><span style="color:#F8F8F2;">.union(parent, rank, u, v) </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> False</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">                continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FD971F;">            self</span><span style="color:#F8F8F2;">.union(parent, rank, u, v)</span></span>
<span class="line"><span style="color:#F8F8F2;">            result.append([weight, u, v])</span></span>
<span class="line"><span style="color:#F8F8F2;">            e </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">g </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Graph(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">g.add_edge(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">mst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> g.kruskal()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边集:&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> u, v, weight </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> mst:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;边 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">u</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">-</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">v</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 权重: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">weight</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="heuristic-tsp" tabindex="-1"><a class="header-anchor" href="#heuristic-tsp"><span>heuristic TSP</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> heuristic</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">vertices</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">edges</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> vertices[:]</span></span>
<span class="line"><span style="color:#F8F8F2;">    visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    connection </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> unvisited[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    visited.append(u)</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited.remove(u)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_cost </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        next_vertex </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> edge </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> edge[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> edge[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> visited:</span></span>
<span class="line"><span style="color:#F8F8F2;">                cost </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> edge[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> cost </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> min_cost:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    min_cost </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cost</span></span>
<span class="line"><span style="color:#F8F8F2;">                    next_vertex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> edge[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> next_vertex:</span></span>
<span class="line"><span style="color:#F8F8F2;">            connection.append([u, next_vertex, min_cost])</span></span>
<span class="line"><span style="color:#F8F8F2;">            visited.append(next_vertex)</span></span>
<span class="line"><span style="color:#F8F8F2;">            unvisited.remove(next_vertex)</span></span>
<span class="line"><span style="color:#F8F8F2;">            u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> next_vertex  </span><span style="color:#88846F;"># 把下一个设为其起始城市</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 这个并没有连贯的想到</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(visited) </span><span style="color:#F92672;">==</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(vertices):</span></span>
<span class="line"><span style="color:#F92672;">            for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> edges:</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> item[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> visited[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> item[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> visited[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                    connection.append(item)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> connection</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">edges </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">], [</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">vertices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> heuristic(vertices, edges)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(route)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="local-search-tsp" tabindex="-1"><a class="header-anchor" href="#local-search-tsp"><span>local search TSP</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dists </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> key, value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> dists.items():                              </span><span style="color:#88846F;"># !!</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> route[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> route[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> dists[(route[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], route[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> total_distance</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> change</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.sample(</span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route)), </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j, i</span></span>
<span class="line"><span style="color:#F8F8F2;">    new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> route[:i] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[i:j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">][::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> local_search</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">i_max</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    current_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(current_route, dists)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i_max):</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> change(current_route, dists)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(new_route, dists)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> new_distance </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> current_distance:</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"><span style="color:#F8F8F2;">            current_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_distance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> current_route, current_distance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">best_route, best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> local_search(dists)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径:&quot;</span><span style="color:#F8F8F2;">, best_route)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径的总距离:&quot;</span><span style="color:#F8F8F2;">, best_distance)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="退火" tabindex="-1"><a class="header-anchor" href="#退火"><span>退火</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dists </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">34</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, (</span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">): </span><span style="color:#AE81FF;">12</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> distance</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> key, value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> dists.items():</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> route[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> route[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> key[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_distance </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> dists[(route[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], route[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> total_distance</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> change</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">route</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.sample(</span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(route)), </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        i, j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j, i</span></span>
<span class="line"><span style="color:#F8F8F2;">    new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> route[:i] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[i:j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">][::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> route[j </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> simulate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">dists</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">inital_tem</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cooling_rate</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0.995</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end_tem</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    cur_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    cur_dis </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(cur_route, dists)</span></span>
<span class="line"><span style="color:#F8F8F2;">    min_route </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F8F8F2;">    min_dis </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    tem </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> inital_tem</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> tem </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> end_tem:</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> change(cur_route, dists)</span></span>
<span class="line"><span style="color:#F8F8F2;">        new_dis </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> distance(new_route, dists)</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> new_dis </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> cur_dis </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> random.random() </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> math.exp((cur_dis </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> new_dis) </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> tem): </span><span style="color:#88846F;"># 指数。</span></span>
<span class="line"><span style="color:#F8F8F2;">            cur_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_route</span></span>
<span class="line"><span style="color:#F8F8F2;">            cur_dis </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> new_dis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> cur_dis </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> min_dis:</span></span>
<span class="line"><span style="color:#F8F8F2;">            min_dis </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur_dis</span></span>
<span class="line"><span style="color:#F8F8F2;">            min_route </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cur_route</span></span>
<span class="line"><span style="color:#F8F8F2;">        tem </span><span style="color:#F92672;">*=</span><span style="color:#F8F8F2;"> cooling_rate</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> min_route, min_dis</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">best_route, best_distance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> simulate(dists)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径:&quot;</span><span style="color:#F8F8F2;">, best_route)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最优路径的总距离:&quot;</span><span style="color:#F8F8F2;">, best_distance)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="prim" tabindex="-1"><a class="header-anchor" href="#prim"><span>prim</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> prim</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">graph</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    visited </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {start}</span></span>
<span class="line"><span style="color:#F8F8F2;">    unvisited </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">(graph.keys()) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> visited  </span><span style="color:#88846F;"># !!</span></span>
<span class="line"><span style="color:#F8F8F2;">    spanning_tree </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    total_value </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_edge </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        next_city </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> city,weight </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[start].items():</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> weight </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> min_edge </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> city </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> unvisited:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_edge </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weight</span></span>
<span class="line"><span style="color:#F8F8F2;">                next_city </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> city</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> next_city:  </span><span style="color:#88846F;"># !!</span></span>
<span class="line"><span style="color:#F8F8F2;">            spanning_tree.append([start, next_city, min_edge])</span></span>
<span class="line"><span style="color:#F8F8F2;">            start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> next_city</span></span>
<span class="line"><span style="color:#F8F8F2;">            visited.add(next_city)</span></span>
<span class="line"><span style="color:#F8F8F2;">            unvisited.remove(next_city)</span></span>
<span class="line"><span style="color:#F8F8F2;">            total_value </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> min_edge</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> spanning_tree, total_value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;A&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;B&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;C&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;D&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 运行算法</span></span>
<span class="line"><span style="color:#F8F8F2;">start_node </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">spanning_tree, total_cost </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prim(graph, start_node)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的边:&quot;</span><span style="color:#F8F8F2;">, spanning_tree)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;最小生成树的总权重:&quot;</span><span style="color:#F8F8F2;">, total_cost)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="dijkstra" tabindex="-1"><a class="header-anchor" href="#dijkstra"><span>dijkstra</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> dijkstra</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">graph</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">origin</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">destination</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 初始化数据</span></span>
<span class="line"><span style="color:#F8F8F2;">    dist </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {vertex: </span><span style="color:#66D9EF;font-style:italic;">float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> vertex </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph}  </span><span style="color:#88846F;"># 距离初始化为无穷大</span></span>
<span class="line"><span style="color:#F8F8F2;">    previous </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {vertex: </span><span style="color:#AE81FF;">None</span><span style="color:#F92672;"> for</span><span style="color:#F8F8F2;"> vertex </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph}  </span><span style="color:#88846F;"># 前置节点初始化为 None</span></span>
<span class="line"><span style="color:#F8F8F2;">    dist[origin] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#88846F;">  # 起点到起点的距离为 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    Q </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">(graph.keys())  </span><span style="color:#88846F;"># 所有节点加入集合  #!!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> Q:</span></span>
<span class="line"><span style="color:#88846F;">        # 找到 Q 中距离最小的节点</span></span>
<span class="line"><span style="color:#F8F8F2;">        u </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> min</span><span style="color:#F8F8F2;">(Q, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> vertex</span><span style="color:#F8F8F2;">: dist[vertex]) </span><span style="color:#88846F;">#!!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> dist[u] </span><span style="color:#F92672;">==</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inf&#39;</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">            break</span><span style="color:#88846F;">  # 如果最小距离是无穷大，说明没有到达目的地的路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> destination:</span></span>
<span class="line"><span style="color:#F92672;">            break</span><span style="color:#88846F;">  # 到达目的地，停止循环</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        Q.remove(u)  </span><span style="color:#88846F;"># 从 Q 中移除节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 更新邻居节点的距离</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> neighbor, cost </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> graph[u].items():  </span></span>
<span class="line"><span style="color:#F8F8F2;">            alt </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dist[u] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> cost  </span><span style="color:#88846F;"># 计算新的可能距离</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> alt </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> dist[neighbor]:  </span><span style="color:#88846F;"># 如果新的距离小于当前记录的距离</span></span>
<span class="line"><span style="color:#F8F8F2;">                dist[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> alt  </span><span style="color:#88846F;"># 更新距离</span></span>
<span class="line"><span style="color:#F8F8F2;">                previous[neighbor] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> u  </span><span style="color:#88846F;"># 更新前置节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 构造最短路径</span></span>
<span class="line"><span style="color:#F8F8F2;">    S </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> destination</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> previous[u] </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        S.insert(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, u)  </span><span style="color:#88846F;"># 插入路径</span></span>
<span class="line"><span style="color:#F8F8F2;">        u </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> previous[u]</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> u </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> origin:</span></span>
<span class="line"><span style="color:#F8F8F2;">        S.insert(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, u)  </span><span style="color:#88846F;"># 将起点加入路径</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> S</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 示例用法</span></span>
<span class="line"><span style="color:#F8F8F2;">graph </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;A&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;B&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;C&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;D&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;D&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;B&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;C&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">origin </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;A&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">destination </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;D&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">shortest_path </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dijkstra(graph, origin, destination)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Shortest Path:&quot;</span><span style="color:#F8F8F2;">, shortest_path)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,26)]))}const t=n(e,[["render",o]]),i=JSON.parse('{"path":"/zh/Advanced_Algorithms/mistakebook.html","title":"错误总结","lang":"zh-CN","frontmatter":{"title":"错误总结","icon":"python","date":"2024-12-09T16:42:21.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1734943421000,"updatedTime":1734943421000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":1,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":6.25,"words":1876},"filePathRelative":"zh/Advanced_Algorithms/mistakebook.md","localizedDate":"2024年12月9日"}');export{t as comp,i as data};

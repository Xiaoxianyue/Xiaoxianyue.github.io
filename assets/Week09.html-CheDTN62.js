import{_ as F}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as p,e as i,a as s,w as a,r as c,o as y,d as n}from"./app-Cr94KhCm.js";const u="/assets/3d4d434a30e9e596f43d19d6da20e17-CiAzG94e.png",m="/assets/76659c011acc216b7825d4f9baf3dd5-BCfy3ftl.png",v="/assets/09eb3d32a14d0781772516166dbe304-D8cCqGY0.png",b={};function h(E,l){const r=c("CodeTabs"),t=c("Tabs");return y(),d("div",null,[l[22]||(l[22]=p('<h2 id="_0-进程和线程" tabindex="-1"><a class="header-anchor" href="#_0-进程和线程"><span>0. 进程和线程</span></a></h2><p>通过场景理解进程和线程较为容易：当我们上网浏览打开网页，就开启了一个进程。一个进程可以处理很多任务，这些任务叫线程。我们在这个网页上播放音乐、查找音乐、调整音乐播放进度属于开启了一个个小线程。</p><p>总而言之，进程就是线程的集合，进程就是由一个或多个线程构成的，线程是操作系统进行<strong>运算调度的最小单位</strong>，是进程中的一个最小运行单元。</p><h2 id="_1-intended-learning" tabindex="-1"><a class="header-anchor" href="#_1-intended-learning"><span>1. Intended Learning</span></a></h2><ul><li><p>Understand the multithreading concept</p></li><li><p>Be able to explain applications of multithreading</p></li><li><p>Understand and manage data sharing in multithreaded environments</p></li><li><p>Be able to explain the race condition</p></li><li><p>Understand implementation of threading (mainly) in Python and (partly) in C++</p></li></ul><h2 id="_2-what-is-multithreading" tabindex="-1"><a class="header-anchor" href="#_2-what-is-multithreading"><span>2. What is multithreading?</span></a></h2><ul><li>Many of the applications you’ve written so far do one thing after another</li><li>Multithreading allows us to run an application as separate processes which run ‘asynchronously’</li><li>i.e., the timing is arbitrary</li><li>This results in processes which run at the same or similar / overlapping times</li></ul><h2 id="_3-applications-of-multithreading" tabindex="-1"><a class="header-anchor" href="#_3-applications-of-multithreading"><span>3. Applications of multithreading</span></a></h2><ul><li>We’ll now look at two applications of multithreading: <ol><li>Chat server</li><li>Newspaper size getter</li></ol></li></ul><h2 id="_4-concurrent-example-1-chat-server" tabindex="-1"><a class="header-anchor" href="#_4-concurrent-example-1-chat-server"><span>4. Concurrent Example 1: CHAT SERVER</span></a></h2><ul><li><p>The first example of a threaded environment is a chat server</p></li><li><p>We’ll set this up and run it in the lecture</p></li><li><p>Note that all the code in this session is on Aula, but it needs a stack and a server</p></li><li><p>Best way to do this is Codio</p></li><li><p>There are instructions how to set this up on Aula</p></li></ul><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h3><p><strong>Aula 原版：</strong></p>',13)),i(r,{id:"122",data:[{id:"sever"},{id:"client"}]},{title0:a(({value:e,isActive:o})=>l[0]||(l[0]=[n("sever")])),title1:a(({value:e,isActive:o})=>l[1]||(l[1]=[n("client")])),tab0:a(({value:e,isActive:o})=>l[2]||(l[2]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#server.py")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#run this first ")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," socket")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," socket.socket(socket."),s("span",{style:{color:"#AE81FF"}},"AF_INET"),s("span",{style:{color:"#F8F8F2"}},", socket."),s("span",{style:{color:"#AE81FF"}},"SOCK_STREAM"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock.bind(("),s("span",{style:{color:"#E6DB74"}},"'127.0.0.1'"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"12345"),s("span",{style:{color:"#F8F8F2"}},"))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock.listen("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"connections "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," handler"),s("span",{style:{color:"#F8F8F2"}}," ("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"c"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"a"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," c.recv("),s("span",{style:{color:"#AE81FF"}},"4098"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," connection "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," connections:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," connection "),s("span",{style:{color:"#F92672"}},"!="),s("span",{style:{color:"#F8F8F2"}}," c:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                  connection.send(data)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," data:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"              break")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    c, a "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," sock.accept()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cThread "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," threading.Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"handler, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(c, a))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cThread.daemon "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," True")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cThread.start()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    connections.append(c)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(connections)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[3]||(l[3]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#client.py")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#run multiple instances of this after starting the server")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," socket")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," socket.socket(socket."),s("span",{style:{color:"#AE81FF"}},"AF_INET"),s("span",{style:{color:"#F8F8F2"}},", socket."),s("span",{style:{color:"#AE81FF"}},"SOCK_STREAM"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock.connect(("),s("span",{style:{color:"#E6DB74"}},"'127.0.0.1'"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"12345"),s("span",{style:{color:"#F8F8F2"}},"))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," sendMsg"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        msg "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," input"),s("span",{style:{color:"#F8F8F2"}},"().encode()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        sock.send(msg)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"iThread "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," threading.Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"sendMsg)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"iThread.daemon "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," True")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"iThread.start()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    #this is data received back from the server")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," sock.recv("),s("span",{style:{color:"#AE81FF"}},"4098"),s("span",{style:{color:"#F8F8F2"}},").decode()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," data:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        break")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(data)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[23]||(l[23]=s("p",null,[s("strong",null,"注释版：")],-1)),i(r,{id:"133",data:[{id:"sever"},{id:"client"}]},{title0:a(({value:e,isActive:o})=>l[4]||(l[4]=[n("sever")])),title1:a(({value:e,isActive:o})=>l[5]||(l[5]=[n("client")])),tab0:a(({value:e,isActive:o})=>l[6]||(l[6]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 导入 socket 和 threading 模块")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," socket")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 创建一个 socket 对象，使用 IPv4 和 TCP 协议")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," socket.socket(socket."),s("span",{style:{color:"#AE81FF"}},"AF_INET"),s("span",{style:{color:"#F8F8F2"}},", socket."),s("span",{style:{color:"#AE81FF"}},"SOCK_STREAM"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 绑定服务器 IP 和端口")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock.bind(("),s("span",{style:{color:"#E6DB74"}},"'127.0.0.1'"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"12345"),s("span",{style:{color:"#F8F8F2"}},"))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 开始监听客户端连接，最多可以排队一个连接")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock.listen("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 存储所有连接的客户端")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"connections "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个 handler 函数，用于处理每个客户端的消息")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," handler"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"c"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"a"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 接收客户端发送的数据（最大接收 4098 字节）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," c.recv("),s("span",{style:{color:"#AE81FF"}},"4098"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 遍历所有连接的客户端，将接收到的数据转发给每个其他客户端")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," connection "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," connections:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," connection "),s("span",{style:{color:"#F92672"}},"!="),s("span",{style:{color:"#F8F8F2"}}," c:  "),s("span",{style:{color:"#88846F"}},"# 排除自己")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                connection.send(data)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 如果没有数据（客户端关闭连接），退出循环")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," data:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            break")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 主循环，等待客户端连接")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 接受客户端连接")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    c, a "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," sock.accept()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 启动一个新线程处理该客户端的消息")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cThread "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," threading.Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"handler, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(c, a))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cThread.daemon "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#88846F"}},"  # 设置为守护线程，程序退出时自动结束")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cThread.start()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 将新连接的客户端添加到连接列表中")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    connections.append(c)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 打印当前所有连接的客户端")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(connections)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[7]||(l[7]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 导入 socket 和 threading 模块")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," socket")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 创建一个 socket 对象，使用 IPv4 和 TCP 协议")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," socket.socket(socket."),s("span",{style:{color:"#AE81FF"}},"AF_INET"),s("span",{style:{color:"#F8F8F2"}},", socket."),s("span",{style:{color:"#AE81FF"}},"SOCK_STREAM"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 连接到服务器的 IP 和端口")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sock.connect(("),s("span",{style:{color:"#E6DB74"}},"'127.0.0.1'"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"12345"),s("span",{style:{color:"#F8F8F2"}},"))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个发送消息的函数")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," sendMsg"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 获取用户输入，并将其编码为字节串发送")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        msg "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," input"),s("span",{style:{color:"#F8F8F2"}},"().encode()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        sock.send(msg)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 启动一个线程负责发送消息")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"iThread "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," threading.Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"sendMsg)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"iThread.daemon "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#88846F"}},"  # 设置为守护线程")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"iThread.start()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 接收来自服务器的数据并打印")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"while"),s("span",{style:{color:"#AE81FF"}}," True"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 接收数据（最大 4098 字节）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," sock.recv("),s("span",{style:{color:"#AE81FF"}},"4098"),s("span",{style:{color:"#F8F8F2"}},").decode()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 如果没有数据（服务器关闭连接），退出循环")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," data:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        break")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 打印接收到的数据")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(data)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[24]||(l[24]=p('<h3 id="过程详解" tabindex="-1"><a class="header-anchor" href="#过程详解"><span>过程详解</span></a></h3><h4 id="_1-启动服务器-server-py" tabindex="-1"><a class="header-anchor" href="#_1-启动服务器-server-py"><span>1. 启动服务器 (<code>server.py</code>)：</span></a></h4><ol><li><p>打开一个终端窗口。</p></li><li><p>确保你已经在 <code>server.py</code> 文件所在的目录。</p></li><li><p>执行以下命令来运行服务器：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> server.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>服务器应该开始监听客户端连接，等待连接的客户端发送消息。</p></li></ol><h4 id="_2-启动客户端-client-py" tabindex="-1"><a class="header-anchor" href="#_2-启动客户端-client-py"><span>2. 启动客户端 (<code>client.py</code>)：</span></a></h4><p>你需要在多个终端窗口中启动多个客户端，以便测试多用户聊天功能。</p><ul><li><p>打开 <strong>另一个终端窗口</strong>（可以是多个窗口），并确保你在 <code>client.py</code> 文件所在的目录。</p></li><li><p>执行以下命令来启动一个客户端：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> client.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>你可以运行多个客户端实例，只要在每个终端窗口中运行上面的命令，就能模拟多个用户同时连接到服务器。</p></li></ul><h4 id="_3-测试聊天功能" tabindex="-1"><a class="header-anchor" href="#_3-测试聊天功能"><span>3. 测试聊天功能：</span></a></h4><ul><li><strong>客户端输入消息：</strong> 启动客户端后，每个客户端都会提示你输入消息。你可以在每个客户端窗口输入不同的消息，看看消息是否能正确地从一个客户端传递到其他客户端。</li><li><strong>消息广播：</strong> 当你在一个客户端输入消息并按 Enter 键时，服务器会将这条消息转发给所有其他连接的客户端，其他客户端会显示你发送的消息。</li></ul><h4 id="_4-关闭连接" tabindex="-1"><a class="header-anchor" href="#_4-关闭连接"><span>4. 关闭连接：</span></a></h4><ul><li>如果你想关闭某个客户端，只需在该客户端窗口按 <code>Ctrl + C</code> 或关闭该终端窗口即可。</li><li>如果要停止服务器，可以在服务器的终端窗口按 <code>Ctrl + C</code>。</li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项：</span></a></h4><ul><li><strong>端口占用问题：</strong> 如果你在本地运行多个服务器或客户端，确保端口 <code>12345</code> 没有被其他程序占用。如果端口被占用，你可以选择更换端口号，比如 <code>12346</code> 等。</li><li><strong>防火墙/网络问题：</strong> 由于使用的是本地地址 (<code>127.0.0.1</code>)，它应该不受防火墙影响，但如果你要在不同机器上测试，需要确保防火墙设置允许使用该端口。</li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h4><ol><li>启动 <code>server.py</code>，它会开始监听。</li><li>启动多个 <code>client.py</code> 实例，输入消息进行聊天。</li><li>观察是否所有客户端都能收到其他客户端发出的消息。</li></ol><h2 id="_5-concurrent-example-2-news-scrapers" tabindex="-1"><a class="header-anchor" href="#_5-concurrent-example-2-news-scrapers"><span>5. Concurrent Example 2: NEWS SCRAPERS</span></a></h2><h3 id="more-about-threads" tabindex="-1"><a class="header-anchor" href="#more-about-threads"><span>More About Threads</span></a></h3><ul><li><p>Chat Servers set up threads which run independently so that messages can be sent and received in any order</p></li><li><p>Threads also allow processes to be run concurrently – at the same time, or near the same time</p></li><li><p>This makes applications faster</p></li></ul><h3 id="news-size" tabindex="-1"><a class="header-anchor" href="#news-size"><span>News size</span></a></h3><ul><li><p>First, we’ll check out and run <a href="http://non-concurrent-example-URLs-timeit.py" target="_blank" rel="noopener noreferrer">non-concurrent-example-URLs-timeit.py</a></p></li><li><p>This goes to news URLs, reports the URL, and prints the size of the data received</p></li><li><p>Note the time taken</p></li><li><p>Code analysis (excluding timeit) over</p></li></ul>',19)),i(r,{id:"307",data:[{id:'<a href="http://non-concurrent-example-URLs.py" target="_blank" rel="noopener noreferrer">non-concurrent-example-URLs.py</a>'},{id:'<a href="http://non-concurrent-example-URLs.timeit.py" target="_blank" rel="noopener noreferrer">non-concurrent-example-URLs.timeit.py</a>'},{id:'<a href="http://concurrent-example-URLs.py" target="_blank" rel="noopener noreferrer">concurrent-example-URLs.py</a>'},{id:'<a href="http://concurrent-example-URLs.timeit.py" target="_blank" rel="noopener noreferrer">concurrent-example-URLs.timeit.py</a>'}]},{title0:a(({value:e,isActive:o})=>l[8]||(l[8]=[s("a",{href:"http://non-concurrent-example-URLs.py",target:"_blank",rel:"noopener noreferrer"},"non-concurrent-example-URLs.py",-1)])),title1:a(({value:e,isActive:o})=>l[9]||(l[9]=[s("a",{href:"http://non-concurrent-example-URLs.timeit.py",target:"_blank",rel:"noopener noreferrer"},"non-concurrent-example-URLs.timeit.py",-1)])),title2:a(({value:e,isActive:o})=>l[10]||(l[10]=[s("a",{href:"http://concurrent-example-URLs.py",target:"_blank",rel:"noopener noreferrer"},"concurrent-example-URLs.py",-1)])),title3:a(({value:e,isActive:o})=>l[11]||(l[11]=[s("a",{href:"http://concurrent-example-URLs.timeit.py",target:"_blank",rel:"noopener noreferrer"},"concurrent-example-URLs.timeit.py",-1)])),tab0:a(({value:e,isActive:o})=>l[12]||(l[12]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 导入 urllib.request 模块，用于处理 URL 请求")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," urllib.request")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个包含多个 URL 的列表，后续程序会依次访问这些网站")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#AE81FF"}},"URLS"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#E6DB74"}},"'http://www.foxnews.com/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.cnn.com/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://europe.wsj.com/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.bbc.co.uk/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://some-made-up-domain.com/'"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个函数用于加载指定 URL 的网页内容")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 参数 url: 要访问的 URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 参数 timeout: 设置连接的超时时间，单位是秒")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," load_url"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"url"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"timeout"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 使用 urllib.request.urlopen() 打开 URL，timeout 用于指定超时时间")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 使用 with 语句保证请求完成后会自动关闭连接")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    with"),s("span",{style:{color:"#F8F8F2"}}," urllib.request.urlopen(url, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"timeout"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"timeout) "),s("span",{style:{color:"#F92672"}},"as"),s("span",{style:{color:"#F8F8F2"}}," conn:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 读取网页内容并返回")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," conn.read()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个函数，展示如何按顺序请求多个 URL（不使用并发）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," non_concurrent_URLs_example"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 遍历 URLS 列表中的每个 URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," url "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#AE81FF"}}," URLS"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 调用 load_url 函数加载 URL，设置 60 秒的超时")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," load_url(url, "),s("span",{style:{color:"#AE81FF"}},"60"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," Exception"),s("span",{style:{color:"#F92672"}}," as"),s("span",{style:{color:"#F8F8F2"}}," exc:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 如果发生异常（如连接失败、超时等），打印错误信息")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"            print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," generated an exception: "),s("span",{style:{color:"#AE81FF"}},"%s"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," (url, exc))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 如果请求成功，打印网页的大小（以字节为单位）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"            print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," page is "),s("span",{style:{color:"#AE81FF"}},"%d"),s("span",{style:{color:"#E6DB74"}}," bytes'"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," (url, "),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(data)))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 调用 non_concurrent_URLs_example 函数开始请求并输出结果")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"non_concurrent_URLs_example()")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[13]||(l[13]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," timeit  "),s("span",{style:{color:"#88846F"}},"# 导入 timeit 模块，用来计时代码执行的时间")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 将需要执行并计时的代码放在三引号之间，作为一个字符串传入 timeit")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"code_to_time "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' """')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"# 导入所需的模块")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"import concurrent.futures  # 用于并发编程的线程池模块")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"import urllib.request  # 用于处理 HTTP 请求")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"import threading  # 用于多线程")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"# 定义需要请求的 URL 列表")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"URLS = ['http://www.foxnews.com/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.cnn.com/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://europe.wsj.com/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.bbc.co.uk/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://some-made-up-domain.com/']")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"# 定义请求 URL 的函数，设置超时时间")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"def load_url(url, timeout):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    # 使用 urllib.request.urlopen 发送 HTTP 请求并读取内容")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    with urllib.request.urlopen(url, timeout=timeout) as conn:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        return conn.read()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"# 定义一个示例函数，演示如何使用线程池并发请求多个 URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"def concurrent_URLs_example():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    # 使用 ThreadPoolExecutor 创建一个最大线程数为 5 的线程池")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        # 将 URL 和对应的请求任务提交到线程池，返回一个字典 future_to_url")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        # 使用 as_completed 获取已经完成的任务")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        for future in concurrent.futures.as_completed(future_to_url):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            url = future_to_url[future]  # 获取当前任务对应的 URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            try:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                # 获取任务结果（即网页内容）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                data = future.result()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            except Exception as exc:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                # 如果请求过程中抛出异常，则打印异常信息")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                print('"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," generated an exception: "),s("span",{style:{color:"#AE81FF"}},"%s"),s("span",{style:{color:"#E6DB74"}},"' % (url, exc), "),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            else:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                # 如果请求成功，打印网页的大小（字节数）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                print('"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," page is "),s("span",{style:{color:"#AE81FF"}},"%d"),s("span",{style:{color:"#E6DB74"}}," bytes' % (url, len(data)),"),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        print("),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"# 执行并发请求的示例函数")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"concurrent_URLs_example()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 使用 timeit.timeit 来计时代码执行的时间")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# timeit 会执行传入的代码多次，这里设置执行 10 次，最后取平均值")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"elapsed_time "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," timeit.timeit(code_to_time, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"number"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#AE81FF"}}," 10"),s("span",{style:{color:"#88846F"}},"  # 计算 10 次执行的平均时间")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 打印每次执行的平均时间（单位为秒）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(elapsed_time)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab2:a(({value:e,isActive:o})=>l[14]||(l[14]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 导入需要的库")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," concurrent.futures  "),s("span",{style:{color:"#88846F"}},"# 用于并发执行任务")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," urllib.request  "),s("span",{style:{color:"#88846F"}},"# 用于发送网络请求")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," timeit  "),s("span",{style:{color:"#88846F"}},"# 用于计时，虽然在此代码中未被使用")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 预定义一个URL列表")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#AE81FF"}},"URLS"),s("span",{style:{color:"#F92672"}}," ="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#E6DB74"}},"'http://www.foxnews.com/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.cnn.com/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://europe.wsj.com/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.bbc.co.uk/'"),s("span",{style:{color:"#F8F8F2"}},",")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://some-made-up-domain.com/'"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个函数，用于加载指定的URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 该函数接受两个参数：url（要访问的网址）和timeout（请求的超时时间）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," load_url"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"url"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"timeout"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 使用urllib.request.urlopen()方法打开指定的URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 其中timeout表示连接超时的时间（单位为秒）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    with"),s("span",{style:{color:"#F8F8F2"}}," urllib.request.urlopen(url, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"timeout"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"timeout) "),s("span",{style:{color:"#F92672"}},"as"),s("span",{style:{color:"#F8F8F2"}}," conn:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 返回页面的内容（以字节形式）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#F8F8F2"}}," conn.read()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义一个函数，展示如何并发地加载多个URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," concurrent_URLs_example"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 使用concurrent.futures.ThreadPoolExecutor创建一个线程池执行器")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # max_workers=5表示最多允许同时执行5个线程")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    with"),s("span",{style:{color:"#F8F8F2"}}," concurrent.futures.ThreadPoolExecutor("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"max_workers"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#F92672"}},"as"),s("span",{style:{color:"#F8F8F2"}}," executor:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 创建一个字典future_to_url，将每个URL任务与线程池中的future对象关联")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # executor.submit(load_url, url, 60)会将load_url函数及其参数提交到线程池中")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 60是请求的超时时间")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        future_to_url "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," {executor.submit(load_url, url, "),s("span",{style:{color:"#AE81FF"}},"60"),s("span",{style:{color:"#F8F8F2"}},"): url "),s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," url "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#AE81FF"}}," URLS"),s("span",{style:{color:"#F8F8F2"}},"}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 使用concurrent.futures.as_completed()方法来遍历所有任务的结果")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"        # 该方法会按任务完成的顺序返回future对象")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        for"),s("span",{style:{color:"#F8F8F2"}}," future "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," concurrent.futures.as_completed(future_to_url):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"            # 获取当前future对象对应的URL")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            url "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," future_to_url[future]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"                # 调用future.result()获取任务的返回结果（即网页内容）")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                data "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," future.result()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," Exception"),s("span",{style:{color:"#F92672"}}," as"),s("span",{style:{color:"#F8F8F2"}}," exc:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"                # 如果任务执行过程中发生异常，打印异常信息")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"                print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," generated an exception: "),s("span",{style:{color:"#AE81FF"}},"%s"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," (url, exc))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"                # 如果任务执行成功，打印URL及其页面的字节长度")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"                print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," page is "),s("span",{style:{color:"#AE81FF"}},"%d"),s("span",{style:{color:"#E6DB74"}}," bytes'"),s("span",{style:{color:"#F92672"}}," %"),s("span",{style:{color:"#F8F8F2"}}," (url, "),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(data)))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 调用concurrent_URLs_example函数来执行并发任务")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"concurrent_URLs_example()")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab3:a(({value:e,isActive:o})=>l[15]||(l[15]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," timeit")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"code_to_time "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' """')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"import concurrent.futures")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"import urllib.request")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"import threading")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"URLS = ['http://www.foxnews.com/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.cnn.com/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://europe.wsj.com/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://www.bbc.co.uk/',")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        'http://some-made-up-domain.com/']")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"def load_url(url, timeout):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    with urllib.request.urlopen(url, timeout=timeout) as conn:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        return conn.read()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"def concurrent_URLs_example():")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        for future in concurrent.futures.as_completed(future_to_url):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            url = future_to_url[future]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            try:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                data = future.result()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            except Exception as exc:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                print('"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," generated an exception: "),s("span",{style:{color:"#AE81FF"}},"%s"),s("span",{style:{color:"#E6DB74"}},"' % (url, exc), "),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"            else:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"                print('"),s("span",{style:{color:"#AE81FF"}},"%r"),s("span",{style:{color:"#E6DB74"}}," page is "),s("span",{style:{color:"#AE81FF"}},"%d"),s("span",{style:{color:"#E6DB74"}}," bytes' % (url, len(data)),"),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"        print("),s("span",{style:{color:"#AE81FF"}},"\\n"),s("span",{style:{color:"#E6DB74"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"concurrent_URLs_example()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},'#timeit requires a string so code to be timed appears in """...""" like a docstring')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"elapsed_time "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," timeit.timeit(code_to_time, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"number"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},")"),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#88846F"}},"            #get the average of 10 cycles")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(elapsed_time)                                               "),s("span",{style:{color:"#88846F"}},"#time printed in seconds")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[25]||(l[25]=p(`<h2 id="_6-理解的例子" tabindex="-1"><a class="header-anchor" href="#_6-理解的例子"><span>6. 理解的例子</span></a></h2><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> start</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1000000</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># </span><span style="color:#F92672;">TODO</span><span style="color:#88846F;">: 0.20663189888000488</span></span>
<span class="line"><span style="color:#88846F;"># 不使用任何线程（裸着来）</span></span>
<span class="line"><span style="color:#88846F;"># def main():</span></span>
<span class="line"><span style="color:#88846F;">#     start_time = time.time()</span></span>
<span class="line"><span style="color:#88846F;">#     for i in range(10):</span></span>
<span class="line"><span style="color:#88846F;">#         start()</span></span>
<span class="line"><span style="color:#88846F;">#     print(time.time() - start_time)</span></span>
<span class="line"><span style="color:#88846F;">#</span></span>
<span class="line"><span style="color:#88846F;">#</span></span>
<span class="line"><span style="color:#88846F;"># if __name__ == &#39;__main__&#39;:</span></span>
<span class="line"><span style="color:#88846F;">#     main()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    start_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.time()</span></span>
<span class="line"><span style="color:#F8F8F2;">    thread_name_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}  </span><span style="color:#88846F;"># 我们先创建个字典 (thread_name_time) 用来来存储我们每个线程的名称与对应的时间</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">        # 也就是说，每个线程顺序执行</span></span>
<span class="line"><span style="color:#F8F8F2;">        thread </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">start)  </span><span style="color:#88846F;"># target=写你要多线程运行的函数，不需要加括号</span></span>
<span class="line"><span style="color:#F8F8F2;">        thread.start()  </span><span style="color:#88846F;"># 上一行开启了线程，这一行是开始运行（也就是开启个 run）</span></span>
<span class="line"><span style="color:#F8F8F2;">        thread_name_time[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> thread  </span><span style="color:#88846F;"># 添加数据到我们的字典当中，这里为什么要用i做key？这是因为这样方便我们join</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        thread_name_time[i].join()</span></span>
<span class="line"><span style="color:#88846F;">        # 	join() 等待线程执行完毕（也就是说卡在这里，这个线程执行完才会执行下一步）</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start_time)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    main()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_7-try-except" tabindex="-1"><a class="header-anchor" href="#_7-try-except"><span>7. try except</span></a></h2><p>对于一个需要输入的代码，输入一个整数来判断是奇数还是偶数：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;:&gt;&gt;&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_input.isdigit():</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(user_input) </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;even&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;odd&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;需要正常数字&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们需要一个条件判断来排除输入不是整数的情况，让程序不至于报错。</p><p>新语法可以使得这个功能更简洁清晰：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 正常执行的代码</span></span>
<span class="line"><span style="color:#F92672;">    pass</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 出现错误的代码</span></span>
<span class="line"><span style="color:#F92672;">    pass</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基础实现" tabindex="-1"><a class="header-anchor" href="#基础实现"><span>基础实现</span></a></h3><p>对于上述功能的代码，我们可以这么写：</p>`,10)),i(t,{id:"348",data:[{id:""},{id:"+ 条件"},{id:"+ 条件s"}]},{title0:a(({value:e,isActive:o})=>l[16]||(l[16]=[])),title1:a(({value:e,isActive:o})=>l[17]||(l[17]=[n("+ 条件")])),title2:a(({value:e,isActive:o})=>l[18]||(l[18]=[n("+ 条件s")])),tab0:a(({value:e,isActive:o})=>l[19]||(l[19]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," input"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"':>>>'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," int"),s("span",{style:{color:"#F8F8F2"}},"(user_input)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," user_input "),s("span",{style:{color:"#F92672"}},"%"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," =="),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(even)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(odd)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"except"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Invalid'"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:e,isActive:o})=>l[20]||(l[20]=[s("p",null,[n("当然，except 后面还可以跟条件。什么样的条件？—— "),s("strong",null,"报错类型。"),n(" 就是如果代码不是 except 后面跟的报错类型，就不会执行 except 里面的命令。")],-1),s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," input"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"':>>>'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," int"),s("span",{style:{color:"#F8F8F2"}},"(user_input)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," user_input "),s("span",{style:{color:"#F92672"}},"%"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," =="),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(even)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(odd)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," TypeError"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Invalid'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# output")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},":"),s("span",{style:{color:"#F92672"}},">>>"),s("span",{style:{color:"#F8F8F2"}},"a")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Traceback (most recent call last):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"  File "),s("span",{style:{color:"#E6DB74"}},'"D:'),s("span",{style:{color:"#AE81FF"}},"\\603"),s("span",{style:{color:"#E6DB74"}},'\\pythonProject1\\.venv\\Scripts\\demo.py"'),s("span",{style:{color:"#F8F8F2"}},", line "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F92672"}}," <"),s("span",{style:{color:"#F8F8F2"}},"module"),s("span",{style:{color:"#F92672"}},">")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," int"),s("span",{style:{color:"#F8F8F2"}},"(user_input)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"ValueError"),s("span",{style:{color:"#F8F8F2"}},": invalid literal "),s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," int"),s("span",{style:{color:"#F8F8F2"}},"() "),s("span",{style:{color:"#F92672"}},"with"),s("span",{style:{color:"#F8F8F2"}}," base "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#E6DB74"}},"'a'")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,[n("这里的报错属于 "),s("code",null,"ValueError"),n(" ，于是 except 后接 "),s("code",null,"TypeError"),n(" 会不执行 except 后面的命令，报错。")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," input"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"':>>>'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," int"),s("span",{style:{color:"#F8F8F2"}},"(user_input)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," user_input "),s("span",{style:{color:"#F92672"}},"%"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," =="),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(even)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(odd)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," ValueError"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Invalid'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# output")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},":"),s("span",{style:{color:"#F92672"}},">>>"),s("span",{style:{color:"#F8F8F2"}},"a")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Invalid")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab2:a(({value:e,isActive:o})=>l[21]||(l[21]=[s("p",null,"当然，一个 except 可以有多个条件，也可以有多个 except",-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," input"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"':>>>'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"try"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    user_input "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," int"),s("span",{style:{color:"#F8F8F2"}},"(user_input)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F8F8F2"}}," user_input "),s("span",{style:{color:"#F92672"}},"%"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F92672"}}," =="),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(even)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"        print"),s("span",{style:{color:"#F8F8F2"}},"(odd)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"except"),s("span",{style:{color:"#F8F8F2"}}," ("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"ValueError"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"TypeError"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Invalid'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"except"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," KeyboardInterrupt"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Interrupted'"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),l[26]||(l[26]=p(`<h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally"><span>finally</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;:&gt;&gt;&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(user_input)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> user_input </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(even)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(odd)</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">ValueError</span><span style="color:#F8F8F2;">,</span><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Invalid&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">finally</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">&gt;&gt;&gt;</span><span style="color:#F8F8F2;">h</span></span>
<span class="line"><span style="color:#F8F8F2;">Invalid</span></span>
<span class="line"><span style="color:#F8F8F2;">a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>无论发生什么，代码<mark>最后</mark>都会执行 finally。finally 不能单独存在，必须与 try except 搭配使用。</p><h2 id="_8-计算密集型和io密集型" tabindex="-1"><a class="header-anchor" href="#_8-计算密集型和io密集型"><span>8. 计算密集型和IO密集型</span></a></h2><img src="`+u+`" alt="3d4d434a30e9e596f43d19d6da20e17" style="zoom:33%;"><blockquote><p>BIOS: B: Base; I: Input; O: Output; S: System</p></blockquote><p>也就是你电脑开机的时候就会启动的。</p><ol><li><strong>计算密集型</strong></li></ol><blockquote><p>在上面的时候，我们开启了两个线程，如果这两个线程要同时执行，那同一时期 CPU 上只有一个线程在执行。 那从上图可知，那这两个线程就需要频繁的在上下文切换。 Ps：我们这个绿色表示我们这个线程正在执行，红色代表阻塞。 所以，我们可以明显的观察到，线程的上下文切换也是需要消耗资源的（时间-ms）不断的归还和拿取 GIL 等，切换上下文。明显造成很大的资源浪费。</p></blockquote><ol start="2"><li><strong>IO密集型</strong></li></ol><blockquote><p>我们现在假设，有个服务器程序（Socket）也就是我们新开的一个程序（也就是我们网络爬虫的最底层）开始爬取目标网页了，我们那个网页呢，有两个线程同时运行，我们线程二已经请求成功开始运行了，也就是上图的 （Thread 2）绿色一条路过去。 而我们的线程一（Thread 1）- Datagram（这里它开启了一个 UDP），然后等待数据建立（也就是等待哪些 HTML、CSS 等数据返回）也就是说，在 Ready to receive（recvfrom） 之间都是准备阶段。这样就是有一段时间一直阻塞，而我们的线程二可以一直无停歇也不用切换上下文就一直在运行。这样的 IO 密集型就有很大的好处。</p></blockquote><p>这里我们需要注意的是，我们的多线程是运行在 IO 密集型上的，我们得区分清楚。</p><p>还有就是，资源等待，比如有时候我们使用浏览器发起了一个 Get 请求，那浏览器图标上面在转圈圈的时候就是我们请求资源等待的时间，（也就是图上面的 Datagram 到 Ready to receive ）数据建立到数据接收（就是转圈圈的时间）。我们完全就不需要执行它，就让它等待就好。这个时候让另一个线程去执行就好</p><h2 id="_9-线程" tabindex="-1"><a class="header-anchor" href="#_9-线程"><span>9. 线程</span></a></h2><h3 id="非守护线程" tabindex="-1"><a class="header-anchor" href="#非守护线程"><span>非守护线程</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading, time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> start</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(num)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().name) </span><span style="color:#88846F;"># 当前线程名称</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().is_alive()) </span><span style="color:#88846F;"># 当前线程状态</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().ident) </span><span style="color:#88846F;"># 当前线程的编号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;start&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;"># 要使用多线程哪个函数&gt;&gt;&gt;target=函数,name=给这个多线程取个名字</span></span>
<span class="line"><span style="color:#88846F;"># 如果你不起一个名字的话，那那它会自己去起一个名字的（pid）也就是个 ident</span></span>
<span class="line"><span style="color:#88846F;"># 类似声明</span></span>
<span class="line"><span style="color:#F8F8F2;">thread </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">start,</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;my first thread&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 每个线程写完你不start()的话，就类似只是声明</span></span>
<span class="line"><span style="color:#F8F8F2;">thread.start()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;stop&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>由上图可知，声明为线程函数的函数也可以有参数，具体传入参数的方法：<code>args = # 元组</code>，有几个参数元组里传入多少个参数。</p></div><p>输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">start</span></span>
<span class="line"><span style="color:#F8F8F2;">stop</span></span>
<span class="line"><span style="color:#F8F8F2;">my first thread</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"><span style="color:#AE81FF;">22268</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>由输出可知，这个线程函数是在主线程之后才开始执行的。这种函数==<strong>非守护线程</strong>==。</p></div><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>.join()</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading, time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> target</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">second</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Treading</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">threading.current_thread().name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> is running&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Treading</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">threading.current_thread().name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> sleep </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">second</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">s&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(second)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Treading</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">threading.current_thread()</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> ended&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Treading</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">threading.current_thread().name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> is running&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">    t </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">target, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">[i])</span></span>
<span class="line"><span style="color:#F8F8F2;">    t.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">    t.join()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Treading</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">threading.current_thread().name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> is ended&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">TreadingMainThread </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> running</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> (target) </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> running</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> (target) sleep </span><span style="color:#F44747;">1s</span></span>
<span class="line"><span style="color:#F8F8F2;">Treading</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">Thread(Thread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> (target), started </span><span style="color:#AE81FF;">22892</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> ended</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> (target) </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> running</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> (target) sleep </span><span style="color:#F44747;">5s</span></span>
<span class="line"><span style="color:#F8F8F2;">Treading</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">Thread(Thread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> (target), started </span><span style="color:#AE81FF;">20580</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> ended</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingMainThread </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> ended</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>在调用线程函数之后加 <code>.join()</code>，这样能保证主线程在子线程结束之后结束。</p></div><p>::: detail</p><p>可以对比看一下不加第15行的代码的输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">TreadingMainThread </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> running</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> (target) </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> running</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> (target) sleep </span><span style="color:#F44747;">1s</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> (target) </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> running</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingThread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> (target) sleep </span><span style="color:#F44747;">5s</span></span>
<span class="line"><span style="color:#F8F8F2;">TreadingMainThread </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> ended</span></span>
<span class="line"><span style="color:#F8F8F2;">Treading</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">Thread(Thread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> (target), started </span><span style="color:#AE81FF;">18856</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> ended</span></span>
<span class="line"><span style="color:#F8F8F2;">Treading</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">Thread(Thread</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> (target), started </span><span style="color:#AE81FF;">23740</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> ended</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们首先声明了一个方法，叫作 target，它接收一个参数为 second，通过方法的实现可以发现，这个方法其实就是执行了一个 <code>time.sleep</code> 休眠操作，second 参数就是休眠秒数，其前后都 print了一些内容，其中线程的名字我们通过 <code>threading.current_thread().name</code> 来获取出来，如果是主线程的话，其值就是 <code>MainThread</code>，如果是子线程的话，其值就是 Thread-*。</p><p>然后我们通过 <code>Thead</code>类新建了两个线程，target参数就是刚才我们所定义的方法名，<code>args</code>以列表的形式传递。两次循环中，这里 i 分别就是 1 和 5，这样两个线程就分别休眠 1 秒和 5 秒，声明完成之后，我们调用 start 方法即可开始线程的运行。</p><p>观察结果我们可以发现，这里一共产生了三个线程，分别是主线程 MainThread和两个子线程 Thread-1、Thread-2。另外我们观察到，主线程首先运行结束，紧接着 Thread-1、Thread-2 才接连运行结束，分别间隔了 1 秒和 4 秒。这说明主线程并没有等待子线程运行完毕才结束运行，而是直接退出了，有点不符合常理。</p><p>如果我们想要主线程等待子线程运行完毕之后才退出，可以让每个子线程对象都调用下 join方法。</p><p>:::</p><h3 id="守护线程" tabindex="-1"><a class="header-anchor" href="#守护线程"><span>守护线程</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading, time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> start</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(num)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().name)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().is_alive())</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().ident)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;start&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">thread </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">start, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;my first thread&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,))</span></span>
<span class="line"><span style="color:#F8F8F2;">thread.setDaemon(</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">thread.start()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;stop&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>显而易见，通过 <code>thread.setDaemon(True)</code> 命令我们把非守护线程变成了守护线程。</p></div><p>**守护线程的定义：**不等待子线程的结束，主线程结束所有线程结束。没来得及执行的子线程销毁。</p><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">start</span></span>
<span class="line"><span style="color:#F8F8F2;">stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>::: detail</p><p>我们把主线程时间延长一点，手动等待子线程运行结束。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threading, time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> start</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(num)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().name)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().is_alive())</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(threading.current_thread().ident)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;start&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">thread </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threading.Thread(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">start, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;my first thread&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,))</span></span>
<span class="line"><span style="color:#F8F8F2;">thread.setDaemon(</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">thread.start()</span></span>
<span class="line"><span style="color:#F8F8F2;">time.sleep(</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;stop&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">start</span></span>
<span class="line"><span style="color:#F8F8F2;">my first thread</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"><span style="color:#AE81FF;">1588</span></span>
<span class="line"><span style="color:#F8F8F2;">stop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> threadpool</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 执行比较耗时的函数，需要开多线程</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_html</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(url)</span></span>
<span class="line"><span style="color:#88846F;"># 按原本的单线程运行时间为：300s</span></span>
<span class="line"><span style="color:#88846F;"># 而多线程池的化：30s</span></span>
<span class="line"><span style="color:#88846F;"># 使用多线程执行 telent 函数</span></span>
<span class="line"><span style="color:#F8F8F2;">start_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.time()</span></span>
<span class="line"><span style="color:#F8F8F2;">urls </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [i </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">pool </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threadpool.ThreadPool(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 建立线程池</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 提交任务给线程池</span></span>
<span class="line"><span style="color:#F8F8F2;">requests </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> threadpool.makeRequests(get_html, urls)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 开始执行任务</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> req </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> requests:</span></span>
<span class="line"><span style="color:#F8F8F2;">    pool.putRequest(req)</span></span>
<span class="line"><span style="color:#F8F8F2;">pool.wait()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;:&gt;&gt;&gt;&gt;&quot;</span><span style="color:#F8F8F2;">, time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start_time)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_10-进程" tabindex="-1"><a class="header-anchor" href="#_10-进程"><span>10. 进程</span></a></h2><ul><li><p><strong>多进程的含义：</strong> 通过上一课时我们知道，由于进程中 GIL 的存在，Python 中的多线程并不能很好地发挥多核优势，一个进程中的多个线程，在同一时刻只能有一个线程运行。而对于多进程来说，每个进程都有属于自己的 GIL，所以，在多核处理器下，多进程的运行是不会受 GIL 的影响的。因此，多进程能更好地发挥多核的优势。总的来说，Python 的多进程整体来看是比多线程更有<mark>优势</mark>的。所以，在条件允许的情况下，能用多进程就尽量用多进程。不过值得注意的是，由于进程是系统进行资源分配和调度的一个独立单位，<strong>所以各个进程之间的数据是无法共享的，如多个进程无法共享一个全局变量，进程之间的数据共享需要有单独的机制来实现</strong>，这在后面也会讲到。</p></li><li><p><strong>多进程的实现：</strong></p></li></ul><img src="`+m+'" alt="76659c011acc216b7825d4f9baf3dd5" style="zoom:33%;"><p>在 Python 中也有内置的库来实现多进程，它就是 multiprocessing。多线程在 IO 密集型用的比较多，也就是在爬虫方面用的比较多。而 CPU 密集型根本就不用多线程。</p><p>我们一般的策略是，多进程加多线程，这样的结合是最好。multiprocessing 提供了一系列的组件，如 Process（进程）、Queue（队列）、Semaphore（信号量）、Pipe（管道）、Lock（锁）、Pool（进程池）等，接下来让我们来了解下它们的使用方法。</p><h3 id="multiprocessing-库" tabindex="-1"><a class="header-anchor" href="#multiprocessing-库"><span>multiprocessing 库</span></a></h3><img src="'+v+`" alt="09eb3d32a14d0781772516166dbe304" style="zoom:67%;"><h3 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1"><span>代码</span></a></h3><ul><li>最简单的多进程的使用：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> multiprocessing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> process</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Process:</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        p </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> multiprocessing.Process(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> process, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (i,))</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.start()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li></li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> multiprocessing, time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> start</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">i</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(multiprocessing.current_process().name)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(multiprocessing.current_process().pid)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(multiprocessing.current_process().is_alive())</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(multiprocessing.cpu_count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;start&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    p </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> multiprocessing.Process(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">start, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,),</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &#39;p1&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    p.start()</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;stop&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">start</span></span>
<span class="line"><span style="color:#F8F8F2;">stop</span></span>
<span class="line"><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">p1</span></span>
<span class="line"><span style="color:#AE81FF;">18888</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"><span style="color:#AE81FF;">20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li></li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> multiprocessing, time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> process</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    time.sleep(index)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;Process: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">        p </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> multiprocessing.Process(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">process, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">[i,])</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.start()</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;CPU number:</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">multiprocessing.cpu_count()</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> multiprocessing.active_children():</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;Child process name:</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">p.name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> id:</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">p.pid</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Process Ended&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Process: </span><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#AE81FF;">CPU</span><span style="color:#F8F8F2;"> number:</span><span style="color:#AE81FF;">20</span></span>
<span class="line"><span style="color:#F8F8F2;">Child process name:Process</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">3</span><span style="color:#66D9EF;"> id</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">15888</span></span>
<span class="line"><span style="color:#F8F8F2;">Child process name:Process</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">4</span><span style="color:#66D9EF;"> id</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">15688</span></span>
<span class="line"><span style="color:#F8F8F2;">Child process name:Process</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">5</span><span style="color:#66D9EF;"> id</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">6680</span></span>
<span class="line"><span style="color:#F8F8F2;">Child process name:Process</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#66D9EF;"> id</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">25484</span></span>
<span class="line"><span style="color:#F8F8F2;">Process Ended</span></span>
<span class="line"><span style="color:#F8F8F2;">Process: </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">Process: </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">Process: </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">Process: </span><span style="color:#AE81FF;">4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进程池" tabindex="-1"><a class="header-anchor" href="#进程池"><span>进程池</span></a></h3><ul><li><strong>进程池执行多个任务：</strong></li></ul><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> multiprocessing </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Pool</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> function_square</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">data</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    inputs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [i </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#88846F;">	# 那么，我们可以首先声明这个进程池；</span></span>
<span class="line"><span style="color:#F8F8F2;">    pool </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Pool(</span><span style="color:#FD971F;font-style:italic;">processes</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 如果不定义数字，他会根据你的电脑情况自行创建</span></span>
<span class="line"><span style="color:#88846F;">	# 然后，使用 map 方法，那其实这个 map 方法和正常的 map 方法是一致的。</span></span>
<span class="line"><span style="color:#88846F;">	# map：</span></span>
<span class="line"><span style="color:#88846F;">	# pool = Pool()</span></span>
<span class="line"><span style="color:#88846F;">	# pool.map(main, [i*10 for i in range(10)])</span></span>
<span class="line"><span style="color:#88846F;">	# 第一个参数：他会将数组中的每一个元素拿出来，当作函数的一个个参数，然后创建一个个进程，放到进程池里面去运行。</span></span>
<span class="line"><span style="color:#88846F;">	# 第二个参数：构造一个数组，然后也就是 0 到 99 的这么一个循环，那我们直接使用 list 构造一下</span></span>
<span class="line"><span style="color:#F8F8F2;">    pool_outputs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> pool.map(function_square, inputs)</span></span>
<span class="line"><span style="color:#F8F8F2;">    pool.close()</span></span>
<span class="line"><span style="color:#F8F8F2;">    pool.join()</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Pool  :&#39;</span><span style="color:#F8F8F2;">, pool_outputs)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li><strong>进程池执行单个任务：</strong></li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> multiprocessing </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Pool</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> function_square</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> data</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">data</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">	pool </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Pool(</span><span style="color:#FD971F;font-style:italic;">processes</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 如果你不指定数目的化，它就会根据你电脑状态，自行创建。（按你的电脑自动创建相应的数目）</span></span>
<span class="line"><span style="color:#88846F;">	# map 把任务交给进程池</span></span>
<span class="line"><span style="color:#88846F;">	# pool.map(function, iterable)</span></span>
<span class="line"><span style="color:#F8F8F2;">	pool_outputs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> pool.apply(function_square, </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, ))</span></span>
<span class="line"><span style="color:#F8F8F2;">	pool.close()</span></span>
<span class="line"><span style="color:#F8F8F2;">	pool.join()</span></span>
<span class="line"><span style="color:#66D9EF;">	print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Pool     :&quot;</span><span style="color:#F8F8F2;">, pool_outputs)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68))])}const f=F(b,[["render",h]]),k=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week09.html","title":"高级算法——第9周ppt总结","lang":"zh-CN","frontmatter":{"title":"高级算法——第9周ppt总结","icon":"python","date":"2024-11-15T09:37:28.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"0. 进程和线程 通过场景理解进程和线程较为容易：当我们上网浏览打开网页，就开启了一个进程。一个进程可以处理很多任务，这些任务叫线程。我们在这个网页上播放音乐、查找音乐、调整音乐播放进度属于开启了一个个小线程。 总而言之，进程就是线程的集合，进程就是由一个或多个线程构成的，线程是操作系统进行运算调度的最小单位，是进程中的一个最小运行单元。 1. Int...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Advanced_Algorithms/Week09.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"高级算法——第9周ppt总结"}],["meta",{"property":"og:description","content":"0. 进程和线程 通过场景理解进程和线程较为容易：当我们上网浏览打开网页，就开启了一个进程。一个进程可以处理很多任务，这些任务叫线程。我们在这个网页上播放音乐、查找音乐、调整音乐播放进度属于开启了一个个小线程。 总而言之，进程就是线程的集合，进程就是由一个或多个线程构成的，线程是操作系统进行运算调度的最小单位，是进程中的一个最小运行单元。 1. Int..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-05T08:49:52.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"大三上"}],["meta",{"property":"article:tag","content":"高级算法课件"}],["meta",{"property":"article:published_time","content":"2024-11-15T09:37:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-05T08:49:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级算法——第9周ppt总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-15T09:37:28.000Z\\",\\"dateModified\\":\\"2024-12-05T08:49:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1731571707000,"updatedTime":1733388592000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":6,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":20.32,"words":6095},"filePathRelative":"zh/Advanced_Algorithms/Week09.md","localizedDate":"2024年11月15日","excerpt":"<h2>0. 进程和线程</h2>\\n<p>通过场景理解进程和线程较为容易：当我们上网浏览打开网页，就开启了一个进程。一个进程可以处理很多任务，这些任务叫线程。我们在这个网页上播放音乐、查找音乐、调整音乐播放进度属于开启了一个个小线程。</p>\\n<p>总而言之，进程就是线程的集合，进程就是由一个或多个线程构成的，线程是操作系统进行<strong>运算调度的最小单位</strong>，是进程中的一个最小运行单元。</p>\\n<h2>1. Intended Learning</h2>\\n<ul>\\n<li>\\n<p>Understand the multithreading concept</p>\\n</li>\\n<li>\\n<p>Be able to explain applications of multithreading</p>\\n</li>\\n<li>\\n<p>Understand and manage data sharing in multithreaded environments</p>\\n</li>\\n<li>\\n<p>Be able to explain the race condition</p>\\n</li>\\n<li>\\n<p>Understand implementation of threading (mainly) in Python and (partly) in C++</p>\\n</li>\\n</ul>","autoDesc":true}');export{f as comp,k as data};

import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as e}from"./app-COYsNQIt.js";const p="/assets/image-20240506142602009-D256WY32.png",o="/assets/image-20240506143745929-BTvH9tgS.png",i="/assets/image-20240506144555151-DqZ3Nwqm.png",t="/assets/image-20240506144848209-4ZxEYlFF.png",c="/assets/image-20240506145305541-DpVroTM6.png",r="/assets/image-20240506161655748-D_pG1748.png",F="/assets/image-20240506163707452-BOpC9xRW.png",d={};function y(u,s){return e(),a("div",null,s[0]||(s[0]=[l('<h2 id="_1-boxing-and-unboxing" tabindex="-1"><a class="header-anchor" href="#_1-boxing-and-unboxing"><span>1. Boxing and Unboxing</span></a></h2><p>Boxing is the process of converting a value type to the type object. Unboxing extracts（提取） the value type from the object</p><figure><img src="'+p+`" alt="image-20240506142602009" tabindex="0" loading="lazy"><figcaption>image-20240506142602009</figcaption></figure><p>Boxing is implicit隐性的; unboxing is explicit显性的</p><h3 id="_1-1-boxing" tabindex="-1"><a class="header-anchor" href="#_1-1-boxing"><span>1.1 Boxing</span></a></h3><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        object</span><span style="color:#F8F8F2;"> o </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i; </span><span style="color:#88846F;">// Boxing copies the value of i into object o</span></span>
<span class="line"><span style="color:#F8F8F2;">        i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 123</span><span style="color:#F8F8F2;">;</span><span style="color:#88846F;">// Change the value of i</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(o);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">//output </span></span>
<span class="line"><span style="color:#AE81FF;">123</span></span>
<span class="line"><span style="color:#AE81FF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-unboxing" tabindex="-1"><a class="header-anchor" href="#_1-2-unboxing"><span>1.2 Unboxing</span></a></h3><figure><img src="`+o+'" alt="image-20240506143745929" tabindex="0" loading="lazy"><figcaption>image-20240506143745929</figcaption></figure><figure><img src="'+i+'" alt="image-20240506144555151" tabindex="0" loading="lazy"><figcaption>image-20240506144555151</figcaption></figure><p>？？？？</p><figure><img src="'+t+'" alt="image-20240506144848209" tabindex="0" loading="lazy"><figcaption>image-20240506144848209</figcaption></figure><p>？？？？？</p><blockquote><p>boixng 相当于把值类型转换成了引用类型为了方便修改，unboxing相当于把引用类型拿出来使用。</p></blockquote><h2 id="_2-is-as" tabindex="-1"><a class="header-anchor" href="#_2-is-as"><span>2. “Is”&amp;“As”</span></a></h2><h3 id="_2-1-is-在运行时评估类型兼容性。" tabindex="-1"><a class="header-anchor" href="#_2-1-is-在运行时评估类型兼容性。"><span>2.1 <strong>is 在运行时评估类型兼容性。</strong></span></a></h3><p>&quot;is &quot;决定对象实例或表达式的结果是否可以转换为指定类型： <em>expr is type。</em> 其中，expr 是求值为某种类型实例的表达式，type 是要将 expr 的结果转换成的类型名称。</p><figure><img src="'+c+`" alt="image-20240506145305541" tabindex="0" loading="lazy"><figcaption>image-20240506145305541</figcaption></figure><h3 id="_2-2-as-operator" tabindex="-1"><a class="header-anchor" href="#_2-2-as-operator"><span>2.2 as operator</span></a></h3><p>as 在兼容引用(compatible reference)类型或可归零(nullable)<a href="http://xn--9iq8g57wca210ldmbz4oox5aqhlfa6834as4r2mt.as" target="_blank" rel="noopener noreferrer">类型之间执行某些类型的转换.as</a> operator 就像一个转换操作。不过，<strong>如果转换不成功，as 将返回空值，而不是引发异常</strong>： <em>expression as type</em>.</p><h4 id="_2-2-1-nullable" tabindex="-1"><a class="header-anchor" href="#_2-2-1-nullable"><span>2.2.1 Nullable</span></a></h4><p>可空值类型。可空类型可以表示其基础值类型的正确值范围，外加一个额外的空值：</p><p>E.g. Nullable（bool）拥有的值有True False 和null</p><p>为数字和布尔类型赋值为空的功能在处理数据库和其他包含可能无法赋值的元素的数据类型时尤其有用</p><h2 id="_3-一个例子说明generics的作用" tabindex="-1"><a class="header-anchor" href="#_3-一个例子说明generics的作用"><span>3. 一个例子说明generics的作用</span></a></h2><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> object</span><span style="color:#F8F8F2;"> Id { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">object</span><span style="color:#F8F8F2;"> id, </span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> tom </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">546</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Tom&quot;</span><span style="color:#F8F8F2;">);</span><span style="color:#88846F;">//boxing!!!</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> Joh </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;xxy777&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;John&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> tomid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">)tom.Id;</span><span style="color:#88846F;">//unboxing!!!!</span></span>
<span class="line"><span style="color:#F92672;">        string</span><span style="color:#F8F8F2;"> Johid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">)Joh.Id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(tomid);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Johid);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>我们注意到这里Id的类型多种多样。我们也可以用泛型解决这个问题！！</p><h2 id="_4-generics" tabindex="-1"><a class="header-anchor" href="#_4-generics"><span>4. Generics</span></a></h2><h3 id="_4-1-use-generic-class-person" tabindex="-1"><a class="header-anchor" href="#_4-1-use-generic-class-person"><span>4.1 Use generic class Person</span></a></h3><ul><li>类 <code>Person&lt;T&gt;</code> 被声明为通用类型 - 类型 <code>&lt;T&gt;</code> 是将要使用的类型，可以是对象字符串，也可以是任何其他类或结构体</li></ul><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> Id { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> id, </span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; tom </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#AE81FF;">546</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Tom&quot;</span><span style="color:#F8F8F2;">);</span><span style="color:#88846F;">//no boxing!!!</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt; Joh </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E6DB74;">&quot;xxy777&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;John&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">        int</span><span style="color:#F8F8F2;"> tomid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">)tom.Id;</span><span style="color:#88846F;">//no unboxing!!!!</span></span>
<span class="line"><span style="color:#F92672;">        string</span><span style="color:#F8F8F2;"> Johid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">)Joh.Id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(tomid);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Johid);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ul><li><p>无装箱/拆箱，无类型安全问题</p></li><li><p>通用类是不变的！</p></li><li><p>因为没有unboxing和boxing，这样也是可以的：</p></li></ul><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> Id { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> id, </span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; tom </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#AE81FF;">546</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Tom&quot;</span><span style="color:#F8F8F2;">);</span><span style="color:#88846F;">//no boxing!!!</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt; Joh </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E6DB74;">&quot;xxy777&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;John&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(tom.Id);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Joh.Id);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-2-type-can-be-generic-type" tabindex="-1"><a class="header-anchor" href="#_4-2-type-can-be-generic-type"><span>4.2 Type can be generic type</span></a></h3><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> Id { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> id, </span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Company</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;"> CEO { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Company</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;"> ceo) { CEO </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ceo; }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; tom </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#AE81FF;">546</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Tom&quot;</span><span style="color:#F8F8F2;">);</span><span style="color:#88846F;">//boxing!!!</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Company</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;&gt; microsoft</span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Company</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;&gt;(tom);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(microsoft.CEO.Id);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(microsoft.CEO.Name);</span><span style="color:#88846F;">//CEO别忘记写</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-3-generics-and-collections" tabindex="-1"><a class="header-anchor" href="#_4-3-generics-and-collections"><span>4.3 Generics and Collections</span></a></h3><p>The most common use of generics is to create collection classes.</p><ul><li>泛型的概念是指定一种通用操作，然后以适合每种操作的方式将其应用于不同的上下文中--例如：--我们知道，创建数组时，程序员必须准确指定它包含多少个元素--如果我们的数组大小为 10000，并试图添加 10001 个客户....-</li><li>我们可以声明一个 &quot;oversized &quot;数组，或者...使用泛型。</li></ul><figure><img src="`+r+`" alt="image-20240506161655748" tabindex="0" loading="lazy"><figcaption>image-20240506161655748</figcaption></figure><p>集合类型为 &quot;int&quot;--添加任何非 &quot;int &quot;类型的内容都会产生错误（例如，添加字符串 s）--不会浪费装箱时间，并保证了类型安全.</p><h4 id="_4-3-1-在数组中的应用" tabindex="-1"><a class="header-anchor" href="#_4-3-1-在数组中的应用"><span>4.3.1 在数组中的应用</span></a></h4><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] client;</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Bank</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] _client)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> _client;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; bank1 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#F92672;">new</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;">[] { </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, });</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt; bank2 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#F92672;">new</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;">[] { </span><span style="color:#E6DB74;">&quot;Mary&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Jay&quot;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>怎么打印这两数组????</p><p>添加索引器！！</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] client;</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Bank</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] client)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FD971F;">        this</span><span style="color:#F8F8F2;">.client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> client;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> index]</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        get</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> client[index]; }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        set</span><span style="color:#F8F8F2;"> { client[index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value; }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt; bank1 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;">[] { </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(bank1[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-4-泛型-优点" tabindex="-1"><a class="header-anchor" href="#_4-4-泛型-优点"><span>4.4 泛型 - 优点</span></a></h3><ul><li>使用泛型可以最大限度地提高代码重用性、类型安全性和性能</li><li>泛型最常见的用途是创建集合类 \\</li><li>我们可以创建自己的泛型接口、类、方法、事件和委托</li><li>要设置默认值（引用类型为空，值类型为 0），请使用运算符 default(T)</li></ul><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> id </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> default</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值是干什么用的？？</p><h3 id="_4-5-generic-classes-inheritance" tabindex="-1"><a class="header-anchor" href="#_4-5-generic-classes-inheritance"><span>4.5 Generic classes inheritance</span></a></h3><p>• One generic class can inherit from another</p><figure><img src="`+F+`" alt="image-20240506163707452" tabindex="0" loading="lazy"><figcaption>image-20240506163707452</figcaption></figure><h2 id="_5-where" tabindex="-1"><a class="header-anchor" href="#_5-where"><span>5. Where</span></a></h2><p><strong>Generic classes and restrictions</strong></p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> Id { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#F92672;">private</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">; } </span><span style="color:#88846F;">// A/C number</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Account</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> _id)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> _id;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">where</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> : </span><span style="color:#A6E22E;text-decoration:underline;">Account</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span>    </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] accounts;</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Bank</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] accs)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FD971F;">        this</span><span style="color:#F8F8F2;">.accounts </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> accs;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> AccountsInfo</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F92672;">        foreach</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;"> acc </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> accounts)</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">            Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;A/C : &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> acc.Id);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">[] accounts </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">[] {</span></span>
<span class="line"><span style="color:#F92672;">             new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1030001</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F92672;">             new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1030005</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F92672;">             new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1030009</span><span style="color:#F8F8F2;">) };</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">&gt; bank </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Bank</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Account</span><span style="color:#F8F8F2;">&gt;(accounts);</span></span>
<span class="line"><span style="color:#F8F8F2;">        bank.</span><span style="color:#A6E22E;">AccountsInfo</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>Generic Methods</strong></p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">abstract</span><span style="color:#66D9EF;font-style:italic;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> FirstName { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> LastName { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> lName, </span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> fName)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        FirstName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fName;</span></span>
<span class="line"><span style="color:#F8F8F2;">        LastName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lName;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> abstract</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Display</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Client</span><span style="color:#F8F8F2;"> : </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Client</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> lName, </span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> fName)</span></span>
<span class="line"><span style="color:#F8F8F2;"> : </span><span style="color:#FD971F;">base</span><span style="color:#F8F8F2;">(fName, lName)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> override</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Display</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(FirstName </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot; &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> LastName);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Client</span><span style="color:#F8F8F2;"> client2 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Client</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;John&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;Rembo&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">        Display</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Client</span><span style="color:#F8F8F2;">&gt;(client2);</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">ReadLine</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    private</span><span style="color:#F92672;"> static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Display</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> person) </span><span style="color:#F92672;">where</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> : </span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        person.</span><span style="color:#A6E22E;">Display</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,56)]))}const b=n(d,[["render",y]]),E=JSON.parse('{"path":"/zh/OOP/Generics.html","title":"Generics","lang":"zh-CN","frontmatter":{"title":"Generics","icon":"c","date":"2024-05-06T14:22:12.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"1. Boxing and Unboxing Boxing is the process of converting a value type to the type object. Unboxing extracts（提取） the value type from the object image-20240506142602009image-202...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/OOP/Generics.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"Generics"}],["meta",{"property":"og:description","content":"1. Boxing and Unboxing Boxing is the process of converting a value type to the type object. Unboxing extracts（提取） the value type from the object image-20240506142602009image-202..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T16:32:49.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-06T14:22:12.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-11T16:32:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generics\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-06T14:22:12.000Z\\",\\"dateModified\\":\\"2024-05-11T16:32:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1701435902000,"updatedTime":1715445169000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":11,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":4.56,"words":1369},"filePathRelative":"zh/OOP/Generics.md","localizedDate":"2024年5月6日","excerpt":"<h2>1.  Boxing and Unboxing</h2>\\n<p>Boxing is the process of converting a value type to the type  object. Unboxing extracts（提取） the value type from the object</p>\\n<figure><figcaption>image-20240506142602009</figcaption></figure>\\n<p>Boxing is implicit隐性的; unboxing is explicit显性的</p>\\n<h3>1.1 Boxing</h3>","autoDesc":true}');export{b as comp,E as data};

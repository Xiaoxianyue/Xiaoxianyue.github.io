import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as e}from"./app-CQgJ7OV3.js";const p="/assets/image-20250228170509858-CL68pESX.png",o="/assets/image-20250228164433786-DECDyLCd.png",t="/assets/image-20250228165402650-z7LYaSUV.png",i="/assets/image-20250228171925669-BYc8w3Gh.png",c="/assets/image-20250228172030495-CJws3IEh.png",r="/assets/image-20250228171123883-CbiSRvfI.png",F="/assets/image-20250228171248172-DoTQWdek.png",y="/assets/image-20250228172513114-By9UMYdX.png",d="/assets/image-20250228182617477-D3RlIsFQ.png",u="/assets/image-20250228182554239-B5lJmKID.png",m="/assets/image-20250228224320478-B66Gjj05.png",v="/assets/image-20250228183152795-B1bYHNgj.png",h="/assets/image-20250228183508217-CdZ9llwX.png",b="/assets/image-20250302073328894-CsWBLV0P.png",g={};function D(q,s){return e(),a("div",null,s[0]||(s[0]=[l('<h2 id="a-本地部署-deepseek" tabindex="-1"><a class="header-anchor" href="#a-本地部署-deepseek"><span>A. 本地部署 DeepSeek</span></a></h2><h3 id="_1-步骤" tabindex="-1"><a class="header-anchor" href="#_1-步骤"><span>1. 步骤</span></a></h3><h4 id="_1-1-安装ollama" tabindex="-1"><a class="header-anchor" href="#_1-1-安装ollama"><span>1.1 安装Ollama</span></a></h4><p>前往 Ollama 官方网站， 点击 Download 按钮。</p><img src="'+p+'" alt="image-20250228170509858" style="zoom:25%;"><p>安装 ing…</p><img src="'+o+'" alt="image-20250228164433786" style="zoom:33%;"><p>输入命令行，检查是否安装完成。出现版本号，而不是错误信息，表示安装成功。</p><img src="'+t+'" alt="image-20250228165402650" style="zoom:25%;"><h4 id="_1-2-下载-deepseek-r-1-模型" tabindex="-1"><a class="header-anchor" href="#_1-2-下载-deepseek-r-1-模型"><span>1.2 下载 DeepSeek R-1 模型</span></a></h4><p>可以看到，在 Ollama 的 <mark>Models</mark> 选项卡中，搜索 DeepSeek，DeepSeek R-1 出现在第一行。</p><img src="'+i+'" alt="image-20250228171925669" style="zoom:25%;"><p>它们的参数在5亿到671亿不等。但是我们的小破电脑只能支持小参数，因为模型越大，对 GPU 的要求也越高。</p><img src="'+c+'" alt="image-20250228172030495" style="zoom:25%;"><p>运行以下命令行，以 8B 模型为例：</p><img src="'+r+'" alt="image-20250228171123883" style="zoom:33%;"><h3 id="_2-测试示例" tabindex="-1"><a class="header-anchor" href="#_2-测试示例"><span>2. 测试示例</span></a></h3><img src="'+F+'" alt="image-20250228171248172" style="zoom:33%;"><blockquote><p>Q: 介绍你自己</p><p>A: 你好！我是 DeepSeek-R1，DeepSeek 开发的人工智能助手。我将竭诚为您服务，并很乐意协助您处理任何咨询或任务。</p></blockquote><figure><img src="'+y+'" alt="image-20250228172513114" tabindex="0" loading="lazy"><figcaption>image-20250228172513114</figcaption></figure><blockquote><p>Q: 苹果公司的最新股价？</p><p>Think：好的，用户在询问 AAPL 的最新价格。让我回忆一下，AAPL 代表的是苹果公司。所以，他们可能对股市感兴趣。</p><p>我应该检查是否能获取实时数据。等等，我的知识截止日期是2024年7月，但金融信息是定期更新的。我需要告知用户，我不能提供 当前的股价，因为我的数据不是实时的。</p><p>嗯，也许用户想要了解如何查找苹果的股价。是否应该建议他们检查一个金融新闻网站或者使用一个可靠的股市应用程序？</p><p>另外，他们可能在寻找历史趋势或市场分析。在这种情况下，我可以提供一些关于苹果表现的背景信息以及它对股市的影响。</p><p>我还应该考虑是否有任何因素最近影响了 AAPL 的价格，比如产品发布或财报。但是由于我无法访问实时数据，我只能提供一般的 建议。</p><p>让我结构化我的回答，首先说明我无法提供实时数据，然后为用户提供一些有用的替代方法来查找当前的价格。</p><p>A: 我目前无法访问实时金融数据，包括苹果公司 (AAPL) 的最新股价。我建议检查一个可靠的金融新闻平台或者一个股市追踪应用 程序，以获取最准确和最新的股价。</p><p>如果您愿意，我可以提供苹果公司的一些历史背景或一般信息，但对于实时股价，请参考金融服务提供商。请告诉我，如果您需要任何帮助！</p></blockquote><p>这里可以看出，DeepSeek 无法访问网页数据。</p><h2 id="b-python-代码接入-deepseek-api" tabindex="-1"><a class="header-anchor" href="#b-python-代码接入-deepseek-api"><span>B. Python 代码接入 DeepSeek API</span></a></h2><h3 id="_1-步骤-1" tabindex="-1"><a class="header-anchor" href="#_1-步骤-1"><span>1. 步骤</span></a></h3><h4 id="_1-1-申请自己的-api" tabindex="-1"><a class="header-anchor" href="#_1-1-申请自己的-api"><span>1.1 申请自己的 API</span></a></h4><img src="'+d+'" alt="image-20250228182617477" style="zoom:50%;"><p>如果没充值就想调用 API，则会导致 402[余额不足] 报错。</p><img src="'+u+'" alt="image-20250228182554239" style="zoom:50%;"><h4 id="_1-2-调用-api" tabindex="-1"><a class="header-anchor" href="#_1-2-调用-api"><span>1.2 调用 API</span></a></h4><p>根据 DeepSeek 官网文章和代码的步骤。</p><img src="'+m+`" alt="image-20250228224320478" style="zoom:25%;"><p>Python 代码：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> openai </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> OpenAI</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># API 已手动打码</span></span>
<span class="line"><span style="color:#F8F8F2;">client </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> OpenAI(</span><span style="color:#FD971F;font-style:italic;">api_key</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;sk-*******************f394&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">base_url</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;https://api.deepseek.com&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化对话历史（包含系统消息）</span></span>
<span class="line"><span style="color:#F8F8F2;">messages </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [{</span><span style="color:#E6DB74;">&quot;role&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;system&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;content&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;You are a helpful assistant&quot;</span><span style="color:#F8F8F2;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">    # 获取用户输入</span></span>
<span class="line"><span style="color:#F8F8F2;">    user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">You: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 退出条件</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> user_input.lower() </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;exit&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;quit&quot;</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;对话结束&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 添加用户消息到历史</span></span>
<span class="line"><span style="color:#F8F8F2;">    messages.append({</span><span style="color:#E6DB74;">&quot;role&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;user&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;content&quot;</span><span style="color:#F8F8F2;">: user_input})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">        # 发起流式请求</span></span>
<span class="line"><span style="color:#F8F8F2;">        response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> client.chat.completions.create(</span></span>
<span class="line"><span style="color:#FD971F;font-style:italic;">            model</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;deepseek-reasoner&quot;</span><span style="color:#F8F8F2;">,  </span><span style="color:#88846F;"># 可替换为deepseek-chat，v3模型，当前r1</span></span>
<span class="line"><span style="color:#FD971F;font-style:italic;">            messages</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">messages,</span></span>
<span class="line"><span style="color:#FD971F;font-style:italic;">            stream</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#88846F;">  # 启用流式输出</span></span>
<span class="line"><span style="color:#F8F8F2;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 初始化回复收集</span></span>
<span class="line"><span style="color:#F8F8F2;">        full_response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">Assistant: &quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">flush</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 先打印前缀</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 实时处理流式响应</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> chunk </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> response:</span></span>
<span class="line"><span style="color:#F8F8F2;">            content </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> chunk.choices[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].delta.content</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> content:  </span><span style="color:#88846F;"># 过滤空内容</span></span>
<span class="line"><span style="color:#66D9EF;">                print</span><span style="color:#F8F8F2;">(content, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">flush</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 逐字打印</span></span>
<span class="line"><span style="color:#F8F8F2;">                full_response.append(content)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">        # 添加完整回复到历史</span></span>
<span class="line"><span style="color:#F8F8F2;">        ai_response </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;&quot;</span><span style="color:#F8F8F2;">.join(full_response)</span></span>
<span class="line"><span style="color:#F8F8F2;">        messages.append({</span><span style="color:#E6DB74;">&quot;role&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;assistant&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;content&quot;</span><span style="color:#F8F8F2;">: ai_response})</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">()  </span><span style="color:#88846F;"># 换行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">\\n</span><span style="color:#E6DB74;">发生错误: </span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">str</span><span style="color:#F8F8F2;">(e)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_1-3-问答示例" tabindex="-1"><a class="header-anchor" href="#_1-3-问答示例"><span>1.3 问答示例</span></a></h4><p>问题一：</p><img src="`+v+'" alt="image-20250228183152795" style="zoom:25%;"><p>问题二：</p><img src="'+h+'" alt="image-20250228183508217" style="zoom:25%;"><blockquote><p>数据不实时。</p></blockquote><p>一条几分钱：</p><img src="'+b+`" alt="image-20250302073328894" style="zoom:33%;"><h2 id="c-接入中传-api" tabindex="-1"><a class="header-anchor" href="#c-接入中传-api"><span>C. 接入中传 API</span></a></h2><p>根据给出的步骤：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> requests</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># API 地址</span></span>
<span class="line"><span style="color:#F8F8F2;">url </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;https://aihub.cuc.edu.cn/console/v1/chat/completions&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 请求头</span></span>
<span class="line"><span style="color:#F8F8F2;">headers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;Content-Type&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;application/json&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;Authorization&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;Bearer {sk-84b722fdcc9a41ea93917034c53457c7}&#39;</span><span style="color:#88846F;">  # 替换为你的实际 API 密钥</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 请求体</span></span>
<span class="line"><span style="color:#F8F8F2;">data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;model&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;DeepSeek-R1-Distill-Qwen-32B&quot;</span><span style="color:#F8F8F2;">,  </span><span style="color:#88846F;"># 修正模型名称</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;messages&quot;</span><span style="color:#F8F8F2;">: [</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&quot;role&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;system&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;content&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;You are a helpful assistant.&quot;</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span><span style="color:#E6DB74;">&quot;role&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;user&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;content&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;你好&quot;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">    ],</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;stream&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">False</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 发送 POST 请求</span></span>
<span class="line"><span style="color:#F8F8F2;">response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> requests.post(url, </span><span style="color:#FD971F;font-style:italic;">headers</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">headers, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">json.dumps(data))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 检查响应状态码</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> response.status_code </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 200</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">        # 解析 JSON 响应</span></span>
<span class="line"><span style="color:#F8F8F2;">        response_data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> response.json()</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;API 调用成功！&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;响应内容：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(json.dumps(response_data, </span><span style="color:#FD971F;font-style:italic;">indent</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">ensure_ascii</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 格式化输出 JSON</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#F8F8F2;"> json.JSONDecodeError </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;JSON 解析失败: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">e</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;原始响应内容：&quot;</span><span style="color:#F8F8F2;">, response.text)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;API 调用失败，状态码: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">response.status_code</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;错误信息：&quot;</span><span style="color:#F8F8F2;">, response.text)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>没有返回响应内容，只返回了一个网页页面的代码 [统一身份认证登录界面]</p><h2 id="d-感兴趣的场景" tabindex="-1"><a class="header-anchor" href="#d-感兴趣的场景"><span>D. 感兴趣的场景</span></a></h2><blockquote><p>将大模型和计算机视觉结合在一起。经典案例：体育传媒类。</p></blockquote><h3 id="_1-体育传媒类" tabindex="-1"><a class="header-anchor" href="#_1-体育传媒类"><span>1. 体育传媒类</span></a></h3><h4 id="_1-1-大模型结合视觉可以实现的功能" tabindex="-1"><a class="header-anchor" href="#_1-1-大模型结合视觉可以实现的功能"><span>1.1 大模型结合视觉可以实现的功能</span></a></h4><ul><li><p><strong>预测比赛结果</strong></p><ul><li><strong>技术方案</strong>：通过历史比赛数据和实时数据，使用贝叶斯网络等模型计算获胜概率。</li><li><strong>数据需求</strong>：类似水平比赛的历史数据和当前比赛的实时进展数据。</li></ul></li><li><p><strong>战术分析</strong></p><ul><li><strong>技术方案</strong>：视频中提取技术动作（如羽毛球中的发球、跑位），结合大模型生成技战术总结。</li><li><strong>数据需求</strong>：至少100场比赛的技战术描述样本和相关比赛视频数据。</li></ul></li><li><p><strong>报道生成</strong></p><ul><li><strong>技术方案</strong>：通过视频自动剪辑，提取技术数据（如得分时刻，运动员战术），结合大模型生成总结内容。</li><li><strong>数据需求</strong>：准备不少于100场比赛的技术分析样本，用于训练和测试生成模型。</li></ul></li><li><p><strong>问答机器人</strong></p><ul><li><strong>技术方案</strong>：将结构化数据输入总结/问答模型，结合RAG+LLM技术实现问答响应。</li><li><strong>数据需求</strong>：至少10场比赛的报道问答样本和1000个人工+机器生成的问答示例。</li></ul></li></ul><h4 id="_1-2-预期项目架构" tabindex="-1"><a class="header-anchor" href="#_1-2-预期项目架构"><span>1.2 预期项目架构</span></a></h4><ul><li>视频流：视觉大模型 [如 CLIP] 识别实时赛事视频。</li><li>大模型：结合知识库 [ 体育基础知识库、直播解说知识库、赛事历史知识库、赛时实时知识库、社交媒体库、技战术知识库等多种体育知识库] 和视频流中的信息深度推理。</li></ul><h4 id="_1-3-核心技术总结" tabindex="-1"><a class="header-anchor" href="#_1-3-核心技术总结"><span>1.3 核心技术总结</span></a></h4><ul><li><p>YOLO 等：识别视频信息</p></li><li><p>DeepSeek：自然语言处理</p></li><li><p>SQL 或 NoSQL：数据的多模态融合</p></li></ul><h4 id="_1-4-项目难点" tabindex="-1"><a class="header-anchor" href="#_1-4-项目难点"><span>1.4 项目难点</span></a></h4><ul><li>可能对多模态数据的清洗的难度较大。可以通过查找现成的 Web API，使现有基础模型可以与外部信息交互。用 RAG 也可以大大扩展模型能力。</li><li>编排层：决定了模型如何接受信息，如何进行内部推理。在实际体育赛事中可能要结合多方可能性做出推理，涉及复杂的链接逻辑、其他机器学习算法和概率推理技术。</li></ul>`,56)]))}const f=n(g,[["render",D]]),k=JSON.parse('{"path":"/zh/DeepThinking/dp_api.html","title":"如何在本地部署DeepSeek？","lang":"zh-CN","frontmatter":{"title":"如何在本地部署DeepSeek？","icon":"alias","date":"2025-02-27T11:24:21.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三下","大模型与深度学习"],"tag":["大三下","大模型与深度学习"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"A. 本地部署 DeepSeek 1. 步骤 1.1 安装Ollama 前往 Ollama 官方网站， 点击 Download 按钮。 image-20250228170509858 安装 ing… image-20250228164433786 输入命令行，检查是否安装完成。出现版本号，而不是错误信息，表示安装成功。 image-2025022816...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/DeepThinking/dp_api.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"如何在本地部署DeepSeek？"}],["meta",{"property":"og:description","content":"A. 本地部署 DeepSeek 1. 步骤 1.1 安装Ollama 前往 Ollama 官方网站， 点击 Download 按钮。 image-20250228170509858 安装 ing… image-20250228164433786 输入命令行，检查是否安装完成。出现版本号，而不是错误信息，表示安装成功。 image-2025022816..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-02T02:36:39.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"大三下"}],["meta",{"property":"article:tag","content":"大模型与深度学习"}],["meta",{"property":"article:published_time","content":"2025-02-27T11:24:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-02T02:36:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在本地部署DeepSeek？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-27T11:24:21.000Z\\",\\"dateModified\\":\\"2025-03-02T02:36:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1740882999000,"updatedTime":1740882999000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":1,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":6.45,"words":1935},"filePathRelative":"zh/DeepThinking/dp_api.md","localizedDate":"2025年2月27日","excerpt":"<h2>A. 本地部署 DeepSeek</h2>\\n<h3>1. 步骤</h3>\\n<h4>1.1 安装Ollama</h4>\\n<p>前往 Ollama 官方网站， 点击 Download 按钮。</p>\\n\\n<p>安装 ing…</p>\\n\\n<p>输入命令行，检查是否安装完成。出现版本号，而不是错误信息，表示安装成功。</p>\\n\\n<h4>1.2 下载 DeepSeek R-1 模型</h4>\\n<p>可以看到，在 Ollama 的 <mark>Models</mark> 选项卡中，搜索 DeepSeek，DeepSeek R-1 出现在第一行。</p>\\n\\n<p>它们的参数在5亿到671亿不等。但是我们的小破电脑只能支持小参数，因为模型越大，对 GPU 的要求也越高。</p>","autoDesc":true}');export{f as comp,k as data};

import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,o as p}from"./app-wJZTzokE.js";const l="/assets/image-20240523194606256-DFyYko4a.png",t="/assets/image-20240524000710857-TggRZ-vo.png",o="/assets/image-20240524122511203-B98q1mJS.png",r={};function i(c,a){return p(),n("div",null,a[0]||(a[0]=[e('<h2 id="_2-线性表" tabindex="-1"><a class="header-anchor" href="#_2-线性表"><span>2. 线性表</span></a></h2><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>老师强调的考点：</p><p>单链表的插入（基本语句）删除，头插尾插（有什么不同，各自的特点）。各个复杂度等。</p><p>双链表的插入删除（删除给定结点的前驱后继等等）</p><h3 id="_2-1-逻辑结构" tabindex="-1"><a class="header-anchor" href="#_2-1-逻辑结构"><span>2.1 逻辑结构</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">L </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (D,R)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">D </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {ai </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> n , n</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> , ai为ElemType类型}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">R </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {r}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">r </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">ai,ai</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;">&gt;</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;"> &lt;=</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> n</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有穷性 一致性 序列性！！</p><h4 id="_2-1-1-语句标题" tabindex="-1"><a class="header-anchor" href="#_2-1-1-语句标题"><span>2.1.1 语句标题</span></a></h4><p>p48为例</p><h3 id="_2-2-顺序表-数组" tabindex="-1"><a class="header-anchor" href="#_2-2-顺序表-数组"><span>2.2 顺序表（数组）</span></a></h3><h4 id="_2-2-1-基本运算实现" tabindex="-1"><a class="header-anchor" href="#_2-2-1-基本运算实现"><span>2.2.1 基本运算实现</span></a></h4><p>1.建立顺序表</p><p>2.初始化，销毁，判断是否为空，求线性表长度，输出线性表</p><p>3.按序号求线性表中的元素（1&lt;=i&lt;=n)，按元素值查找</p><p><em>4.插入数据元素</em>*（1&lt;=i&lt;=n+1)** （时间复杂度）</p><p>*5.删除数据元素 （时间复杂度）</p><h3 id="_2-3-单链表" tabindex="-1"><a class="header-anchor" href="#_2-3-单链表"><span>2.3 单链表</span></a></h3><h4 id="_2-3-1-基本特征" tabindex="-1"><a class="header-anchor" href="#_2-3-1-基本特征"><span>2.3.1 基本特征</span></a></h4><p>就是长什么样子。要会在纸上画下来。</p><h4 id="_2-3-2-插入删除结点的操作" tabindex="-1"><a class="header-anchor" href="#_2-3-2-插入删除结点的操作"><span>2.3.2 插入删除结点的操作</span></a></h4><p>要会默写</p><h4 id="_2-3-3-头插法-尾插法" tabindex="-1"><a class="header-anchor" href="#_2-3-3-头插法-尾插法"><span>2.3.3 头插法，尾插法</span></a></h4><p>要会默写</p><h4 id="_2-3-4-基本运算的实现" tabindex="-1"><a class="header-anchor" href="#_2-3-4-基本运算的实现"><span>2.3.4 基本运算的实现</span></a></h4><p>初始化单链表；销毁单链表*；判断是否为空；输出线性表；按序号求线性表元素；按元素查找</p><p>插入数据元素*；删除数据元素 *</p><p>（带*的重点查看）</p><h3 id="_2-4-双链表" tabindex="-1"><a class="header-anchor" href="#_2-4-双链表"><span>2.4 双链表</span></a></h3><h4 id="_2-4-1-插入删除" tabindex="-1"><a class="header-anchor" href="#_2-4-1-插入删除"><span>2.4.1 插入删除</span></a></h4><p>p56</p><h4 id="_2-4-2-头插尾插" tabindex="-1"><a class="header-anchor" href="#_2-4-2-头插尾插"><span>2.4.2 头插尾插</span></a></h4><p>p55</p><h3 id="_2-5-循环链表" tabindex="-1"><a class="header-anchor" href="#_2-5-循环链表"><span>2.5 循环链表</span></a></h3><p>P59</p><p>怎么遍历循环链表的？</p><h2 id="_3-栈和队列" tabindex="-1"><a class="header-anchor" href="#_3-栈和队列"><span>3. 栈和队列</span></a></h2><figure><img src="`+t+'" alt="image-20240524000710857" tabindex="0" loading="lazy"><figcaption>image-20240524000710857</figcaption></figure><h3 id="_3-1-栈" tabindex="-1"><a class="header-anchor" href="#_3-1-栈"><span>3.1 栈</span></a></h3><p>基本运算名：</p><p>push</p><p>pop</p><p>GetTop</p><p>…</p><p>出栈进栈顺序的题等等</p><h4 id="_3-1-1-栈的顺序存储-p80" tabindex="-1"><a class="header-anchor" href="#_3-1-1-栈的顺序存储-p80"><span>3.1.1 栈的顺序存储 P80</span></a></h4><p>栈空栈满的条件</p><p>能画图（体现进栈出栈的指针变化等）</p><p>能知道代码的大概步骤（初始化，销毁，判空，进出栈）</p><h4 id="_3-1-2-栈的链式存储-p84" tabindex="-1"><a class="header-anchor" href="#_3-1-2-栈的链式存储-p84"><span>3.1.2 栈的链式存储 P84</span></a></h4><p>栈满栈空的条件</p><p>能知道代码的大概步骤（初始化，销毁，判空，进出栈）</p><h4 id="_3-1-3-栈的应用" tabindex="-1"><a class="header-anchor" href="#_3-1-3-栈的应用"><span>3.1.3 栈的应用</span></a></h4><p>算术表达式的转换</p><p>迷宫问题</p><h3 id="_3-2-队列" tabindex="-1"><a class="header-anchor" href="#_3-2-队列"><span>3.2 队列</span></a></h3><h4 id="_3-2-1-顺序存储" tabindex="-1"><a class="header-anchor" href="#_3-2-1-顺序存储"><span>3.2.1 顺序存储</span></a></h4><p>画图，基本算法等</p><p>环形队列：</p><p>会画图</p><p>队空，队满条件</p><p>进出队语句</p><p>格外注意队满条件</p><h4 id="_3-2-2-链式存储" tabindex="-1"><a class="header-anchor" href="#_3-2-2-链式存储"><span>3.2.2 链式存储</span></a></h4><p>绘图，代码</p><p>不是重点。</p><h2 id="_4-树" tabindex="-1"><a class="header-anchor" href="#_4-树"><span>4. 树</span></a></h2><img src="'+o+'" alt="image-20240524122511203" style="zoom:50%;"><h3 id="_4-1-树的定义和性质" tabindex="-1"><a class="header-anchor" href="#_4-1-树的定义和性质"><span>4.1 树的定义和性质</span></a></h3><p>定义没啥好说</p><p>逻辑表示法四种：文氏，凹入，括号，树形</p><p>性质：</p><p>1.所有结点度之和加一等于结点数</p><p>2.i层上最多有<code>2^i-1</code>个结点</p><p>3.高度为h的m次树上最多有<code>（m^h-1）/（m-1）</code>个结点</p><p>4.具有n个结点的m次树最小高度是 <code>logm （n(m-1)+1)</code></p><h3 id="_4-2-满二叉树-完全二叉树" tabindex="-1"><a class="header-anchor" href="#_4-2-满二叉树-完全二叉树"><span>4.2 满二叉树，完全二叉树</span></a></h3><p>不多评价</p><h3 id="_4-3-二叉树的性质" tabindex="-1"><a class="header-anchor" href="#_4-3-二叉树的性质"><span>4.3 二叉树的性质</span></a></h3><p><code>n0 = n2 +1</code></p><p>i层 <code>2^i-1</code></p><p>高度为h最多有2^h - 1个结点</p><p>有n个结点的二叉树最小高度是log2（n+1）</p>',83)]))}const F=s(r,[["render",i]]),y=JSON.parse('{"path":"/zh/Data_Structure/DS_review.html","title":"数据结构考前查漏补缺","lang":"zh-CN","frontmatter":{"title":"数据结构考前查漏补缺","icon":"c","date":"2024-05-23T19:37:24.000Z","author":"XiaoXianYue","isOriginal":true,"category":["数据结构","大二下"],"tag":["数据结构","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"2. 线性表 老师强调的考点： 单链表的插入（基本语句）删除，头插尾插（有什么不同，各自的特点）。各个复杂度等。 双链表的插入删除（删除给定结点的前驱后继等等） 2.1 逻辑结构 有穷性 一致性 序列性！！ 2.1.1 语句标题 p48为例 2.2 顺序表（数组） 2.2.1 基本运算实现 1.建立顺序表 2.初始化，销毁，判断是否为空，求线性表长度，...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/Data_Structure/DS_review.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"数据结构考前查漏补缺"}],["meta",{"property":"og:description","content":"2. 线性表 老师强调的考点： 单链表的插入（基本语句）删除，头插尾插（有什么不同，各自的特点）。各个复杂度等。 双链表的插入删除（删除给定结点的前驱后继等等） 2.1 逻辑结构 有穷性 一致性 序列性！！ 2.1.1 语句标题 p48为例 2.2 顺序表（数组） 2.2.1 基本运算实现 1.建立顺序表 2.初始化，销毁，判断是否为空，求线性表长度，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T01:56:49.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-23T19:37:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T01:56:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构考前查漏补缺\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-23T19:37:24.000Z\\",\\"dateModified\\":\\"2024-05-30T01:56:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1716918425000,"updatedTime":1717034209000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":3,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":2.56,"words":769},"filePathRelative":"zh/Data_Structure/DS_review.md","localizedDate":"2024年5月23日","excerpt":"<h2>2. 线性表</h2>\\n<figure><figcaption></figcaption></figure>\\n<p>老师强调的考点：</p>\\n<p>单链表的插入（基本语句）删除，头插尾插（有什么不同，各自的特点）。各个复杂度等。</p>\\n<p>双链表的插入删除（删除给定结点的前驱后继等等）</p>\\n<h3>2.1 逻辑结构</h3>\\n<div class=\\"language-c line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"c\\" style=\\"background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#F8F8F2\\">L </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> (D,R)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">D </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> {ai </span><span style=\\"color:#F92672\\">|</span><span style=\\"color:#AE81FF\\"> 1</span><span style=\\"color:#F92672\\">&lt;=</span><span style=\\"color:#F8F8F2\\"> i </span><span style=\\"color:#F92672\\">&lt;=</span><span style=\\"color:#F8F8F2\\"> n , n</span><span style=\\"color:#F92672\\">&gt;</span><span style=\\"color:#AE81FF\\">0</span><span style=\\"color:#F8F8F2\\"> , ai为ElemType类型}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">R </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> {r}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">r </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> {</span><span style=\\"color:#F92672\\">&lt;</span><span style=\\"color:#F8F8F2\\">ai,ai</span><span style=\\"color:#F92672\\">+</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F92672\\">&gt;</span><span style=\\"color:#F92672\\"> |</span><span style=\\"color:#AE81FF\\"> 1</span><span style=\\"color:#F92672\\"> &lt;=</span><span style=\\"color:#F8F8F2\\"> i </span><span style=\\"color:#F92672\\">&lt;=</span><span style=\\"color:#F8F8F2\\"> n</span><span style=\\"color:#F92672\\">-</span><span style=\\"color:#AE81FF\\">1</span><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{F as comp,y as data};

import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as s,o as i}from"./app-DvVAFmtO.js";const l="/assets/image-20241011165649894-BSogsUMR.png",n="/assets/image-20241011140828912-7gDhwSJ3.png",r="/assets/image-20241011143741388-Bh9wav8n.png",o="/assets/image-20241011152614500-BCLEYa7r.png",h="/assets/image-20241011152747009-CdfSDWB6.png",d="/assets/image-20241011152834749-BHYu0Ybg.png",c="/assets/image-20241011152921625-CzCqY46E.png",p="/assets/image-20241011153020395-DriDA3wB.png",g="/assets/image-20241011153355377-Bo2tdDAR.png",m="/assets/image-20241011153412597-DTYk6od9.png",_="/assets/image-20241011153430174-Bjg_NOX2.png",u="/assets/image-20241011153533715-iHqC4Bk1.png",b="/assets/image-20241011164453947-CADa4eGq.png",f="/assets/image-20241011165818464-COrwyXfb.png",y="/assets/image-20241011170646705-XciqU6LR.png",v="/assets/image-20241011170714878-DmgCGyj8.png",k="/assets/image-20241011170723215-Cfj0wRIJ.png",w="/assets/image-20241011170740036-B3eQjzd8.png",z="/assets/image-20241011170808027-e8zvM76r.png",x="/assets/image-20241011171049448-OMydz6m-.png",T="/assets/image-20241011171059638-CST1CSSu.png",S="/assets/image-20241011171113201-NiDWkRgl.png",B="/assets/image-20241011171127900-0B5FyIcx.png",D="/assets/image-20241011171600658-Bsi_OEhi.png",C="/assets/image-20241011172209351-DCnD_tuu.png",A="/assets/image-20241011172241147-31sGWbHB.png",L="/assets/image-20241011173054300-x1E7h0K9.png",W="/assets/image-20241011173109809-DTMGtvQz.png",F="/assets/image-20241011173121346-r8Cm0miw.png",V="/assets/image-20241011173131857-C1a-D5KW.png",O="/assets/image-20241011174139380-C95sZNoZ.png",I="/assets/image-20241011204546188-q3QsFFaf.png",R="/assets/image-20241011204628955-B6AzMQ_7.png",H="/assets/image-20241011205125380-TOVZcWrl.png",j="/assets/image-20241011205201534-sWGBt5Ly.png",P="/assets/image-20241011205230536-CgYfPPTE.png",N="/assets/image-20241011205247170-DoksVJc2.png",q="/assets/image-20241011205501314-C05of2ly.png",U="/assets/image-20241011205608134-DhIMjsKr.png",M="/assets/image-20241011235041096-CqVMCmFM.png",E="/assets/image-20241011235112471-DzbtKWC5.png",Y="/assets/image-20241011235136675-CDrvichF.png",X="/assets/image-20241011235324606-zilaCJUN.png",G={};function J(K,e){return i(),t("div",null,e[0]||(e[0]=[s('<h2 id="_1-bst-searching-balanced-and-unbalanced-trees" tabindex="-1"><a class="header-anchor" href="#_1-bst-searching-balanced-and-unbalanced-trees"><span>1. BST | Searching balanced and unbalanced trees</span></a></h2><img src="'+l+'" alt="image-20241011165649894" style="zoom:33%;"><h3 id="_1-1-balanced-or-not" tabindex="-1"><a class="header-anchor" href="#_1-1-balanced-or-not"><span>1.1 balanced or not?</span></a></h3><img src="'+n+'" alt="image-20241011140828912" style="zoom:67%;"><h3 id="_1-2-height" tabindex="-1"><a class="header-anchor" href="#_1-2-height"><span>1.2 Height</span></a></h3><p>Node Height：<strong>从距离该节点最远的叶节点到该节点所经过的边的数量。</strong></p><p>Tree Height：二叉树的层数。</p><h3 id="_1-3-avl-tree" tabindex="-1"><a class="header-anchor" href="#_1-3-avl-tree"><span>1.3 AVL Tree</span></a></h3><p>(平衡二叉树？？)</p><h4 id="_1-3-1-基本特性" tabindex="-1"><a class="header-anchor" href="#_1-3-1-基本特性"><span>1.3.1 基本特性</span></a></h4><ul><li>AVL trees require heights of left and right children of every node to differ by at most ± 1</li><li>AVL Trees are balanced</li><li>Worst case is when one subtree has 1 more than the other for every node</li></ul><div class="hint-container note"><p class="hint-container-title">translation</p><ul><li>AVL 树要求每个节点的左右子节点高度最多相差 ± 1</li><li>AVL 树是平衡的</li><li>最差的情况是一个子树的每个节点都比另一个子树多 1 个节点</li></ul></div><h4 id="_1-3-2-worst" tabindex="-1"><a class="header-anchor" href="#_1-3-2-worst"><span>1.3.2 Worst…</span></a></h4><img src="'+r+'" alt="image-20241011143741388" style="zoom:67%;"><h2 id="_2-如何实现一个avl树" tabindex="-1"><a class="header-anchor" href="#_2-如何实现一个avl树"><span>2. 如何实现一个AVL树</span></a></h2><ul><li>In theory it is possible to rebalance an existing tree</li><li>But it makes more sense to balance as we build</li><li>The simplest solution given an unbalanced tree is to flatten it and then reconstruct</li><li>Applying AVL on insertion means the tree can never be unbalanced</li><li>This section explains how that happens</li></ul><p>::: node translation</p><ul><li>理论上可以重新平衡现有的树木</li><li>但更合理的做法是在构建过程中实现平衡</li><li>对于一棵不平衡的树，最简单的解决方法就是将其扁平化，然后重新构建</li><li>在插入时应用 AVL 意味着树永远不会不平衡</li><li>本节将解释如何做到这一点</li></ul><p>:::</p><h3 id="_2-1-rotation" tabindex="-1"><a class="header-anchor" href="#_2-1-rotation"><span>2.1 Rotation</span></a></h3><ul><li><p><strong>4 cases：</strong></p><ul><li><p>Double left heavy</p></li><li><p>Double right heavy</p></li><li><p>Left-right heavy</p></li><li><p>Right-left heavy</p></li></ul></li></ul><h4 id="_2-1-1-double-left" tabindex="-1"><a class="header-anchor" href="#_2-1-1-double-left"><span>2.1.1 Double Left</span></a></h4><img src="'+o+'" alt="image-20241011152614500" style="zoom:33%;"><h5 id="single-right-rotation" tabindex="-1"><a class="header-anchor" href="#single-right-rotation"><span><strong>Single right Rotation</strong></span></a></h5><p>Step 1：</p><img src="'+h+'" alt="image-20241011152747009" style="zoom:25%;"><p>Step 2：</p><img src="'+d+'" alt="image-20241011152834749" style="zoom:25%;"><h4 id="_2-1-2-double-left-heavy" tabindex="-1"><a class="header-anchor" href="#_2-1-2-double-left-heavy"><span>2.1.2 Double Left Heavy</span></a></h4><img src="'+c+'" alt="image-20241011152921625" style="zoom:33%;"><h5 id="let-try" tabindex="-1"><a class="header-anchor" href="#let-try"><span>Let&#39;try</span></a></h5><img src="'+p+'" alt="image-20241011153020395" style="zoom:33%;"><h5 id="solution" tabindex="-1"><a class="header-anchor" href="#solution"><span>Solution</span></a></h5><p>Step 1:</p><img src="'+g+'" alt="image-20241011153355377" style="zoom:25%;"><p>Step 2:</p><img src="'+m+'" alt="image-20241011153412597" style="zoom:25%;"><p>Step 3:</p><img src="'+_+'" alt="image-20241011153430174" style="zoom:25%;"><h4 id="_2-1-2-pseudocode" tabindex="-1"><a class="header-anchor" href="#_2-1-2-pseudocode"><span>2.1.2 Pseudocode</span></a></h4><figure><img src="'+u+'" alt="image-20241011153533715" tabindex="0" loading="lazy"><figcaption>image-20241011153533715</figcaption></figure><h2 id="_3-binary-tree" tabindex="-1"><a class="header-anchor" href="#_3-binary-tree"><span>3. Binary tree</span></a></h2><h3 id="_3-1-前言及目录" tabindex="-1"><a class="header-anchor" href="#_3-1-前言及目录"><span>3.1 前言及目录</span></a></h3><h4 id="_3-1-1-前言" tabindex="-1"><a class="header-anchor" href="#_3-1-1-前言"><span>3.1.1 前言</span></a></h4><ul><li>We have started to look at <ul><li>Binary Trees</li><li>Heaps</li></ul></li><li>A heap is a type of binary tree</li><li>Arrangement of data as trees speeds up search by reducing the number of operations necessary to find a target</li><li>They allow efficient <ul><li>Search (finding a value)</li><li>Deleting</li><li>Inserting</li></ul></li></ul><h4 id="_3-1-2-目录" tabindex="-1"><a class="header-anchor" href="#_3-1-2-目录"><span>3.1.2 目录</span></a></h4><ul><li><p>Expand your understanding of trees:</p><p>unbalanced trees | well-balanced trees | AVL trees</p></li><li><p>Understand types of tree traversal: pre-order | in-order | post-order</p></li><li><p>Understand further searches: breadth-first | depth-first</p></li></ul><h3 id="_3-2-terms" tabindex="-1"><a class="header-anchor" href="#_3-2-terms"><span>3.2 Terms</span></a></h3><figure><img src="'+b+'" alt="image-20241011164453947" tabindex="0" loading="lazy"><figcaption>image-20241011164453947</figcaption></figure><h3 id="_3-3-rules" tabindex="-1"><a class="header-anchor" href="#_3-3-rules"><span>3.3 Rules</span></a></h3><ul><li>For each node, the value of all nodes in its left subtree must be less</li><li>For each node, the value of all nodes in its right subtree must be greater</li><li>Any value on the right must be greater than any value on the left</li></ul><img src="'+f+'" alt="image-20241011165818464" style="zoom:50%;"><h3 id="_3-4-insertion" tabindex="-1"><a class="header-anchor" href="#_3-4-insertion"><span>3.4 Insertion</span></a></h3><img src="'+y+'" alt="image-20241011170646705" style="zoom:25%;"><ol><li><strong>Insert 9</strong></li></ol><img src="'+v+'" alt="image-20241011170714878" style="zoom:25%;"><img src="'+k+'" alt="image-20241011170723215" style="zoom:25%;"><img src="'+w+'" alt="image-20241011170740036" style="zoom:25%;"><img src="'+z+'" alt="image-20241011170808027" style="zoom:25%;"><ol start="2"><li><strong>Insert 2</strong></li></ol><img src="'+x+'" alt="image-20241011171049448" style="zoom:25%;"><img src="'+T+'" alt="image-20241011171059638" style="zoom:25%;"><img src="'+S+'" alt="image-20241011171113201" style="zoom:25%;"><img src="'+B+'" alt="image-20241011171127900" style="zoom:25%;"><h3 id="_3-5-delete" tabindex="-1"><a class="header-anchor" href="#_3-5-delete"><span>3.5 Delete</span></a></h3><h4 id="_3-5-1-if-we-wanna-delete-a-leaf-node-we-just-move-it" tabindex="-1"><a class="header-anchor" href="#_3-5-1-if-we-wanna-delete-a-leaf-node-we-just-move-it"><span>3.5.1 if we wanna delete a leaf node, we just move it.</span></a></h4><h4 id="_3-5-2-one-child" tabindex="-1"><a class="header-anchor" href="#_3-5-2-one-child"><span>3.5.2 One Child</span></a></h4><p>Here’s the BST with inserted 9. Now we want to delete 12. How? This BST is different; 12 has a child (9)</p><img src="'+D+'" alt="image-20241011171600658" style="zoom:50%;"><p><strong>Step:</strong></p><ol><li><p>We need to attach what will be thnew parent of 9, to 9</p><img src="'+C+'" alt="image-20241011172209351" style="zoom:50%;"></li><li><p>and remove 12</p><img src="'+A+'" alt="image-20241011172241147" style="zoom:50%;"></li></ol><h4 id="_3-5-3-two-children" tabindex="-1"><a class="header-anchor" href="#_3-5-3-two-children"><span>3.5.3 Two Children?</span></a></h4><ul><li>Now, looking again at the original BST</li><li>We now want to delete 8</li><li>But hold on – it has TWO children, 6 and 12</li></ul><p><strong>Step:</strong></p><p>So what we need to do is not remove the node…… but remove its data</p><img src="'+L+'" alt="image-20241011173054300" style="zoom:25%;"><p>We need to look for the minimum value in the right subtree of the node…… which is 12 (there is no other value)</p><img src="'+W+'" alt="image-20241011173109809" style="zoom:25%;"><img src="'+F+'" alt="image-20241011173121346" style="zoom:25%;"><p>Copy the data to the empty node…… and delete the leaf</p><img src="'+V+'" alt="image-20241011173131857" style="zoom:25%;"><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>有两个孩子时可以怎么选择替换的节点？</p><p>如果从右边选，选最小的；从左边选，选最大的！</p><p>如这里：</p><img src="'+O+'" alt="image-20241011174139380" style="zoom:25%;"><p>可以选 7 或者 11</p></div><h3 id="_3-6-traversal" tabindex="-1"><a class="header-anchor" href="#_3-6-traversal"><span>3.6 Traversal</span></a></h3><h4 id="_3-6-1-three-kinds" tabindex="-1"><a class="header-anchor" href="#_3-6-1-three-kinds"><span>3.6.1 three kinds</span></a></h4><p>Pre order | In order | Post order</p><h4 id="_3-6-2-pre-order" tabindex="-1"><a class="header-anchor" href="#_3-6-2-pre-order"><span>3.6.2 Pre Order</span></a></h4><ul><li>定义</li></ul><img src="'+I+'" alt="image-20241011204546188" style="zoom:50%;"><ul><li><p>伪代码</p><img src="'+R+'" alt="image-20241011204628955" style="zoom:50%;"></li></ul><h4 id="_3-6-3-in-order" tabindex="-1"><a class="header-anchor" href="#_3-6-3-in-order"><span>3.6.3 In Order</span></a></h4><ul><li><p>定义</p><img src="'+H+'" alt="image-20241011205125380" style="zoom:50%;"></li><li><p>伪代码</p><img src="'+j+'" alt="image-20241011205201534" style="zoom:50%;"></li></ul><h4 id="_3-6-4-post-order" tabindex="-1"><a class="header-anchor" href="#_3-6-4-post-order"><span>3.6.4 Post Order</span></a></h4><ul><li><p>定义</p><img src="'+P+'" alt="image-20241011205230536" style="zoom:50%;"></li><li><p>伪代码</p><img src="'+N+'" alt="image-20241011205247170" style="zoom:50%;"></li></ul><h3 id="_3-7-深度和广度遍历" tabindex="-1"><a class="header-anchor" href="#_3-7-深度和广度遍历"><span>3.7 深度和广度遍历</span></a></h3><ul><li><strong>Breadth First Search</strong></li></ul><img src="'+q+'" alt="image-20241011205501314" style="zoom:50%;"><ul><li>Depth First Search</li></ul><img src="'+U+'" alt="image-20241011205608134" style="zoom:50%;"><ul><li>什么时候使用 Breadth First 什么时候使用 Depth First？ <ul><li>BFS is good for balanced trees</li><li>DFS is good for unbalanced trees</li><li>We’ll come back to that shortly</li><li>BUT – there’s a better way: binary search trees</li></ul></li></ul><h2 id="_4-bst-——-binary-search-trees" tabindex="-1"><a class="header-anchor" href="#_4-bst-——-binary-search-trees"><span>4. BST —— Binary Search Trees</span></a></h2><p>回顾：在二叉搜索树中，左节点的值 &lt; 根结点的值 &lt; 右节点的值，我们可以利用这一特性来搜索我们想要的值。</p><h3 id="_4-1-balanced-and-unbalanced-trees-——-bfs-or-dfs" tabindex="-1"><a class="header-anchor" href="#_4-1-balanced-and-unbalanced-trees-——-bfs-or-dfs"><span>4.1 Balanced and Unbalanced Trees —— BFS or DFS</span></a></h3><img src="'+M+'" alt="image-20241011235041096" style="zoom:50%;"><img src="'+E+'" alt="image-20241011235112471" style="zoom:50%;"><img src="'+Y+'" alt="image-20241011235136675" style="zoom:50%;"><img src="'+X+'" alt="image-20241011235324606" style="zoom:50%;"><h3 id="_4-2-avl-tree" tabindex="-1"><a class="header-anchor" href="#_4-2-avl-tree"><span>4.2 AVL Tree</span></a></h3>',107)]))}const $=a(G,[["render",J],["__file","Week04_ppt.html.vue"]]),ee=JSON.parse(`{"path":"/zh/Advanced_Algorithms/Week04_ppt.html","title":"高级算法——第四周ppt总结","lang":"zh-CN","frontmatter":{"title":"高级算法——第四周ppt总结","icon":"python","date":"2024-10-11T14:02:27.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. BST | Searching balanced and unbalanced trees","slug":"_1-bst-searching-balanced-and-unbalanced-trees","link":"#_1-bst-searching-balanced-and-unbalanced-trees","children":[{"level":3,"title":"1.1 balanced or not?","slug":"_1-1-balanced-or-not","link":"#_1-1-balanced-or-not","children":[]},{"level":3,"title":"1.2 Height","slug":"_1-2-height","link":"#_1-2-height","children":[]},{"level":3,"title":"1.3 AVL Tree","slug":"_1-3-avl-tree","link":"#_1-3-avl-tree","children":[{"level":4,"title":"1.3.1 基本特性","slug":"_1-3-1-基本特性","link":"#_1-3-1-基本特性","children":[]},{"level":4,"title":"1.3.2 Worst…","slug":"_1-3-2-worst","link":"#_1-3-2-worst","children":[]}]}]},{"level":2,"title":"2. 如何实现一个AVL树","slug":"_2-如何实现一个avl树","link":"#_2-如何实现一个avl树","children":[{"level":3,"title":"2.1 Rotation","slug":"_2-1-rotation","link":"#_2-1-rotation","children":[{"level":4,"title":"2.1.1 Double Left","slug":"_2-1-1-double-left","link":"#_2-1-1-double-left","children":[{"level":5,"title":"Single right Rotation","slug":"single-right-rotation","link":"#single-right-rotation","children":[]}]},{"level":4,"title":"2.1.2 Double Left Heavy","slug":"_2-1-2-double-left-heavy","link":"#_2-1-2-double-left-heavy","children":[{"level":5,"title":"Let'try","slug":"let-try","link":"#let-try","children":[]},{"level":5,"title":"Solution","slug":"solution","link":"#solution","children":[]}]},{"level":4,"title":"2.1.2 Pseudocode","slug":"_2-1-2-pseudocode","link":"#_2-1-2-pseudocode","children":[]}]}]},{"level":2,"title":"3. Binary tree","slug":"_3-binary-tree","link":"#_3-binary-tree","children":[{"level":3,"title":"3.1 前言及目录","slug":"_3-1-前言及目录","link":"#_3-1-前言及目录","children":[{"level":4,"title":"3.1.1 前言","slug":"_3-1-1-前言","link":"#_3-1-1-前言","children":[]},{"level":4,"title":"3.1.2 目录","slug":"_3-1-2-目录","link":"#_3-1-2-目录","children":[]}]},{"level":3,"title":"3.2 Terms","slug":"_3-2-terms","link":"#_3-2-terms","children":[]},{"level":3,"title":"3.3 Rules","slug":"_3-3-rules","link":"#_3-3-rules","children":[]},{"level":3,"title":"3.4 Insertion","slug":"_3-4-insertion","link":"#_3-4-insertion","children":[]},{"level":3,"title":"3.5 Delete","slug":"_3-5-delete","link":"#_3-5-delete","children":[{"level":4,"title":"3.5.1 if we wanna delete a leaf node, we just move it.","slug":"_3-5-1-if-we-wanna-delete-a-leaf-node-we-just-move-it","link":"#_3-5-1-if-we-wanna-delete-a-leaf-node-we-just-move-it","children":[]},{"level":4,"title":"3.5.2 One Child","slug":"_3-5-2-one-child","link":"#_3-5-2-one-child","children":[]},{"level":4,"title":"3.5.3 Two Children?","slug":"_3-5-3-two-children","link":"#_3-5-3-two-children","children":[]}]},{"level":3,"title":"3.6 Traversal","slug":"_3-6-traversal","link":"#_3-6-traversal","children":[{"level":4,"title":"3.6.1 three kinds","slug":"_3-6-1-three-kinds","link":"#_3-6-1-three-kinds","children":[]},{"level":4,"title":"3.6.2 Pre Order","slug":"_3-6-2-pre-order","link":"#_3-6-2-pre-order","children":[]},{"level":4,"title":"3.6.3 In Order","slug":"_3-6-3-in-order","link":"#_3-6-3-in-order","children":[]},{"level":4,"title":"3.6.4 Post Order","slug":"_3-6-4-post-order","link":"#_3-6-4-post-order","children":[]}]},{"level":3,"title":"3.7 深度和广度遍历","slug":"_3-7-深度和广度遍历","link":"#_3-7-深度和广度遍历","children":[]}]},{"level":2,"title":"4. BST —— Binary Search Trees","slug":"_4-bst-——-binary-search-trees","link":"#_4-bst-——-binary-search-trees","children":[{"level":3,"title":"4.1 Balanced and Unbalanced Trees —— BFS or DFS","slug":"_4-1-balanced-and-unbalanced-trees-——-bfs-or-dfs","link":"#_4-1-balanced-and-unbalanced-trees-——-bfs-or-dfs","children":[]},{"level":3,"title":"4.2 AVL Tree","slug":"_4-2-avl-tree","link":"#_4-2-avl-tree","children":[]}]}],"git":{"createdTime":1728830465000,"updatedTime":1728830465000,"contributors":[{"name":"Xiaoxianyue","email":"2310219843@qq.com","commits":1}]},"readingTime":{"minutes":4.52,"words":1356},"filePathRelative":"zh/Advanced_Algorithms/Week04_ppt.md","localizedDate":"2024年10月11日"}`);export{$ as comp,ee as data};

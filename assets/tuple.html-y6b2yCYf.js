import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as p}from"./app-DT5duD8C.js";const o={};function F(e,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="_1-创建元组" tabindex="-1"><a class="header-anchor" href="#_1-创建元组"><span>1. 创建元组</span></a></h2><ul><li>使用小括号创建</li><li>里面的元素用英文逗号隔开</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;in&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup,</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup))</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;in&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与列表区别：</p><ul><li>列表用[]包裹，列表中元素可以被修改，添加，删除。</li><li>元组用()，元组中元素不可以被改变。</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;in&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;C:\\Coder\\Lesson\\d.py&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;tuple&#39;</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> does </span><span style="color:#F92672;">not</span><span style="color:#F8F8F2;"> support item assignment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当元组只有一个元素：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup),tup)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;str&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> moon</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup),tup)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;int&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup),tup)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;list&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>怎么解决这个问题?</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup),tup)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为啥逗号能解决这个问题？？</li></ul><div class="hint-container note"><p class="hint-container-title">小tips</p><p>系统会把只有一个元素的元组两边的小括号看成算术表达式的小括号。又因为没有算数优先级，系统会自动忽略掉！！</p></div><h2 id="_2-元组元素提取" tabindex="-1"><a class="header-anchor" href="#_2-元组元素提取"><span>2. 元组元素提取</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;in&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">],tup[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">],tup[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">],tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">::</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">],tup[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup[::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">moon </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> taurus (</span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">) (</span><span style="color:#E6DB74;">&#39;in&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;taurus&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;in&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;moon&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-元组的拼接" tabindex="-1"><a class="header-anchor" href="#_3-元组的拼接"><span>3. 元组的拼接</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup1 </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> tup2)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-小试牛刀" tabindex="-1"><a class="header-anchor" href="#_4-小试牛刀"><span>4. 小试牛刀</span></a></h2><p>「利用现有的知识排序」 对以下元组进行排序：</p><p><code>tup = (9, 7, 5, 3, 1, 2, 4, 6, 8, 0)</code></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup_new </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup_new)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会输出一个列表。为什么？</p><div class="hint-container info"><p class="hint-container-title">sorted所做的工作</p><p>sorted实际上是吧<code>tup</code>转化成了一个列表，再来排序，这样实现它的可变性。</p></div><p>那我们还要把它转化回元组。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup_new </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> tuple</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">sorted</span><span style="color:#F8F8F2;">(tup))</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup_new)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-zip" tabindex="-1"><a class="header-anchor" href="#_5-zip"><span>5. zip</span></a></h2><p>**zip()**是一个内置函数。用于将多个可迭代对象（如列表，元组，字符串等等）的相应元素配对并返回一个元组的迭代器。</p><p>如果你有两个或更多的列表，并且想要根据它们的相应元素创建一个新的迭代器，那么zip()非常有用。</p><h3 id="_5-1-zip用法演示" tabindex="-1"><a class="header-anchor" href="#_5-1-zip用法演示"><span>5.1 zip用法演示：</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">list1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">list2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#88846F;"># 可以使用 zip 来配对这些列表的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">zipped </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(list1,list2)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(zipped) </span><span style="color:#88846F;"># 是一个 zip 对象，迭代器地址</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">(zipped)) </span><span style="color:#88846F;"># 转化成列表查看，也可以转换成元组</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;">zip</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">00000257387B4100</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">[(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-计算列的和" tabindex="-1"><a class="header-anchor" href="#_5-2-计算列的和"><span>5.2 计算列的和：</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">zipdata </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(lst[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], lst[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], lst[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(zipdata)</span></span>
<span class="line"><span style="color:#F8F8F2;">r </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(zipdata) </span><span style="color:#88846F;"># 强制转换，解包。</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(r)</span></span>
<span class="line"><span style="color:#F8F8F2;">col1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sum</span><span style="color:#F8F8F2;">(r[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">col2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sum</span><span style="color:#F8F8F2;">(r[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">col3 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sum</span><span style="color:#F8F8F2;">(r[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(col1, col2, col3)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;">zip</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">000001FED78EFAC0</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">[(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#AE81FF;">12</span><span style="color:#AE81FF;"> 15</span><span style="color:#AE81FF;"> 18</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="hint-container tip"><p class="hint-container-title">zip的映射功能</p><p>这个zip相当于分别读取了所有子列表的0号位，1号位，2号位。把其转化成列表，子列表中的同一列的元素就被分在同一个元组中。（映射）</p></div><p>还有一点，zip只能强制转化一次数据类型。如下就会返回空元组(数据不见了)：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">zipdata </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(lst[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], lst[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], lst[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(zipdata)</span></span>
<span class="line"><span style="color:#F8F8F2;">r </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(zipdata) </span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">tuple</span><span style="color:#F8F8F2;">(zipdata))</span></span>
<span class="line"><span style="color:#88846F;"># col1 = sum(r[0])</span></span>
<span class="line"><span style="color:#88846F;"># col2 = sum(r[1])</span></span>
<span class="line"><span style="color:#88846F;"># col3 = sum(r[2])</span></span>
<span class="line"><span style="color:#88846F;"># print(col1, col2, col3)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;">zip</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">00000233AB6FF840</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#AE81FF;">12</span><span style="color:#AE81FF;"> 15</span><span style="color:#AE81FF;"> 18</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>第二种解包：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">zipdata </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(lst[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], lst[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], lst[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">zipdata)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">) (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">) (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for循环也可以对zip结果进行输出</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">zipped </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(lst1, lst2)</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> num, letter </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> zipped:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;Number:</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">num</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, Letter:</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">letter</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;">#output</span></span>
<span class="line"><span style="color:#F8F8F2;">Number:</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, Letter:a</span></span>
<span class="line"><span style="color:#F8F8F2;">Number:</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, Letter:b</span></span>
<span class="line"><span style="color:#F8F8F2;">Number:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, Letter:c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38)]))}const r=n(o,[["render",F]]),i=JSON.parse('{"path":"/zh/python1v1/tuple.html","title":"06-元组","lang":"zh-CN","frontmatter":{"title":"06-元组","icon":"python","date":"2024-08-05T11:46:21.000Z","author":"XiaoXianYue","isOriginal":true,"category":["课堂笔记"],"tag":["课堂笔记"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1722830852000,"updatedTime":1723003670000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":3,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":3.3,"words":991},"filePathRelative":"zh/python1v1/tuple.md","localizedDate":"2024年8月5日"}');export{r as comp,i as data};

import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as p,e as c,w as a,r as F,o as d,a as s,d as n}from"./app-C6Ab6rwu.js";const y="/assets/68743c4875ee1303dadb81ea1da4951-Bf87zJl7.png",u="/assets/4ea66022292e5f27d1835f3d3026d6c-CfvE0jXV.png",v={};function m(b,l){const i=F("CodeTabs");return d(),r("div",null,[l[12]||(l[12]=p('<h2 id="_1-初窥门款" tabindex="-1"><a class="header-anchor" href="#_1-初窥门款"><span>1. 初窥门款</span></a></h2><p>异步模型是事件驱动模型的基础。</p><blockquote><p>事件驱动是指在持续事务管理过程中，进行决策的一种策略，即跟随当前时间点上出现的事件，调动可用资源，执行相关任务，使不断出现的问题得以解决，防止事务堆积。在计算机编程、公共关系、经济活动等领域均有应用。</p><p>所谓事件驱动，简单地说就是你点什么按钮（即产生什么事件），电脑执行什么操作（即调用什么函数）。当然事件不仅限于用户的操作，事件驱动的核心自然是<strong>事件</strong>。从事件角度说，事件<a href="https://baike.baidu.com/item/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener noreferrer">驱动程序</a>的基本结构是由一个事件收集器、一个事件发送器和一个事件处理器组成。事件收集器专门负责收集所有事件，包括来自用户的（如鼠标、键盘事件等）、来自硬件的（如时钟事件等）和来自软件的（如操作系统、应用程序本身等）。事件发送器负责将收集器收集到的事件分发到目标对象中。事件处理器做具体的事件响应工作，它往往要到实现阶段才完全确定，因而需要运用<a href="https://baike.baidu.com/item/%E8%99%9A%E5%87%BD%E6%95%B0" target="_blank" rel="noopener noreferrer">虚函数</a>机制（函数名往往取为类似于 HandleMsg 的一个名字）。对于框架的使用者来说，他们唯一能够看到的是事件处理器。这也是他们所关心的内容。</p><p>视图（即我们通常所说的“窗口”）是“事件驱动”应用程序的另一个要元。它是我们所说的事件发送器的目标对象。视图接受事件并能够对其进行处理。当我们将事件发送到具体的视图时，实际上我们完成了一个根本性的变化：从传统的流线型程序结构到事件触发方式的转变。这样应用程序具备相当的柔性，可以应付种种离散的、随机的事件。</p></blockquote><p>换个说法：你点击出来一个页面，你点击一下它给你一个反馈，你点击一下它给你个反馈，这个就是事件驱动。</p><img src="'+y+'" alt="68743c4875ee1303dadb81ea1da4951" style="zoom:33%;"><p>异步活动的执行模型可以只有一个单一的主控制流，能在单核心系统和多核心系统中运行。</p><p>在并发执行的异步模型中，许多任务被穿插在同一时间线上，所有任务都由一个控制流执行（单一线程）。任务的执行可能被暂停（挂起）或恢复，中间的这段时间线程将会去执行其他任务。</p><p><strong>比如：</strong></p><p>上图（图一）就是一个单线程，但是它去可以穿插许多任务<code>（Task 1、Task 2、Task 3）</code>。</p><p>比方说：<code>Task 1</code> 它需要执行三次，每执行一次 <code>Task 1</code> 就要等待一段时间才可以继续执行。</p><p>而<strong>异步</strong>的时候，我们就可以在它<code>（Task 1 ）</code>等待的时候，分出去 <code>Task 1</code> 去等待，然后让该线程去执行下一个任务<code>（Task 2）</code>。当 <code>Task 2</code> 也需要等待的时候，也就把 <code>Task 2</code> 放出去等待， 再执行 <code>Task 3</code> 之后循环往复。等哪个准备好了，哪个需要执行就再放回我们的线程上执行。（如果需要等待的化，就再把它剔除出去）</p><p>当然，我们这些异步执行任务时随机的，并不是说 <code>Task 1、Task 2、Task 3</code> 按顺序来执行。</p><p>异步有一个特点，它的执行顺序时随机的不可控的，一切都是由操作系统随机进行的。（我们只需要定义任务即可）具体哪个时刻执行哪个任务我们时无法预测的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>它的所有任务时单线程，同学们不要认为是多线程。</li><li>它的异步就是一条时间线上的，不可控的任务随机执行。</li><li>这个任务可能被暂停或恢复。</li></ol><p>Ps：任务需要等待一段时间的时候，就被暂停放出去。等任务等待时间过去要再次执行任务的时候，任务就被恢复。</p></div><p>所以，上面说了这么多，异步其实就是单线程执行多种任务，这些线程上的任务可以被暂停或者恢复，不断地一些小人物穿插在一起。</p><p>异步中间其实主要是协程，同学们可能听过这两个概念，不过异步和协程是不一样的，它们是搭配起来用的。</p><h2 id="_2-多线程和异步的区别" tabindex="-1"><a class="header-anchor" href="#_2-多线程和异步的区别"><span>2. 多线程和异步的区别</span></a></h2><h3 id="_2-1-概念和工作原理" tabindex="-1"><a class="header-anchor" href="#_2-1-概念和工作原理"><span>2.1 概念和工作原理</span></a></h3><ul><li><p>多线程：</p><ul><li>指的是在一个进程中创建多个线程，这些线程可以并发的进行。</li><li>每个线程都有自己的执行路径，但他们共享进程的资源（如内存，文件描述符）</li><li>多线程依赖于操作系统的进程调度，由操作</li></ul></li><li><p>异步如上所示</p></li></ul><h3 id="_2-2-并发与并行" tabindex="-1"><a class="header-anchor" href="#_2-2-并发与并行"><span>2.2 并发与并行</span></a></h3><img src="'+u+'" alt="4ea66022292e5f27d1835f3d3026d6c" style="zoom:33%;"><p><strong>多线程</strong>：</p><ul><li>在多核 CPU 上，多线程可以实现真正的并行（多个线程同时运行）。</li><li>但在 Python 中，由于 GIL（全局解释器锁）的限制，Python 的多线程在计算密集型任务中无法实现真正的并行，只能在 I/O 密集型任务中发挥作用。</li></ul><p><strong>异步</strong>：</p><ul><li>异步通常是在单线程中实现的伪并发（通过切换任务来实现效率提升）。</li><li>它更适合 I/O 密集型任务，比如文件操作、网络请求等，不能直接利用多核 CPU。</li></ul><h3 id="_2-3-适用场景" tabindex="-1"><a class="header-anchor" href="#_2-3-适用场景"><span>2.3 适用场景</span></a></h3><p><strong>多线程</strong>：</p><ul><li>适合计算密集型任务（前提是没有 GIL 限制，或者使用多进程替代）。</li><li>适合需要并行处理的场景，如多任务同时执行、数据处理。</li></ul><p><strong>异步</strong>：</p><ul><li>适合 I/O 密集型任务，比如高并发网络服务器、数据库操作、文件读写。</li><li>对 CPU 的利用率低，但对 I/O 的效率高。</li></ul><h3 id="_2-4-实现方式" tabindex="-1"><a class="header-anchor" href="#_2-4-实现方式"><span>2.4 实现方式</span></a></h3><p><strong>多线程</strong>：</p><ul><li>使用标准库（如 Python 的 <code>threading</code> 或 Java 的 <code>Thread</code>）。</li><li>在实现时需要考虑线程安全问题，比如使用锁（Lock）来避免竞态条件。</li></ul><p><strong>异步</strong>：</p><ul><li>通过事件循环驱动任务执行，例如 Python 的 <code>asyncio</code>，JavaScript 的 <code>Promise</code> 和 <code>async/await</code>。</li><li>通常不需要处理线程安全问题，但需要理解事件循环的工作原理。</li></ul><h3 id="_2-5-开发难度" tabindex="-1"><a class="header-anchor" href="#_2-5-开发难度"><span>2.5 开发难度</span></a></h3><ul><li>多线程： <ul><li>需要管理线程的创建、销毁、同步和锁的使用，容易出现死锁和资源竞争问题。</li></ul></li><li>异步 <ul><li>对初学者而言，理解事件循环、回调机制、<code>async/await</code> 等概念可能需要一定时间，但相对线程更易于调试。</li></ul></li></ul><h3 id="_2-6-性能对比" tabindex="-1"><a class="header-anchor" href="#_2-6-性能对比"><span>2.6 性能对比</span></a></h3><p><strong>多线程</strong>：</p><ul><li>如果任务是计算密集型，且没有 GIL 限制，多线程在多核 CPU 上可以大幅提升性能。</li><li>对于 I/O 密集型任务，线程数过多会导致上下文切换的开销。</li></ul><p><strong>异步</strong>：</p><ul><li>减少了线程上下文切换的开销，适合高并发的 I/O 密集型任务，但对于计算密集型任务表现不佳。</li></ul>',42)),c(i,{id:"265",data:[{id:"多线程（Python 示例）"},{id:"异步（Python 示例）"}]},{title0:a(({value:e,isActive:o})=>l[0]||(l[0]=[n("多线程（Python 示例）")])),title1:a(({value:e,isActive:o})=>l[1]||(l[1]=[n("异步（Python 示例）")])),tab0:a(({value:e,isActive:o})=>l[2]||(l[2]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," threading")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," time")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," task"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"name"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"Thread '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"name"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' starting"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    time.sleep("),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"Thread '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"name"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' finished"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"threads "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    t "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," threading.Thread("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"target"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"task, "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}},"(i,))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    threads.append(t)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    t.start()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," t "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," threads:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    t.join()")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[3]||(l[3]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," asyncio")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," task"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"name"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"Task '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"name"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' starting"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.sleep("),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"f"),s("span",{style:{color:"#E6DB74"}},'"Task '),s("span",{style:{color:"#AE81FF"}},"{"),s("span",{style:{color:"#F8F8F2"}},"name"),s("span",{style:{color:"#AE81FF"}},"}"),s("span",{style:{color:"#E6DB74"}},' finished"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    tasks "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," [task(i) "),s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},")]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.gather("),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}},"tasks)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"asyncio.run(main())")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),l[13]||(l[13]=p(`<h3 id="_2-7-总结" tabindex="-1"><a class="header-anchor" href="#_2-7-总结"><span>2.7 总结</span></a></h3><ul><li><p>如果需要高并发处理 I/O 密集型任务，建议使用异步。</p></li><li><p>如果需要处理计算密集型任务，可以选择多线程（或更常用的多进程）。</p></li><li><p>多线程适合需要利用多核 CPU 的场景，而异步更适合单线程情况下提升程序的响应性。</p></li></ul><h2 id="_3-items" tabindex="-1"><a class="header-anchor" href="#_3-items"><span>3. Items</span></a></h2><h3 id="_3-1-阻塞" tabindex="-1"><a class="header-anchor" href="#_3-1-阻塞"><span>3.1 阻塞</span></a></h3><p>阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。</p><p>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正处理事情，它们也会被阻塞。如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。</p><h3 id="_3-2-非阻塞" tabindex="-1"><a class="header-anchor" href="#_3-2-非阻塞"><span>3.2 非阻塞</span></a></h3><p>程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的。</p><p>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</p><p>非阻塞的存在是因为阻塞存在，正因为某个操作阻塞导致的耗时与效率低下，我们才要把它变成非阻塞的。</p><h3 id="_3-3-同步" tabindex="-1"><a class="header-anchor" href="#_3-3-同步"><span>3.3 同步</span></a></h3><p>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。</p><p>例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。</p><p>简言之，同步意味着有序。</p><h3 id="_3-4-异步" tabindex="-1"><a class="header-anchor" href="#_3-4-异步"><span>3.4 异步</span></a></h3><p>为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。</p><p>例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。</p><p>简言之，异步意味着无序。</p><h3 id="_3-5-多进程" tabindex="-1"><a class="header-anchor" href="#_3-5-多进程"><span>3.5 多进程</span></a></h3><p>多进程就是利用 CPU 的多核优势，在同一时间并行地执行多个任务，可以大大提高执行效率。</p><h3 id="_3-6-协程" tabindex="-1"><a class="header-anchor" href="#_3-6-协程"><span>3.6 协程</span></a></h3><p>协程，英文叫作 Coroutine，又称微线程、纤程，协程是一种用户态的轻量级线程。</p><p>协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。</p><p>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。</p><p>我们可以使用协程来实现异步操作，比如在网络爬虫场景下，我们发出一个请求之后，需要等待一定的时间才能得到响应，但其实在这个等待过程中，程序可以干许多其他的事情，等到响应得到之后才切换回来继续处理，这样可以充分利用 CPU 和其他资源，这就是协程的优势。</p><h3 id="_3-7-事件循环" tabindex="-1"><a class="header-anchor" href="#_3-7-事件循环"><span>3.7 事件循环</span></a></h3><p>在学习 <code>asyncio</code>之前还需要知道这样的几个概念。</p><p>事件循环是一种处理多并发量的有效方式，在维基百科中它被描述为**「一种等待程序分配事件或消息的编程架构」<strong>，我们可以定义事件循环来简化使用轮询方法来监控事件，通俗的说法就是</strong>「当 A 发生时，执行 B」**。</p><p><strong>所谓的事件，其实就是函数。</strong></p><p>事件循环，就是有一个队列，里面存放着一堆函数，从第一个函数开始执行，在函数执行的过程中，可能会有新的函数继续加入到这个队列中。一直到队列中所有的函数被执行完毕，并且再也不会有新的函数被添加到这个队列中，程序就结束了。</p><h3 id="_3-8-future" tabindex="-1"><a class="header-anchor" href="#_3-8-future"><span>3.8 Future</span></a></h3><p><strong>Future 是一个数据结构，表示还未完成的工作结果。</strong></p><blockquote><p>事件循环可以监视 Future 对象是否完成。从而允许应用的一部分等待另一部分完成一些工作。</p></blockquote><p>简单说，Future 就是一个类，用生成器实现了回调。</p><p>Future 的状态大概有如下几种:</p><ul><li>Pending</li><li>Running</li><li>Done</li><li>Cancelled</li></ul><p>创建 future 的时候，task 为 pending，事件循环调用执行的时候当然就是 running，调用完毕自然就是 done，如果需要停止事件循环，就需要先把 task 取消，状态为 cancel。这里先做了解知道 Task 是有状态的就够了。</p><h3 id="_3-9-task" tabindex="-1"><a class="header-anchor" href="#_3-9-task"><span>3.9 Task</span></a></h3><p>Task 是 Future 的一个子类，它知道如何包装和管理一个协程的执行。任务所需的资源可用时，事件循环会调度任务允许，并生成一个结果，从而可以由其他协程消费。一般操作最多的还是 Task。用 Task 来封装协程，给原本没有状态的协程增加一些状态。</p><h3 id="_3-10-awaitable-objects-可等待对象" tabindex="-1"><a class="header-anchor" href="#_3-10-awaitable-objects-可等待对象"><span>3.10 awaitable objects（可等待对象）</span></a></h3><p>如果一个对象可以用在 wait 表达式中，那么它就是一个可等待的对象。在 asyncio 模块中会一直提到这个概念，其中协程函数，Task，Future 都是 awaitable 对象。</p><p>用于 await 表达式中的对象。可以是 coroutine 也可以是实现了 <code>__await__()</code> 方法的对象，参见 PEP 492。类比于 Iterable 对象是 Generator 或实现了 <code>__iter__()</code> 方法的对象。</p><h3 id="_3-11-object-await-self" tabindex="-1"><a class="header-anchor" href="#_3-11-object-await-self"><span>3.11 <code>object._await_(self)</code></span></a></h3><p>必须返回生成器，<code>asyncio.Future</code> 类也实现了该方法，用于兼容 await 表达式。</p><p>而 <code>Task</code>继承自 <code>Future</code>，因此 <code>awaitable</code> 对象有三种：<code>coroutines</code>、<code>Tasks</code>和 <code>Futures</code>。</p><p><code>await</code>的目的：</p><ul><li>获取协程的结果</li><li>挂起当前协程，将控制交由事件循环，切换到其他协程，然后等待结果，最后恢复协程继续执行</li></ul><h3 id="_3-12-并发运行任务" tabindex="-1"><a class="header-anchor" href="#_3-12-并发运行任务"><span>3.12 并发运行任务</span></a></h3><p>一系列的协程可以通过 await 链式的调用，但是有的时候我们需要在一个协程里等待多个协程，比如我们在一个协程里等待 1000 个异步网络请求，对于访问次序有没有要求的时候，就可以使用另外的关键字 <code>asyncio.wait</code> 或 <code>asyncio.gather</code> 来解决了。</p><h4 id="_3-12-1-asyncio-gather" tabindex="-1"><a class="header-anchor" href="#_3-12-1-asyncio-gather"><span>3.12.1 asyncio.gather</span></a></h4><p>使用方法：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">asyncio.gather(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">aws, </span><span style="color:#FD971F;font-style:italic;">loop</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">return_exceptions</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也就是说使用 gather 语句并发协程，就得用 <code>await</code>去执行它。</p><p>这个方法可以接收三个参数，第一个 <code>aws</code>。</p><p><code>aws</code>一般是一个列表，如果里面的元素是 <code>awaitable</code>类型，在运行的时候它将自动被包装成 <code>Task</code>，<code>gather</code>会根据 <code>aws</code>中元素添加的顺序。顺序执行并返回结果列表。</p><p>第二个 loop 可以传入一个事件循环对象，一般不用管，最后一个 <code>return_exceptions</code> 默认是 False，如果 <code>return_exceptions</code> 为 True，异常将被视为成功结果，然后添加到结果列表中。</p><h2 id="_4-库" tabindex="-1"><a class="header-anchor" href="#_4-库"><span>4. 库</span></a></h2><p>Python 的异步编程主要基于 <code>asyncio</code> 库，通过 <code>async</code> 和 <code>await</code> 关键字实现，适用于处理大量 I/O 密集型任务（如网络请求、文件操作），而不是 CPU 密集型任务。</p><h3 id="_1-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-基本概念"><span>1. 基本概念</span></a></h3><ul><li><strong>同步</strong>：任务一个接一个完成，阻塞式运行。</li><li><strong>异步</strong>：可以同时处理多个任务，通过事件循环协调任务的执行。</li><li><strong>协程</strong>：带有 <code>async</code> 关键字的函数，执行时需要使用 <code>await</code> 或通过事件循环调用。</li></ul><h3 id="_2-核心组件" tabindex="-1"><a class="header-anchor" href="#_2-核心组件"><span>2. 核心组件</span></a></h3><ul><li><strong>协程函数</strong>：使用 <code>async def</code> 定义的函数。</li><li><strong>事件循环</strong>：异步任务的核心调度器，负责运行协程。</li><li><strong>任务</strong>：事件循环管理的协程对象。</li><li><strong>Future 对象</strong>：表示未来某个时间点会完成的结果（类似于 JavaScript 的 Promise）。</li><li><strong>async/await</strong>：<code>async</code> 定义异步函数，<code>await</code> 用于暂停协程的执行直到某任务完成。</li></ul><h2 id="_5-基础代码" tabindex="-1"><a class="header-anchor" href="#_5-基础代码"><span>5. 基础代码</span></a></h2><h3 id="_5-1-一个一个执行的-没有挂起而执行其他操作的代码" tabindex="-1"><a class="header-anchor" href="#_5-1-一个一个执行的-没有挂起而执行其他操作的代码"><span>5.1 一个一个执行的，没有挂起而执行其他操作的代码</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> say_hello</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;World&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">start_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.time()</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(say_hello())</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start_time)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#AE81FF;">20.150071144104004</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_5-2-异步执行" tabindex="-1"><a class="header-anchor" href="#_5-2-异步执行"><span>5.2 异步执行</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> say_hello</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;World&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    tasks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [say_hello() </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.gather(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">tasks) </span><span style="color:#88846F;"># 并发执行多个任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.time()</span></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Elapsed time: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>输出：</strong></p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">Hello</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">World</span></span>
<span class="line"><span style="color:#F8F8F2;">Elapsed time: </span><span style="color:#AE81FF;">2.0041310787200928</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_6-asyncio-库使用" tabindex="-1"><a class="header-anchor" href="#_6-asyncio-库使用"><span>6. <code>asyncio</code> 库使用</span></a></h2><h3 id="gather" tabindex="-1"><a class="header-anchor" href="#gather"><span><code>gather</code></span></a></h3><h4 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子 1</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> num</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    coros </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [asyncio.create_task(foo(i)) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">    done </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.gather(</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">coros)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(done)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> done:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心作用:</strong></p><ul><li>并发执行多个协程： 它会启动传入的多个协程，并尽可能并发地执行它们。</li><li>收集所有结果： 在所有协程完成后，它会返回一个包含每个协程结果的列表。</li><li>捕获异常： 如果某个协程抛出异常，<code>asyncio.gather</code> 会将异常重新抛出，但不会影响其他协程的执行。</li></ul><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#AE81FF;">6</span></span>
<span class="line"><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#AE81FF;">8</span></span>
<span class="line"><span style="color:#AE81FF;">9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>gather 通常被用来阶段性的一个操作，做完第一步才能做第二步，比如下面这样：</p><h4 id="例子-2" tabindex="-1"><a class="header-anchor" href="#例子-2"><span>例子 2</span></a></h4><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> step1</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(n)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;第1阶段已完成&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;此时用时&quot;</span><span style="color:#F8F8F2;">, time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> step2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(n)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;第2阶段已完成&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;此时用时&quot;</span><span style="color:#F8F8F2;">, time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.time()</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.gather(step1(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">,now),step2(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,now))</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> result:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;总用时&quot;</span><span style="color:#F8F8F2;">, time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> now)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">第2阶段已完成</span></span>
<span class="line"><span style="color:#F8F8F2;">此时用时 </span><span style="color:#AE81FF;">2.012958288192749</span></span>
<span class="line"><span style="color:#F8F8F2;">第1阶段已完成</span></span>
<span class="line"><span style="color:#F8F8F2;">此时用时 </span><span style="color:#AE81FF;">5.010961532592773</span></span>
<span class="line"><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">总用时 </span><span style="color:#AE81FF;">5.010961532592773</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以通过上面结果得到结论：</strong></p><ol><li>step 1 和 step 2 是并行运行的。</li><li>gather 会等待耗时一些的那个完成之后才返回结果，耗时总时间取决于其中任务时间最长的那个</li></ol><h3 id="asyncio-await" tabindex="-1"><a class="header-anchor" href="#asyncio-await"><span><code>asyncio.await</code></span></a></h3><p><strong>例子引入：</strong></p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(x)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> f</span><span style="color:#E6DB74;">&quot;Task </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">x</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> completed&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.gather(</span></span>
<span class="line"><span style="color:#F8F8F2;">        foo(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">),  </span><span style="color:#88846F;"># Task 1</span></span>
<span class="line"><span style="color:#F8F8F2;">        foo(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">),  </span><span style="color:#88846F;"># Task 2</span></span>
<span class="line"><span style="color:#F8F8F2;">        foo(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># Task 3</span></span>
<span class="line"><span style="color:#F8F8F2;">    )</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># [&#39;Task 1 completed&#39;, &#39;Task 2 completed&#39;, &#39;Task 3 completed&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>解释：</strong></p><ol><li><code>foo(1)</code>、<code>foo(2)</code> 和 <code>foo(3)</code> 会同时开始执行（并发）。</li><li>每个协程按照自己的逻辑运行，<code>foo(1)</code> 需要 1 秒完成，<code>foo(2)</code> 需要 2 秒，<code>foo(3)</code> 需要 3 秒。</li><li>当所有协程完成后，<code>gather</code> 返回一个列表，列表中每个元素对应协程的返回值。</li></ol><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;Task 1 completed&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Task 2 completed&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Task 3 completed&#39;</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>详细说明：</strong></p><p>我们先看一下 <code>wait</code> 的语法结构：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">asyncio.wait(aws, </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">loop</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">timeout</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">return_when</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">ALL_COMPLETED</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>wait</code> 一共有 4 个参数，第一个参数 <code>aws</code>，一般是一个任务列表。</p><p>第二个 <code>*</code> 之后的都是强制关键字参数，即 <code>loop</code>、<code>timeout</code>、<code>return_when</code>。</p><p><code>loop</code> 通 <code>gather</code> 的参数是一个事件循环，该参数计划在 Python 3.10 中删除。</p><p><code>timeout</code>可以指定这组任务的超时时间，请注意，此函数不会引发 <code>asyncio.TimeoutError</code>，超时的时候会返回已完成的任务。</p><p><code>return_when</code>可以指定什么条件下返回结果，默认是所以任务完成就返回结果列表。</p><p><code>return_when</code>的具体参数看下面的表格：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td><code>FIRST_COMPLETED</code></td><td>任何一个 future 完成或取消时返回</td></tr><tr><td><code>FIRST_EXCEPTION</code></td><td>任何一个 future 出现错误将返回，如果没有出现异常等价于 <code>ALL_COMPLETED</code></td></tr><tr><td><code>ALL_COMPLETED</code></td><td>当所有任务完成或者被取消时返回结果，默认值。</td></tr></tbody></table><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio,time,aiohttp</span></span>
<span class="line"><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> requests.exceptions </span><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> RequestException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">start_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.time()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> request</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">	try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">		async</span><span style="color:#F92672;"> with</span><span style="color:#F8F8F2;"> aiohttp.ClientSession() </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> session:</span></span>
<span class="line"><span style="color:#F8F8F2;">			html </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> session.get(url)</span></span>
<span class="line"><span style="color:#F8F8F2;">			res </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> html.text()</span></span>
<span class="line"><span style="color:#88846F;">			# print(res)</span></span>
<span class="line"><span style="color:#F92672;">	except</span><span style="color:#F8F8F2;"> RequestException:</span></span>
<span class="line"><span style="color:#F92672;">		return</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># async def main(loop):</span></span>
<span class="line"><span style="color:#88846F;"># 	url = &#39;https://static4.scrape.cuiqingcai.com/&#39;</span></span>
<span class="line"><span style="color:#88846F;"># 	tasks = [request(url) for _ in range(10)]</span></span>
<span class="line"><span style="color:#88846F;"># 	tasks = loop.create_task(tasks)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">	url </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;https://ssr4.scrape.center&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">	loop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> asyncio.get_event_loop()</span></span>
<span class="line"><span style="color:#F8F8F2;">	tasks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [asyncio.ensure_future(request(url)) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> _ </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">	wait </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> loop.run_until_complete(asyncio.wait(tasks))</span></span>
<span class="line"><span style="color:#66D9EF;">	print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(wait))</span></span>
<span class="line"><span style="color:#66D9EF;">	print</span><span style="color:#F8F8F2;">(time.time() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start_time)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#AE81FF;">6.529097557067871</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>wait 返回的结果是一个元组，第一部分是完成的任务，第二部分是准备中的任务。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">done, pending </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.wait(aws)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 done 表示完成的任务，可以通过迭代获取每个任务。</p><p>pending 表示的是还没执行的任务。</p><p>下面看一个例子来进一步了解：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(</span><span style="color:#AE81FF;">0.99991</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> num</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">    #coro = foo()</span></span>
<span class="line"><span style="color:#F8F8F2;">    coro </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [asyncio.create_task(foo(i)) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">) ]</span></span>
<span class="line"><span style="color:#F8F8F2;">    done, pending </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.wait(coro,</span><span style="color:#FD971F;font-style:italic;">timeout</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;font-style:italic;">return_when</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;ALL_COMPLETED&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> coro </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> done:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(coro.result())</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;pending&quot;</span><span style="color:#F8F8F2;">,pending)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> pending:</span></span>
<span class="line"><span style="color:#66D9EF;">         print</span><span style="color:#F8F8F2;">(item)    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常"><span>捕获异常</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Error in Task </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">x</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> f</span><span style="color:#E6DB74;">&quot;Task </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">x</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> completed&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.gather(foo(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">), foo(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">), foo(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(result)</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Caught exception: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">e</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Caught exception: Error </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> Task </span><span style="color:#AE81FF;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>在这种情况下：</strong></p><ul><li>虽然 foo(2) 抛出了异常，gather 仍然会等待其他任务完成。</li><li>异常会被 gather 捕获并重新抛出，你可以通过 try...except 处理它。</li></ul><p>你可以通过设置 return_exceptions=True，让 gather 在任务失败时返回异常而不是抛出异常：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> foo</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        raise</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Error in Task </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">x</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> asyncio.sleep(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> f</span><span style="color:#E6DB74;">&quot;Task </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">x</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> completed&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> asyncio.gather(foo(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">), foo(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">), foo(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">), </span><span style="color:#FD971F;font-style:italic;">return_exceptions</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(result)</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Caught exception: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">e</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;__main__&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>输出：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;Task 1 completed&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">ValueError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Error in Task 2&#39;</span><span style="color:#F8F8F2;">), </span><span style="color:#E6DB74;">&#39;Task 3 completed&#39;</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意事项</p><ol><li><strong>不保证任务顺序：</strong> <code>gather</code> 返回的结果列表中，结果的顺序与传入协程的顺序一致，而不是任务完成的先后顺序。</li><li><strong>任务并发而非并行：</strong> <code>asyncio</code> 是基于单线程的协程并发，适合 I/O 密集型任务。如果你需要 CPU 密集型任务，请结合 <code>concurrent.futures</code> 或 <code>multiprocessing</code>。</li></ol><h3 id="定义协程" tabindex="-1"><a class="header-anchor" href="#定义协程"><span>定义协程</span></a></h3><p>协程就是一个<strong>函数</strong>，只是它满足以下几个特征：</p><ul><li>依赖 I/O 操作（有 I/O 依赖的操作）</li><li>可以在进行 I/O 操作时暂停</li><li>无法直接运行</li></ul><p>它的作用就是对有大量 I/O 操作的程序进行加速。</p><p>Python 协程属于可等待对象，因此可以在其他协程中被等待。</p><div class="hint-container tip"><p class="hint-container-title">什么叫可等待对象？——await</p><p>如果前面被标记 await 就表明他是个协程，我们需要等待它返回一个数据。</p></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 代码示例 一</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">    # net() # error</span></span>
<span class="line"><span style="color:#F92672;">    await</span><span style="color:#F8F8F2;"> net()  </span><span style="color:#88846F;"># right</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">    # net() # error</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> net()  </span><span style="color:#88846F;"># right</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(asyncio.run(main()))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>举个例子，我从网络上下载某个数据文件下载到我的本地电脑上，这很显然是一个 I/O 操作。比方这个文件较大（2GB），可能需要耗时 30min 才能下载成功。而在这 30min 里面，它会卡在 await 后面。这个 await 标记了协程，那就意味着它可以被暂停，那既然该任务可以被暂停，我们就把它分离出去。我这个线程继续执行其它任务，它这个 30min 分出去慢慢的传输，我这个程序再运行其他操作。</p><p>上面的代码，Python 3.6 会给你报错。报错信息如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;C:/Code/pycharm_daima/爬虫大师班/14-异步编程/test.py&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">26</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    asyncio.run(main())</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">AttributeError</span><span style="color:#F8F8F2;">: module </span><span style="color:#E6DB74;">&#39;asyncio&#39;</span><span style="color:#F8F8F2;"> has no attribute </span><span style="color:#E6DB74;">&#39;run&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么会出现这样的报错呢？</strong></p><p>因为从 Python 3.7+ 之后 Python 已经完全支持异步了，Python 3.6 之前只是支持部分异步，许多的方法是非常冗长的。</p><p><strong>一个异步函数调用另一个异步函数：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">	# net() # error</span></span>
<span class="line"><span style="color:#F92672;">	await</span><span style="color:#F8F8F2;"> net() </span><span style="color:#88846F;"># right</span></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>异步主要做得是 I/O 类型，CPU 密集型就不需要使用异步。</p><p>一个异步调用另一个异步函数，不能直接被调用，必须添加 await</p></div><p>我们使用代码验证一下，不加 await 调用试一试：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">	net() </span><span style="color:#88846F;"># error</span></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">C:</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Code</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">pycharm_daima</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">爬虫大师班</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">14</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">异步编程</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">test.py:</span><span style="color:#AE81FF;">31</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">RuntimeWarning</span><span style="color:#F8F8F2;">: coroutine </span><span style="color:#E6DB74;">&#39;net&#39;</span><span style="color:#F8F8F2;"> was never awaited</span></span>
<span class="line"><span style="color:#F8F8F2;">  net() </span><span style="color:#88846F;"># error</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">RuntimeWarning</span><span style="color:#F8F8F2;">: Enable tracemalloc to get the </span><span style="color:#66D9EF;font-style:italic;">object</span><span style="color:#F8F8F2;"> allocation traceback</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们添加上 await 即可正常运行：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">	# net() # error</span></span>
<span class="line"><span style="color:#F92672;">	await</span><span style="color:#F8F8F2;"> net() </span><span style="color:#88846F;"># right</span></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Process finished </span><span style="color:#F92672;">with</span><span style="color:#66D9EF;"> exit</span><span style="color:#F8F8F2;"> code </span><span style="color:#AE81FF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行成功并没有报错，接下来我们要输出得到的结果该怎么编写代码呢？直接赋值即可：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#88846F;">	# net() # error</span></span>
<span class="line"><span style="color:#F8F8F2;">	a </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> net() </span><span style="color:#88846F;"># right</span></span>
<span class="line"><span style="color:#66D9EF;">	print</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果：</span></span>
<span class="line"><span style="color:#AE81FF;">11</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ps：async 标记异步，await 标记等待。</p><p><strong>如果我们不想使用 await 来运行异步函数，那这个时候我们就可以按如下方法来运行代码：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> net</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#AE81FF;"> 11</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">	task </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> asyncio.create_task(net())</span></span>
<span class="line"><span style="color:#F92672;">	await</span><span style="color:#F8F8F2;"> task </span><span style="color:#88846F;"># right</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span></span>
<span class="line"><span style="color:#F8F8F2;">asyncio.run(main())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们来定义一个协程，体验一下它和普通进程在实现上的不同之处，代码如下：</p>`,151)),c(i,{id:"863",data:[{id:"原版"},{id:"注释版"}]},{title0:a(({value:e,isActive:o})=>l[4]||(l[4]=[n("原版")])),title1:a(({value:e,isActive:o})=>l[5]||(l[5]=[n("注释版")])),tab0:a(({value:e,isActive:o})=>l[6]||(l[6]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 代码示例二")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," asyncio")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," execute"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"x"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Number:'"),s("span",{style:{color:"#F8F8F2"}},", x)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"coroutine "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," execute("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#88846F"}},"# 创建协程对象")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Coroutine:'"),s("span",{style:{color:"#F8F8F2"}},", coroutine)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'After calling execute'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"loop "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," asyncio.get_event_loop()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"loop.run_until_complete(coroutine) "),s("span",{style:{color:"#88846F"}},"# 事件循环的 run_until_complete 方法运行指定的协程，直到该协程完成。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'After calling loop'"),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[7]||(l[7]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 代码示例二")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," asyncio  "),s("span",{style:{color:"#88846F"}},"# 导入 asyncio 模块: asyncio 是 Python 内置的异步 I/O 框架，用于处理异步任务和事件循环。它允许你编写可以并发执行的代码。")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 定义异步函数")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," execute"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"x"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    """')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"    - async def 用来定义一个 异步函数，表示这个函数是可以通过 await 调用或者通过事件循环调度的。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"	- 这里的函数 execute 接收一个参数 x，并打印 Number: x。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'    """')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"	print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Number:'"),s("span",{style:{color:"#F8F8F2"}},", x)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 创建协程对象")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"协程（Coroutine） 是一种可暂停的函数，通常由异步函数返回。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"调用 execute(1) 并不会立即执行 execute 的代码，而是返回一个 协程对象，该对象可以用来描述执行该函数的过程。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"coroutine "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," execute("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 打印协程对象")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'Coroutine:'"),s("span",{style:{color:"#F8F8F2"}},", coroutine) "),s("span",{style:{color:"#88846F"}},"# coroutine 是 execute(1) 返回的协程对象。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'After calling execute'"),s("span",{style:{color:"#F8F8F2"}},") "),s("span",{style:{color:"#88846F"}},"# 第二个 print 是为了说明，在调用 execute(1) 后，并未立即执行 execute 内的代码。")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 获取事件循环")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"事件循环是 asyncio 的核心，用于调度和运行异步任务。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"asyncio.get_event_loop() 获取当前线程的事件循环对象。如果没有事件循环，则会创建一个新的事件循环。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"loop "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," asyncio.get_event_loop()")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"事件循环的 run_until_complete 方法运行指定的协程，直到该协程完成。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"当运行 coroutine 时，协程中的代码 print('Number:', x) 会被实际执行，输出：1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"loop.run_until_complete(coroutine)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},"'After calling loop'"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 协程运行完成后，事件循环返回控制权给主线程。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"1. 协程：通过 async def 定义，可以暂停和恢复。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"2. 事件循环：通过 asyncio.get_event_loop 获取，用于调度协程。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},"3. 运行协程：通过 loop.run_until_complete 执行协程。")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E6DB74"}},'"""')])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[14]||(l[14]=p(`<blockquote><p>事件循环是 <code>asyncio</code> 的核心，用于调度和运行异步任务。<br><code>asyncio.get_event_loop()</code> 获取当前线程的事件循环对象。如果没有事件循环，则会创建一个新的事件循环。</p></blockquote><p>代码示例二中，我们首先引入了 <code>asyncio</code> 这个包，这样我们才可以使用 <code>async</code> 和 <code>await</code>，然后我们使用 <code>async</code> 定义了一个 <code>execute </code> 方法，方法接收一个数字参数，方法执行之后会打印这个数字。</p><p>随后我们直接调用了这个方法，然而这个方法并没有执行，而是返回了一个 <code>coroutine</code>协程对象。</p><p>随后我们使用 <code>get_event_loop</code> 方法创建了一个事件循环 <code>loop</code>，并调用了 <code>loop</code>对象的 <code>run_until_complete</code>方法将协程注册到事件循环 <code>loop</code>中，然后启动。最后我们才看到了 <code>execute</code>方法打印了输出结果。</p><p>可见，<code>async</code>定义的方法就会变成一个无法直接执行的 <code>coroutine</code>对象，必须将其注册到事件循环中才可以执行。</p><h3 id="task-显式地进行声明" tabindex="-1"><a class="header-anchor" href="#task-显式地进行声明"><span>Task 显式地进行声明</span></a></h3><p>上面我们还提到了 task，它是对 coroutine 对象的进一步封装，它里面相比 coroutine 对象多了<strong>运行状态</strong>，比如 running、finished 等，我们可以用这些状态来获取协程对象的执行情况。</p><p>在上面的例子中，当我们将 coroutine 对象传递给 <code>run_until_complete</code> 方法的时候，实际上它进行了一个操作就是将 coroutine 封装成了 task 对象，我们也可以显式地进行声明，如下所示：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">project = &#39;Code&#39;, file_name = &#39;yibudaima&#39;, author = &#39;AI悦创&#39;</span></span>
<span class="line"><span style="color:#E6DB74;">time = &#39;2020/4/22 19:24&#39;, product_name = PyCharm, 公众号：AI悦创</span></span>
<span class="line"><span style="color:#E6DB74;"># code is far away from bugs with the god animal protecting</span></span>
<span class="line"><span style="color:#E6DB74;">    I love animals. They taste delicious.</span></span>
<span class="line"><span style="color:#E6DB74;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">async</span><span style="color:#66D9EF;font-style:italic;"> def</span><span style="color:#A6E22E;"> execute</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">	print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Number:&#39;</span><span style="color:#F8F8F2;">, x)</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#F8F8F2;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">coroutine </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> execute(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Coroutine:&#39;</span><span style="color:#F8F8F2;">, coroutine)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;After calling execute&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">loop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> asyncio.get_event_loop()</span></span>
<span class="line"><span style="color:#F8F8F2;">task </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> loop.create_task(coroutine)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Task:&#39;</span><span style="color:#F8F8F2;">, task)</span></span>
<span class="line"><span style="color:#F8F8F2;">loop.run_until_complete(task)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Task:&#39;</span><span style="color:#F8F8F2;">, task)</span></span>
<span class="line"><span style="color:#88846F;"># print(&#39;Task:&#39;, task.result())</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;After calling loop&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>运行结果：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Coroutine: </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">coroutine </span><span style="color:#66D9EF;font-style:italic;">object</span><span style="color:#F8F8F2;"> execute at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">10e0f7830</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">After calling execute</span></span>
<span class="line"><span style="color:#F8F8F2;">Task: </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">Task pending coro</span><span style="color:#F92672;">=&lt;</span><span style="color:#F8F8F2;">execute() running at demo.py:</span><span style="color:#AE81FF;">4</span><span style="color:#F92672;">&gt;&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">Number: </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">Task: </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">Task finished coro</span><span style="color:#F92672;">=&lt;</span><span style="color:#F8F8F2;">execute() done, defined at demo.py:</span><span style="color:#AE81FF;">4</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> result</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">After calling loop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们定义了 loop 对象之后，接着调用了它的 <code>create_task</code> 方法将 coroutine 对象转化为了 task 对象，随后我们打印输出一下，发现它是 pending 状态。接着我们将 task 对象添加到事件循环中得到执行，随后我们再打印输出一下 task 对象，发现它的状态就变成了 finished，同时还可以看到其 result 变成了 1，也就是我们定义的 execute 方法的返回结果。</p><h2 id="_7-什么是事件循环" tabindex="-1"><a class="header-anchor" href="#_7-什么是事件循环"><span>7. 什么是事件循环？</span></a></h2><p><strong>事件循环（Event Loop）</strong> 是一种编程结构，用于管理异步操作的执行。它是异步编程的核心，负责调度和运行多个协程（异步任务）。在 Python 的 <code>asyncio</code> 模块中，事件循环是实现异步操作的关键组件。</p><h3 id="_7-1-事件循环的核心作用" tabindex="-1"><a class="header-anchor" href="#_7-1-事件循环的核心作用"><span>7.1 事件循环的核心作用</span></a></h3><ol><li><strong>调度协程和任务</strong>：将协程或任务（由 <code>async def</code> 定义）分派到 CPU 执行。</li><li><strong>管理 I/O 操作</strong>：监听网络 I/O、文件 I/O 等操作的完成。</li><li><strong>执行回调函数</strong>：当某些事件完成后，事件循环会调用注册的回调函数。</li><li><strong>任务并发</strong>：通过在任务等待时执行其他任务，实现并发。</li></ol><p>简而言之，事件循环会不断循环检查是否有任务需要执行，并按需切换任务。</p><h3 id="_7-2-事件循环的运行原理" tabindex="-1"><a class="header-anchor" href="#_7-2-事件循环的运行原理"><span>7.2 事件循环的运行原理</span></a></h3><p>事件循环的工作流程可以分为以下步骤：</p><ol><li><strong>初始化</strong>：创建一个事件循环。</li><li><strong>任务注册</strong>：将协程、回调函数、Future（未来对象）等加入事件循环的队列。</li><li><strong>运行循环</strong>：开始循环，从队列中提取任务，执行可运行的任务。</li><li>任务挂起与恢复： <ul><li>如果某个任务需要等待（如等待 I/O 完成），事件循环会挂起该任务。</li><li>当等待条件满足时，事件循环会恢复挂起的任务继续执行。</li></ul></li><li><strong>结束</strong>：当所有任务完成，事件循环退出。</li></ol><h3 id="_7-3-python-中的事件循环" tabindex="-1"><a class="header-anchor" href="#_7-3-python-中的事件循环"><span>7.3 Python 中的事件循环</span></a></h3><p>在 Python 的 <code>asyncio</code> 模块中，事件循环由 <code>asyncio.get_event_loop</code> 或 <code>asyncio.run</code> 提供，核心方法包括：</p><ol><li><strong><code>run_until_complete(task)</code></strong>：运行一个任务直到完成。</li><li><strong><code>create_task(coroutine)</code></strong>：将协程包装为任务，并注册到事件循环。</li><li><strong><code>run_forever()</code></strong>：持续运行事件循环（通常用于服务型应用）。</li><li><strong><code>stop()</code></strong>：停止事件循环。</li></ol>`,23)),c(i,{id:"1012",data:[{id:"事件循环的一个简单示例"},{id:"输出"}]},{title0:a(({value:e,isActive:o})=>l[8]||(l[8]=[n("事件循环的一个简单示例")])),title1:a(({value:e,isActive:o})=>l[9]||(l[9]=[n("输出")])),tab0:a(({value:e,isActive:o})=>l[10]||(l[10]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," asyncio")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," task1"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Task 1 is starting"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.sleep("),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Task 1 is completed"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," task2"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Task 2 is starting"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.sleep("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"Task 2 is completed"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"async"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," def"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    await"),s("span",{style:{color:"#F8F8F2"}}," asyncio.gather(task1(), task2())  "),s("span",{style:{color:"#88846F"}},"# 并发运行两个任务")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 获取事件循环并运行")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"asyncio.run(main())")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[11]||(l[11]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F92672"}}," is"),s("span",{style:{color:"#F8F8F2"}}," starting")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F92672"}}," is"),s("span",{style:{color:"#F8F8F2"}}," starting")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F92672"}}," is"),s("span",{style:{color:"#F8F8F2"}}," completed")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Task "),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F92672"}}," is"),s("span",{style:{color:"#F8F8F2"}}," completed")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),_:1}),l[15]||(l[15]=p('<h3 id="_7-4-事件循环的特点" tabindex="-1"><a class="header-anchor" href="#_7-4-事件循环的特点"><span>7.4 事件循环的特点</span></a></h3><ol><li><strong>单线程</strong>：事件循环通常运行在单线程中，但通过协程实现并发。</li><li><strong>非阻塞</strong>：任务之间不会阻塞，可以高效地处理多个 I/O 操作。</li><li><strong>任务切换</strong>：基于协程的挂起和恢复机制，而非线程切换。</li></ol><h3 id="_7-5-与传统多线程的区别" tabindex="-1"><a class="header-anchor" href="#_7-5-与传统多线程的区别"><span>7.5 与传统多线程的区别</span></a></h3><table><thead><tr><th>特性</th><th>多线程编程</th><th>异步事件循环</th></tr></thead><tbody><tr><td><strong>并发模型</strong></td><td>多线程并发</td><td>单线程并发</td></tr><tr><td><strong>开销</strong></td><td>线程切换开销较大</td><td>协程切换开销较小</td></tr><tr><td><strong>任务等待</strong></td><td>阻塞等待</td><td>非阻塞等待</td></tr><tr><td><strong>适用场景</strong></td><td>CPU 密集型任务</td><td>I/O 密集型任务</td></tr></tbody></table><h3 id="_7-6-事件循环的实际应用" tabindex="-1"><a class="header-anchor" href="#_7-6-事件循环的实际应用"><span>7.6 事件循环的实际应用</span></a></h3><ol><li><strong>网络编程</strong>：如处理 HTTP 请求的异步 Web 框架（FastAPI、aiohttp）。</li><li><strong>文件操作</strong>：异步读取和写入文件。</li><li><strong>任务调度</strong>：调度并发任务，避免阻塞。</li><li><strong>高性能爬虫</strong>：通过异步 I/O 高效抓取网页内容。</li></ol><h3 id="_7-7-总结" tabindex="-1"><a class="header-anchor" href="#_7-7-总结"><span>7.7 总结</span></a></h3><p>事件循环是异步编程的核心组件，负责调度任务和管理异步 I/O。它通过协程实现非阻塞的并发操作，适合处理大量 I/O 密集型任务。理解事件循环的运行机制是掌握 Python 异步编程的关键。</p>',8))])}const g=t(v,[["render",m]]),f=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week10.html","title":"高级算法——第10周ppt总结","lang":"zh-CN","frontmatter":{"title":"高级算法——第10周ppt总结","icon":"python","date":"2024-11-19T09:09:42.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1732033234000,"updatedTime":1733388592000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":4,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":28.07,"words":8420},"filePathRelative":"zh/Advanced_Algorithms/Week10.md","localizedDate":"2024年11月19日"}');export{g as comp,f as data};

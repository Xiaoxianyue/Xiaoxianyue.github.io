import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as l}from"./app-84lBMjzT.js";const p="/assets/image-20240506091530812-DM4q53NM.png",o="/assets/image-20240502202722927-B3L9gfPH.png",i="/assets/image-20240502202938603-Bo9vhUYU.png",t="/assets/image-20240502203117949-KZ2lmQe4.png",c="/assets/image-20240502203859642-B50GTQqs.png",r="/assets/image-20240502204850323-T-XgaIlu.png",F="/assets/image-20240502205821373-D9XWiq92.png",d="/assets/image-20240502215727113-BiFQuSYe.png",y="/assets/image-20240502220212275-DhEwNUGM.png",m={};function u(v,s){return l(),a("div",null,s[0]||(s[0]=[e(`<p>• Inheritance is a way that we can re-use behaviours from classes and just modify the bits we need to make new ones</p><p>• Inheritance lets a class pick up behaviours from the class which is its parent</p><h2 id="_1-继承的实现代码" tabindex="-1"><a class="header-anchor" href="#_1-继承的实现代码"><span>1. 继承的实现代码:</span></a></h2><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> string</span><span style="color:#F8F8F2;"> Name { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name; </span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> virtual</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> printname</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Name);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Employee</span><span style="color:#F8F8F2;"> : </span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> Id { </span><span style="color:#66D9EF;font-style:italic;">get</span><span style="color:#F8F8F2;">; </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">; }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Employee</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> employeeId):</span><span style="color:#FD971F;">base</span><span style="color:#F8F8F2;">(name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> employeeId;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> override</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> printname</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#FD971F;">        base</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">printname</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Id);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Program</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    static</span><span style="color:#F92672;"> void</span><span style="color:#A6E22E;"> Main</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;">[] args)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;John&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        person.</span><span style="color:#A6E22E;">printname</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span>        </span><span style="color:#A6E22E;text-decoration:underline;">Employee</span><span style="color:#F8F8F2;"> employee </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Employee</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;John&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">12345</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        employee.</span><span style="color:#A6E22E;">printname</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-1-object-type-employee-is-a-person-as-well" tabindex="-1"><a class="header-anchor" href="#_1-1-object-type-employee-is-a-person-as-well"><span>1.1 <strong>Object type “Employee” “IS-A” “Person” as well:</strong></span></a></h3><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Employee</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以这样记：左边是父右边子。</p><p><strong>这里再引入一个概念：Object -&gt; Person -&gt; Employee/Client</strong></p><p>可以看出，Object是一切的基类。所以下面这样是可以的。（左Object右Person）</p><figure><img src="`+p+'" alt="image-20240506091530812" tabindex="0" loading="lazy"><figcaption>image-20240506091530812</figcaption></figure><h3 id="_1-2-access-modifiers-between-base-class-and-derived-class" tabindex="-1"><a class="header-anchor" href="#_1-2-access-modifiers-between-base-class-and-derived-class"><span>1.2 <strong>access modifiers between base class and derived class:</strong></span></a></h3><p>基类的访问修饰符，派生类必须具有相同或更强的访问修饰符：</p><p>–E.g. internal for base class</p><p>–derived internal or private</p><p>–Different assemblies ,public</p><h2 id="_2-子类扩展父类代码" tabindex="-1"><a class="header-anchor" href="#_2-子类扩展父类代码"><span>2. 子类扩展父类代码</span></a></h2><img src="'+o+'" alt="image-20240502202722927" style="zoom:80%;"><h3 id="_2-1-通过重载方法-override-virtual" tabindex="-1"><a class="header-anchor" href="#_2-1-通过重载方法-override-virtual"><span>2.1 通过重载方法 （override &amp; virtual）</span></a></h3><p>关键字 override 表示 &quot;优先使用该版本的方法，而不是父版本的方法&quot;。</p><img src="'+i+'" alt="image-20240502202938603" style="zoom:80%;"><p>为了使重载正常工作，我们必须更改 CustomerAccount 类中方法的声明（如上幻灯片所示）</p><img src="'+t+'" alt="image-20240502203117949" style="zoom:80%;"><p>关键字 virtual 的意思是&quot;我们可能想在一个子类中创建该方法的另一个版本&quot;。 我不一定要重载这个方法，但如果你没有声明 virtual，我肯定不能重载。</p><h2 id="_3-protection-of-data-in-class-hierarchies-protect关键字" tabindex="-1"><a class="header-anchor" href="#_3-protection-of-data-in-class-hierarchies-protect关键字"><span>3. Protection of data in class hierarchies （protect关键字）</span></a></h2><img src="'+c+'" alt="image-20240502203859642" style="zoom:80%;"><p>这肯定行不通。balance是private的，意味着这个类的子类不能访问balance。</p><p>为了解决这个问题，C# 提供了一种限制性稍弱的访问级别，称为 protected，这样，扩展父类的子类就能看到该成员了。</p><h2 id="_4-子类调用父类方法" tabindex="-1"><a class="header-anchor" href="#_4-子类调用父类方法"><span>4. 子类调用父类方法</span></a></h2><h3 id="_4-1-base关键字" tabindex="-1"><a class="header-anchor" href="#_4-1-base关键字"><span>4.1 base关键字</span></a></h3><figure><img src="'+r+'" alt="image-20240502204850323" tabindex="0" loading="lazy"><figcaption>image-20240502204850323</figcaption></figure><p><strong>用关键字base.方法名</strong>（这时候调用的是父类的原方法）</p><blockquote><p>为啥要调用base关键字？它解决了什么问题？</p><p>–we don’t want to have to write the same code twice</p><p>– we don’t want to make the balance value visible outside the CustomerAccountclass</p></blockquote><p>最好不要这样！：</p><img src="'+F+`" alt="image-20240502205821373" style="zoom:80%;"><p>这种工作方式的问题在于无法使用基类。这使得从父类中获取行为变得更加困难。</p><h3 id="_4-2-sealed-关键字" tabindex="-1"><a class="header-anchor" href="#_4-2-sealed-关键字"><span>4.2 sealed 关键字</span></a></h3><p>如果我们不想父类中的方法被子类重载，我们就需要使用sealed关键字</p><h2 id="_5-constructors-and-hierarchies" tabindex="-1"><a class="header-anchor" href="#_5-constructors-and-hierarchies"><span>5. Constructors and Hierarchies</span></a></h2><h3 id="_5-1-constructor" tabindex="-1"><a class="header-anchor" href="#_5-1-constructor"><span>5.1 Constructor</span></a></h3><p>A constructor is a method which gets control during the process of object creation.</p><p>构造函数是一种在创建对象过程中获取控制权的方法。</p><p>In this situation the constructor in the child class will have to call a particular constructor in the parent to set that up before it is created</p><p>在这种情况下，子类中的构造函数必须调用父类中的特定构造函数，以便在创建之前进行设置。</p><p>The keyword base is used to make a call to the parent constructor</p><p>关键字 base 用于调用父构造函数</p><h3 id="_5-2-层次" tabindex="-1"><a class="header-anchor" href="#_5-2-层次"><span>5.2 层次</span></a></h3><p>When considering constructors and class hierarchies you must therefore remember</p><p>– to create an instance of a child class an instance of the parent must first be created.</p><p>– This means that a constructor in the parent must run before the constructor in the child.</p><p>因此，在考虑构造函数和类的层次结构时，必须记住</p><ul><li><p>要创建子类的实例，必须先创建父类的实例。</p></li><li><p>这意味着父类中的构造函数必须先于子类中的构造函数运行。</p></li></ul><p>Example:</p><p>首先是父类：</p><div class="language-c# line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c#" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">using</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">System</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    string</span><span style="color:#F8F8F2;"> Name;</span></span>
<span class="line"><span style="color:#F92672;">    int</span><span style="color:#F8F8F2;"> Age;</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Name);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> age): </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">(name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Age </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Age);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>子类也有构造函数，在父类构造函数被调用之后：</p><div class="language-c# line-numbers-mode" data-highlighter="shiki" data-ext="c#" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Employee</span><span style="color:#F8F8F2;">:</span><span style="color:#A6E22E;text-decoration:underline;">Person</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> int</span><span style="color:#F8F8F2;"> Id;</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#A6E22E;"> Employee</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">string</span><span style="color:#F8F8F2;"> name,</span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> age, </span><span style="color:#F92672;">int</span><span style="color:#F8F8F2;"> id):</span><span style="color:#FD971F;">base</span><span style="color:#F8F8F2;">(name)</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">        Id </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> id;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Console.</span><span style="color:#A6E22E;">WriteLine</span><span style="color:#F8F8F2;">(Id);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-abstract-methods-and-classes" tabindex="-1"><a class="header-anchor" href="#_6-abstract-methods-and-classes"><span>6. Abstract methods and classes</span></a></h2><p>C# 提供了一种将方法标记为抽象方法的方法。这意味着该方法的主体不在该类中提供，而将在子类中提供：</p><img src="`+d+'" alt="image-20240502215727113" style="zoom:80%;"><p>只要这个方法包含了抽象函数，这方法就是抽象类哦。抽象类也不可能有实例。</p><p>——是不是看起来和借口很像？</p><p>的确。区别是，抽象类可以包括抽象方法和已实现的方法。</p><figure><img src="'+y+'" alt="image-20240502220212275" tabindex="0" loading="lazy"><figcaption>image-20240502220212275</figcaption></figure>',63)]))}const g=n(m,[["render",u]]),E=JSON.parse('{"path":"/zh/OOP/Inheritance.html","title":"Intheritance","lang":"zh-CN","frontmatter":{"title":"Intheritance","icon":"c","date":"2024-05-02T19:47:51.000Z","author":"XiaoXianYue","isOriginal":true,"category":["C#","大二下"],"tag":["C#","大二下"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"description":"• Inheritance is a way that we can re-use behaviours from classes and just modify the bits we need to make new ones • Inheritance lets a class pick up behaviours from the class ...","head":[["meta",{"property":"og:url","content":"https://bougiemoonintaurus/zh/OOP/Inheritance.html"}],["meta",{"property":"og:site_name","content":"奶酪奶酪"}],["meta",{"property":"og:title","content":"Intheritance"}],["meta",{"property":"og:description","content":"• Inheritance is a way that we can re-use behaviours from classes and just modify the bits we need to make new ones • Inheritance lets a class pick up behaviours from the class ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-07T14:30:54.000Z"}],["meta",{"property":"article:author","content":"XiaoXianYue"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":"大二下"}],["meta",{"property":"article:published_time","content":"2024-05-02T19:47:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-07T14:30:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Intheritance\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-02T19:47:51.000Z\\",\\"dateModified\\":\\"2024-05-07T14:30:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoXianYue\\"}]}"]]},"git":{"createdTime":1701251856000,"updatedTime":1715092254000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":6,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":3.82,"words":1145},"filePathRelative":"zh/OOP/Inheritance.md","localizedDate":"2024年5月2日","excerpt":"<p>• Inheritance is a way that we can re-use behaviours  from classes and just modify the bits we need to  make new ones</p>\\n<p>• Inheritance lets a class pick up behaviours from the  class which is its parent</p>\\n<h2>1. 继承的实现代码:</h2>\\n<div class=\\"language-c# line-numbers-mode has-collapsed-lines collapsed\\" data-highlighter=\\"shiki\\" data-ext=\\"c#\\" style=\\"--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2\\"><pre class=\\"shiki monokai vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#F92672\\">using</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">System</span><span style=\\"color:#F8F8F2\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">class</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Person</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    public</span><span style=\\"color:#F92672\\"> string</span><span style=\\"color:#F8F8F2\\"> Name { </span><span style=\\"color:#66D9EF;font-style:italic\\">get</span><span style=\\"color:#F8F8F2\\">; </span><span style=\\"color:#66D9EF;font-style:italic\\">set</span><span style=\\"color:#F8F8F2\\">; }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    public</span><span style=\\"color:#A6E22E\\"> Person</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#F92672\\">string</span><span style=\\"color:#F8F8F2\\"> name)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        Name </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> name; </span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    public</span><span style=\\"color:#F92672\\"> virtual</span><span style=\\"color:#F92672\\"> void</span><span style=\\"color:#A6E22E\\"> printname</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        Console.</span><span style=\\"color:#A6E22E\\">WriteLine</span><span style=\\"color:#F8F8F2\\">(Name);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">class</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Employee</span><span style=\\"color:#F8F8F2\\"> : </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Person</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    public</span><span style=\\"color:#F92672\\"> int</span><span style=\\"color:#F8F8F2\\"> Id { </span><span style=\\"color:#66D9EF;font-style:italic\\">get</span><span style=\\"color:#F8F8F2\\">; </span><span style=\\"color:#66D9EF;font-style:italic\\">set</span><span style=\\"color:#F8F8F2\\">; }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    public</span><span style=\\"color:#A6E22E\\"> Employee</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#F92672\\">string</span><span style=\\"color:#F8F8F2\\"> name, </span><span style=\\"color:#F92672\\">int</span><span style=\\"color:#F8F8F2\\"> employeeId):</span><span style=\\"color:#FD971F\\">base</span><span style=\\"color:#F8F8F2\\">(name)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        Id </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F8F8F2\\"> employeeId;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    public</span><span style=\\"color:#F92672\\"> override</span><span style=\\"color:#F92672\\"> void</span><span style=\\"color:#A6E22E\\"> printname</span><span style=\\"color:#F8F8F2\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#FD971F\\">        base</span><span style=\\"color:#F8F8F2\\">.</span><span style=\\"color:#A6E22E\\">printname</span><span style=\\"color:#F8F8F2\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        Console.</span><span style=\\"color:#A6E22E\\">WriteLine</span><span style=\\"color:#F8F8F2\\">(Id);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color:#66D9EF;font-style:italic\\">class</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Program</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F92672\\">    static</span><span style=\\"color:#F92672\\"> void</span><span style=\\"color:#A6E22E\\"> Main</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#F92672\\">string</span><span style=\\"color:#F8F8F2\\">[] args)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    {</span></span>\\n<span class=\\"line\\"><span>        </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Person</span><span style=\\"color:#F8F8F2\\"> person </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F92672\\"> new</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Person</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E6DB74\\">\\"John\\"</span><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        person.</span><span style=\\"color:#A6E22E\\">printname</span><span style=\\"color:#F8F8F2\\">();</span></span>\\n<span class=\\"line\\"><span>        </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Employee</span><span style=\\"color:#F8F8F2\\"> employee </span><span style=\\"color:#F92672\\">=</span><span style=\\"color:#F92672\\"> new</span><span> </span><span style=\\"color:#A6E22E;text-decoration:underline\\">Employee</span><span style=\\"color:#F8F8F2\\">(</span><span style=\\"color:#E6DB74\\">\\"John\\"</span><span style=\\"color:#F8F8F2\\">,</span><span style=\\"color:#AE81FF\\">12345</span><span style=\\"color:#F8F8F2\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">        employee.</span><span style=\\"color:#A6E22E\\">printname</span><span style=\\"color:#F8F8F2\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#F8F8F2\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div><div class=\\"collapsed-lines\\"></div></div>","autoDesc":true}');export{g as comp,E as data};

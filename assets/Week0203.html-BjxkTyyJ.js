import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as p,e as t,w as a,r as i,o as y,a as s,d as l}from"./app-Cc7WVUoo.js";const d="/assets/image-20241105162742265-Ce1Kn2Qe.png",v={};function u(m,n){const F=i("Tabs");return y(),c("div",null,[n[6]||(n[6]=p(`<h2 id="week-02-sorting-algorithms" tabindex="-1"><a class="header-anchor" href="#week-02-sorting-algorithms"><span>Week 02: Sorting Algorithms</span></a></h2><h3 id="_1-bogosort" tabindex="-1"><a class="header-anchor" href="#_1-bogosort"><span>1. Bogosort</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> bogoSort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">mylist</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> (is_sorted(mylist) </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> False</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># if the list is not sorted...</span></span>
<span class="line"><span style="color:#F8F8F2;">        shuffle(mylist)  </span><span style="color:#88846F;"># ...shuffle again</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> (mylist)  </span><span style="color:#88846F;"># if sorted, return</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># check if list is sorted</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> is_sorted</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">mylist</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(mylist)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, n </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># iterate through list</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (mylist[i] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> mylist[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">]):  </span><span style="color:#88846F;"># if number is bigger than the number to the right</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#AE81FF;"> False</span><span style="color:#88846F;">  # list is not sorted so return False</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># shuffle the list</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> shuffle</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">mylist</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(mylist)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, n):</span></span>
<span class="line"><span style="color:#F8F8F2;">        r </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.randint(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, n </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># go through list, swapping each</span></span>
<span class="line"><span style="color:#F8F8F2;">        mylist[i], mylist[r] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> mylist[r], mylist[i]  </span><span style="color:#88846F;"># item with another randomly chosen</span></span>
<span class="line"><span style="color:#88846F;">    # item</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">mylist </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]  </span><span style="color:#88846F;"># define a list to sort</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(bogoSort(mylist))  </span><span style="color:#88846F;"># function call</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-insertion-sort" tabindex="-1"><a class="header-anchor" href="#_2-insertion-sort"><span>2. Insertion Sort</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> insertionsort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F8F8F2;">        key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">        j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> key:</span></span>
<span class="line"><span style="color:#F8F8F2;">            arr[j] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[j </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[j] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(insertionsort([</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-bubble-sort" tabindex="-1"><a class="header-anchor" href="#_3-bubble-sort"><span>3. Bubble Sort</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> bubble_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[j] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                arr[j], arr[j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[j</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], arr[j]</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(bubble_sort([</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">,</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-quick-sort" tabindex="-1"><a class="header-anchor" href="#_4-quick-sort"><span>4. Quick Sort</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> quick_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> []:</span></span>
<span class="line"><span style="color:#F92672;">        return</span></span>
<span class="line"><span style="color:#F8F8F2;">    pivot </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    ltp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    etogtp </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> arr[x] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> pivot:</span></span>
<span class="line"><span style="color:#F8F8F2;">            ltp.append(x)</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            etogtp.append(x)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> quick_sort(ltp) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> [pivot] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> quick_sort(etogtp)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(quick_sort([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_5-merge-sort" tabindex="-1"><a class="header-anchor" href="#_5-merge-sort"><span>5. merge sort</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> merge_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"><span style="color:#F8F8F2;">    mid </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F8F8F2;">    left_arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[:mid]</span></span>
<span class="line"><span style="color:#F8F8F2;">    right_arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[mid:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    left_sort </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> merge_sort(left_arr)</span></span>
<span class="line"><span style="color:#F8F8F2;">    right_sort </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> merge_sort(right_arr)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    merged </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> merge(left_sort, right_sort)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> merged</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> merge</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">left_arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">right_arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(left_arr) </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(right_arr):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> left_arr[i] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> right_arr[j]:</span></span>
<span class="line"><span style="color:#F8F8F2;">            result.append(left_arr[i])</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            result.append(right_arr[j])</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    result.extend(left_arr[i:])</span></span>
<span class="line"><span style="color:#F8F8F2;">    result.extend(right_arr[j:])</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(merge_sort([</span><span style="color:#AE81FF;">38</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">27</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">43</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">82</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="week-03" tabindex="-1"><a class="header-anchor" href="#week-03"><span>Week 03</span></a></h2><h3 id="_1-linear-search" tabindex="-1"><a class="header-anchor" href="#_1-linear-search"><span>1. Linear Search</span></a></h3><ul><li>Also called sequential search</li><li>Iterate over elements until found or sequence ends</li></ul><p>Disadvantages:</p><ul><li>Not a very good algorithm</li><li>We have to check every single item in sequence</li><li>Inefficient</li></ul><p>Code:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> linear</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">lst</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">goal_num</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(lst)):</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> lst[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> goal_num:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(linear([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-binary-search" tabindex="-1"><a class="header-anchor" href="#_2-binary-search"><span>2. Binary Search</span></a></h3><ul><li>Much faster than linear search</li><li>A ‘Divide and Conquer’ algorithm</li><li>Only works on sorted sequences</li></ul><h4 id="_2-1-how-it-works" tabindex="-1"><a class="header-anchor" href="#_2-1-how-it-works"><span>2.1 How it works?</span></a></h4><ol><li>Find the middle value of sequence</li><li>If search value is the middle value, then success</li><li>If search value is less than the middle value, discard the top half of the sequence</li><li>If search value is greater than the middle value, discard the bottom half of the sequence</li><li>Repeat from (1) until value is found or length of the sequence is zero (i.e. value is not found)</li></ol>`,22)),t(F,{id:"115",data:[{id:"Iterative"},{id:"Recursive"},{id:"自己写的代码"}]},{title0:a(({value:e,isActive:o})=>n[0]||(n[0]=[l("Iterative")])),title1:a(({value:e,isActive:o})=>n[1]||(n[1]=[l("Recursive")])),title2:a(({value:e,isActive:o})=>n[2]||(n[2]=[l("自己写的代码")])),tab0:a(({value:e,isActive:o})=>n[3]||(n[3]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," binarySearch"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"arr"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"val"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    middle "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(arr) "),s("span",{style:{color:"#F92672"}},"//"),s("span",{style:{color:"#AE81FF"}}," 2")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#F8F8F2"}}," val "),s("span",{style:{color:"#F92672"}},"!="),s("span",{style:{color:"#F8F8F2"}}," arr[middle]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(arr) "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," arr[middle] "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#F8F8F2"}}," val:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                arr "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," arr["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},":middle]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                arr "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," arr[middle:]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," val "),s("span",{style:{color:"#F92672"}},"!="),s("span",{style:{color:"#F8F8F2"}}," arr[middle]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"                return"),s("span",{style:{color:"#AE81FF"}}," False")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        middle "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(arr) "),s("span",{style:{color:"#F92672"}},"//"),s("span",{style:{color:"#AE81FF"}}," 2")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#AE81FF"}}," True")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(binarySearch(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"10"),s("span",{style:{color:"#F8F8F2"}},"], "),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},"))")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,null,-1)])),tab1:a(({value:e,isActive:o})=>n[4]||(n[4]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," binarySearch"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"arr"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"val"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    ans "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," True")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(arr) "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F92672"}}," and"),s("span",{style:{color:"#F8F8F2"}}," val "),s("span",{style:{color:"#F92672"}},"!="),s("span",{style:{color:"#F8F8F2"}}," arr["),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ans "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," False")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        middle "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(arr) "),s("span",{style:{color:"#F92672"}},"//"),s("span",{style:{color:"#AE81FF"}}," 2")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," val "),s("span",{style:{color:"#F92672"}},"!="),s("span",{style:{color:"#F8F8F2"}}," arr[middle]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            if"),s("span",{style:{color:"#F8F8F2"}}," val "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#F8F8F2"}}," arr[middle]:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                arr "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," arr[middle "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},":]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                ans "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," binarySearch(arr, val)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            else"),s("span",{style:{color:"#F8F8F2"}},":")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                arr "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," arr[:middle]")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"                ans "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," binarySearch(arr, val)")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," ans")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(binarySearch(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},"], "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},"))")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab2:a(({value:e,isActive:o})=>n[5]||(n[5]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," binarySearch"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"arr"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"val"),s("span",{style:{color:"#F8F8F2"}},"):")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    j "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(arr) "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}}," 1")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"<="),s("span",{style:{color:"#F8F8F2"}}," j:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        middle "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," (i "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#F8F8F2"}}," j) "),s("span",{style:{color:"#F92672"}},"//"),s("span",{style:{color:"#AE81FF"}}," 2")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        if"),s("span",{style:{color:"#F8F8F2"}}," arr[middle] "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," val:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"            return"),s("span",{style:{color:"#AE81FF"}}," True")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        elif"),s("span",{style:{color:"#F8F8F2"}}," arr[middle] "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#F8F8F2"}}," val:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            j "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," middle "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}}," 1")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        elif"),s("span",{style:{color:"#F8F8F2"}}," arr[middle] "),s("span",{style:{color:"#F92672"}},"<"),s("span",{style:{color:"#F8F8F2"}}," val:")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," middle "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#AE81FF"}}," False")]),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"}),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(binarySearch(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"9"),s("span",{style:{color:"#F8F8F2"}},"], "),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},"))")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1),s("p",null,null,-1)])),_:1}),n[7]||(n[7]=p(`<h3 id="_3-interpolation-search" tabindex="-1"><a class="header-anchor" href="#_3-interpolation-search"><span>3. Interpolation Search</span></a></h3><p>给定一个长度为 n 的有序数组 nums 和一个元素 target ，数组不存在重复元素。现将 target 插入数组 nums 中，并保持其有序性。若数组中已存在元素 target ，则插入到其左方。请返回插入后 target 在数组中的索引。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> binary_searching</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">    j </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(nums) </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> j:</span></span>
<span class="line"><span style="color:#F8F8F2;">        m </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> j) </span><span style="color:#F92672;">//</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> nums[m] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F8F8F2;">            nums.insert(m, target)</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> nums</span></span>
<span class="line"><span style="color:#F92672;">        elif</span><span style="color:#F8F8F2;"> nums[m] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> target:</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">            i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> m </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(binary_searching([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">23</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">26</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">31</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">36</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-data-structures" tabindex="-1"><a class="header-anchor" href="#_4-data-structures"><span>4. Data Structures</span></a></h3><h4 id="_4-1-binary-tree" tabindex="-1"><a class="header-anchor" href="#_4-1-binary-tree"><span>4.1 Binary Tree</span></a></h4><ul><li><p>Some Rules</p><img src="`+d+'" alt="image-20241105162742265" style="zoom:33%;"></li></ul><h4 id="_4-2-heaps" tabindex="-1"><a class="header-anchor" href="#_4-2-heaps"><span>4.2 Heaps</span></a></h4>',7))])}const E=r(v,[["render",u]]),A=JSON.parse('{"path":"/zh/Advanced_Algorithms/Week0203.html","title":"高级算法——第2,3周查漏补缺","lang":"zh-CN","frontmatter":{"title":"高级算法——第2,3周查漏补缺","icon":"python","date":"2024-11-05T15:25:50.000Z","author":"XiaoXianYue","isOriginal":true,"category":["大三上","高级算法课件"],"tag":["大三上","高级算法课件"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1730813769000,"updatedTime":1731059867000,"contributors":[{"name":"Xiaoxianyue","username":"Xiaoxianyue","email":"2310219843@qq.com","commits":2,"url":"https://github.com/Xiaoxianyue"}]},"readingTime":{"minutes":3.05,"words":916},"filePathRelative":"zh/Advanced_Algorithms/Week0203.md","localizedDate":"2024年11月5日"}');export{E as comp,A as data};
